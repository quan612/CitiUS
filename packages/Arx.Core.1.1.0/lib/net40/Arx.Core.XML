<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arx.Core</name>
    </assembly>
    <members>
        <member name="T:Arx.Core.Attributes.DateTimePropertyDisplayAttribute">
            <summary>
            Defines additional options for date time properties when using a generic editor such as the AnnotatedItemEditor.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DateTimePropertyDisplayAttribute.Format">
            <summary>
            Gets or sets the date time format to use when displaying this value.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DateTimePropertyDisplayAttribute.UseDateTimePicker">
            <summary>
            Gets or sets a value indicating whether or not to use a date time picker control to allow the user to enter the date and time value.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DateTimePropertyDisplayAttribute.UseTimePicker">
            <summary>
            Gets or sets a value indicating whether or not to use a time picker control to allow the user to enter the time.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DateTimePropertyDisplayAttribute.DisplayAsDateTimeKind">
            <summary>
            Gets or sets a value that determines the <see cref="T:System.DateTimeKind"/> to display the value of this property as.
            </summary>
            <remarks>
            Set this value to Local and the <see cref="P:Arx.Core.Attributes.DateTimePropertyDisplayAttribute.StoreAsDateTimeKind"/> to UTC to keep the UTC time as the property value but display the time in the local time zone.
            </remarks>
        </member>
        <member name="P:Arx.Core.Attributes.DateTimePropertyDisplayAttribute.StoreAsDateTimeKind">
            <summary>
            Gets or sets a value that determines the <see cref="T:System.DateTimeKind"/> to store the value of this property as.
            </summary>
            <remarks>
            Set this value to UTC and the <see cref="P:Arx.Core.Attributes.DateTimePropertyDisplayAttribute.DisplayAsDateTimeKind"/> to Local to keep the UTC time as the property value but display the time in the local time zone.
            </remarks>
        </member>
        <member name="T:Arx.Core.Attributes.DropDownPropertyDisplayAttribute">
            <summary>
            Defines additional options for properties that should be displayed with a drop down
            when using a generic editor such as the AnnotatedItemEditor.
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.DropDownPropertyDisplayAttribute._options">
            <summary>
            The collection that contains all options for the dropdown. The list is sorted using the property specified by DisplayMemberPath.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DropDownPropertyDisplayAttribute.DisplayMemberPath">
            <summary>
            Gets or sets the name of the property from the options type to display.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DropDownPropertyDisplayAttribute.ValueMemberPath">
            <summary>
            Gets or sets the name of the property from the options type to lookup this property value with.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DropDownPropertyDisplayAttribute.OptionProviderType">
            <summary>
            Gets or sets the type that contains the method to retrieve the options for this property.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DropDownPropertyDisplayAttribute.OptionProviderMethod">
            <summary>
            Gets or sets the name of the method belonging to the <see cref="P:Arx.Core.Attributes.DropDownPropertyDisplayAttribute.OptionProviderType"/> that will return an IEnumerable collection of options.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DropDownPropertyDisplayAttribute.ForceRefresh">
            <summary>
            Gets or sets a value indicating whether or not the options should be reloaded every time the property is accessed.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.DropDownPropertyDisplayAttribute.Options">
            <summary>
            Gets the available options.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.EntityDisplayAttribute">
            <summary>
            Defines class level information to display when using generic editor controls such as the AnnotatedItemEditor.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.EntityDisplayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.EntityDisplayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.EntityDisplayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.EntityDisplayAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.Title">
            <summary>
            Gets or sets the title to display.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.HelpText">
            <summary>
            Gets or sets the help text for this entity type.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.AllowEdit">
            <summary>
            Gets or sets a value indicating whether allow edit.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.AllowAdd">
            <summary>
            Gets or sets a value indicating whether allow add.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.AllowDelete">
            <summary>
            Gets or sets a value indicating whether allow delete.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.BeforeSaveGetQuestionMethod">
            <summary>
            Gets or sets the name of method that return the question before save.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.BeforeSaveMessageBoxButton">
            <summary>
            Gets or sets the before save message box button.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.DialogResultNoMethod">
            <summary>
            Gets or sets the name of the method to call when user select No button.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.DialogResultYesMethod">
            <summary>
            Gets or sets the name of the method to call when user select Yes button.
            </summary>        
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.DialogResultOkMethod">
            <summary>
            Gets or sets the name of the method to call when user select OK button.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EntityDisplayAttribute.ResourceType">
            <summary>
            Gets or sets the resource type where the localized text is contained.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.EntityDisplayAttribute.GetLocalizedValue(System.String)">
            <summary>
            The get localized value.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Arx.Core.Attributes.EnumDisplayAttribute">
            <summary>
            Extended display information for enumeration values.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EnumDisplayAttribute.Name">
            <summary>
            Gets or sets the name to display for this enumeration value.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EnumDisplayAttribute.Description">
            <summary>
            Gets or sets the description for this enumeration value.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.EnumDisplayAttribute.ResourceType">
            <summary>
            Gets or sets the resource type where the localized text is contained.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.FilteredDropDownPropertyDisplayAttribute">
            <summary>
            Defines additional options for properties that should be displayed with the filtered drop down
            when using a generic editor such as the AnnotatedItemEditor.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.FilteredDropDownPropertyDisplayAttribute.DisplayMemberPath">
            <summary>
            Gets or sets the name of the property from the options type to display.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.FilteredDropDownPropertyDisplayAttribute.PrimaryKeyMemberPath">
            <summary>
            Gets or sets the name of the property from the options type to lookup this property value with.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.FilteredDropDownPropertyDisplayAttribute.OptionProviderType">
            <summary>
            Gets or sets the type that contains the method to retrieve the options for this property.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.FilteredDropDownPropertyDisplayAttribute.OptionProviderMethod">
            <summary>
            Gets or sets the name of the method belonging to the <see cref="P:Arx.Core.Attributes.FilteredDropDownPropertyDisplayAttribute.OptionProviderType"/> that will return an IEnumerable collection of options.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.FilteredDropDownPropertyDisplayAttribute.SearchThreshold">
            <summary> Gets or sets the search threshold. </summary>
        </member>
        <member name="T:Arx.Core.Attributes.ExceptionTraceInformationAttribute">
            <summary>
            Stores default trace information for an exception type.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.ExceptionTraceInformationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.ExceptionTraceInformationAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.ExceptionTraceInformationAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.ExceptionTraceInformationAttribute"/> class.
            </summary>
            <param name="errorNumber">
            The error number.
            </param>
        </member>
        <member name="M:Arx.Core.Attributes.ExceptionTraceInformationAttribute.#ctor(System.Int32,System.Diagnostics.TraceEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.ExceptionTraceInformationAttribute"/> class.
            </summary>
            <param name="errorNumber">
            The error number.
            </param>
            <param name="eventType">
            The event type.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.ExceptionTraceInformationAttribute.ErrorNumber">
            <summary>
            Gets or sets the error number to associated with this exception type.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.ExceptionTraceInformationAttribute.EventType">
            <summary>
            Gets or sets the trace event type to associate with this exception type.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.PropertyDisplayAttribute">
            <summary>
            Defines property level information that defines the display when using generic editor controls such as the AnnotatedItemEditor.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.PropertyDisplayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.PropertyDisplayAttribute"/> class.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.Name">
            <summary>
            Gets or sets the name to display for this property.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.ShortName">
            <summary>
            Gets or sets the short name to use as a column header. 
            </summary>
            <remarks>
            If this value is blank the value from the <see cref="P:Arx.Core.Attributes.PropertyDisplayAttribute.Name"/> property will be used.
            </remarks>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.Description">
            <summary>
            Gets or sets the description for this property.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.Group">
            <summary>
            Gets or sets the group that this property belongs to.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.Order">
            <summary>
            Gets or sets the order in which this property should be displayed.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.DisplayInGrid">
            <summary>
            Gets or sets a value indicating whether or not this value should be displayed in the grid.
            </summary>
            <remarks>This value is true by default.</remarks>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.DisplayInEditor">
            <summary>
            Gets or sets a value indicating whether or not this value should be displayed in the editor.
            </summary>
            <remarks>This value is true by default.</remarks>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.DisplayInPropertyExplorer">
            <summary>
            Gets or sets a value indicating whether or not this value should be displayed in the property explorer.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.ReadOnly">
            <summary>
            Gets or sets a value indicating whether or not this value can be changed when displayed in the editor.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.ResourceType">
            <summary>
            Gets or sets the resource type where the localized text is contained.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.CustomProcessView">
            <summary>
            Gets or sets the name of the view for custom process.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.PropertyDisplayAttribute.CustomProcessDescription">
            <summary>
            Gets or sets the name of the description of custom process.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RangeAttribute">
            <summary>
            Defines the minimum and maximum range for a numeric value.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RangeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RangeAttribute.#ctor(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RangeAttribute"/> class.
            </summary>
            <param name="min">
            The minimum value.
            </param>
            <param name="max">
            The max maximum value.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RangeAttribute.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.RangeAttribute.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RequiredAttribute">
            <summary>
            Indicates that a property requires a value.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcActionAttribute">
            <summary>
            Defines the AspMvcActionAttribute type.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.AspMvcActionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.AspMvcActionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.AspMvcActionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.AspMvcActionAttribute"/> class.
            </summary>
            <param name="anonymousProperty">
            The anonymous property.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.AspMvcActionAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcAreaAttribute">
            <summary>
            Defines the AspMvcAreaAttribute type.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.AspMvcAreaAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.AspMvcAreaAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.AspMvcAreaAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.AspMvcAreaAttribute"/> class.
            </summary>
            <param name="anonymousProperty">
            The anonymous property.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.AspMvcAreaAttribute.AnonymousProperty">
            <summary>
            Gets AnonymousProperty.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcControllerAttribute">
            <summary>
            Defines the AspMvcControllerAttribute type.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.AspMvcControllerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.AspMvcControllerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.AspMvcControllerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.AspMvcControllerAttribute"/> class.
            </summary>
            <param name="anonymousProperty">
            The anonymous property.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.AspMvcControllerAttribute.AnonymousProperty">
            <summary>
            Gets AnonymousProperty.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcMasterAttribute">
            <summary>
            Defines the AspMvcMasterAttribute type.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcModelTypeAttribute">
            <summary>
            Defines the AspMvcModelTypeAttribute type.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcPartialViewAttribute">
            <summary>
            Defines the AspMvbPartialViewAttribute type.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcSupressViewErrorAttribute">
            <summary>
            Defines the AspMvcSupressViewErrorAttribute type.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcTemplateAttribute">
            <summary>
            Defines the AspMvcTemplateAttribute type.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AspMvcViewAttribute">
            <summary>
            Defines the AspMvcViewAttribute type.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:Arx.Core.Attributes.RSharp.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:Arx.Core.Attributes.RSharp.AssertionConditionType"/>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.AssertionConditionAttribute.#ctor(Arx.Core.Attributes.RSharp.AssertionConditionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.AssertionConditionAttribute"/> class. 
            </summary>
            <param name="conditionType">
            Specifies condition type
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:Arx.Core.Attributes.RSharp.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:Arx.Core.Attributes.RSharp.AssertionConditionAttribute"/>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.BaseTypeRequiredAttribute"/> class. 
            </summary>
            <param name="baseType">
            Specifies which types are required
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.ImplicitUseKindFlags">
            <summary>
            Defines the options for the kind of implicit use.
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseKindFlags.Default">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute"/> or <see cref="T:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags.Itself">
            <summary>
            The target is itself.
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used.
            </summary>
        </member>
        <member name="F:Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.LocalizationRequiredAttribute.Required">
            <summary>
            Gets or sets a value indicating whether an element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:Arx.Core.Attributes.RSharp.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:Arx.Core.Attributes.RSharp.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute.#ctor(Arx.Core.Attributes.RSharp.ImplicitUseKindFlags,Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute"/> class.
            </summary>
            <param name="useKindFlags">
            The use kind flags.
            </param>
            <param name="targetFlags">
            The target flags.
            </param>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute.#ctor(Arx.Core.Attributes.RSharp.ImplicitUseKindFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute"/> class.
            </summary>
            <param name="useKindFlags">
            The use kind flags.
            </param>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute.#ctor(Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute"/> class.
            </summary>
            <param name="targetFlags">
            The target flags.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute.UseKindFlags">
            <summary>
            Gets UseKindFlags.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.PathReferenceAttribute">
            <summary>
            Defines the PathReferenceAttribute type.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.PathReferenceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.PathReferenceAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.PathReferenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.PathReferenceAttribute"/> class.
            </summary>
            <param name="basePath">
            The base path.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.PathReferenceAttribute.BasePath">
            <summary>
            Gets the base path.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.PublicAPIAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.PublicAPIAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.PublicAPIAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.PublicAPIAttribute"/> class.
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.RazorSectionAttribute">
            <summary>
            Defines the RazorSectionAttribute type.
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.StringFormatMethodAttribute"/> class. 
            </summary>
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute.#ctor(Arx.Core.Attributes.RSharp.ImplicitUseKindFlags,Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute"/> class.
            </summary>
            <param name="useKindFlags">
            The use kind flags.
            </param>
            <param name="targetFlags">
            The target flags.
            </param>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute.#ctor(Arx.Core.Attributes.RSharp.ImplicitUseKindFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute"/> class.
            </summary>
            <param name="useKindFlags">
            The use kind flags.
            </param>
        </member>
        <member name="M:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute.#ctor(Arx.Core.Attributes.RSharp.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute"/> class.
            </summary>
            <param name="targetFlags">
            The target flags.
            </param>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute.UseKindFlags">
            <summary>
            Gets UseKindFlags.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.RSharp.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Arx.Core.Attributes.TextPropertyDisplayAttribute">
            <summary>
            Defines additional options for displaying text values in a generic editor such as the annotated item editor.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.TextPropertyDisplayAttribute.Multiline">
            <summary>
            Gets or sets a value indicating whether or not to use a multiline text box when editing.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.TextPropertyDisplayAttribute.SuggestedHeight">
            <summary>
            Gets or sets the initial multiline text box height. Set this value to NaN for auto height (default).
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.TextPropertyDisplayAttribute.MaxLength">
            <summary>
            Gets or sets the maximum length of this text value.
            </summary>
        </member>
        <member name="P:Arx.Core.Attributes.TextPropertyDisplayAttribute.NumericCharacterOnly">
            <summary>
            Gets or sets a value indicating whether allowing only numeric characters.
            </summary>
        </member>
        <member name="T:Arx.Core.Exceptions.AccessDeniedException">
            <summary>
            Thrown when the logged in user does not have access to perform the requested action
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.AccessDeniedException.#ctor">
            <summary>
            Initializes a new instance of the AccessDeniedException class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.AccessDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AccessDeniedException class with the specified error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Arx.Core.Exceptions.AccessDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AccessDeniedException class with the specified error message and inner exception..
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Arx.Core.Exceptions.ApplyActionCodeException">
            <summary>
            Thrown when an attempt is made to apply an invalid <see cref="!:ActionCode"/> to an <see cref="!:Account"/>
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ApplyActionCodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ApplyActionCodeException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ApplyActionCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ApplyActionCodeException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ApplyActionCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ApplyActionCodeException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ClientConfigurationException">
            <summary>
            Thrown when service calls fail due to a problem with the client configuration.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ClientConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ClientConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ClientConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ClientConfigurationException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ClientConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ClientConfigurationException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ComponentFailureException">
            <summary>
            Thrown when a component fails in an unrecoverable manner.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ComponentFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ComponentFailureException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ComponentFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ComponentFailureException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ComponentFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ComponentFailureException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseConnectionException">
            <summary>
            Thrown when a problem occurs when connecting to a database server.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseConnectionException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseConnectionException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseConnectionException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseConstraintException">
            <summary>
            Thrown when a database constraint violation occurs.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseConstraintException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseConstraintException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseConstraintException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseConstraintException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseConstraintException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseConstraintException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseDeadlockException">
            <summary>
            Thrown when the transaction has been terminated as a deadlock victim.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseDeadlockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseDeadlockException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseDeadlockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseDeadlockException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseDeadlockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseDeadlockException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseDuplicateKeyException">
            <summary>
            Thrown when inserting duplicate key.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseDuplicateKeyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseDuplicateKeyException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseDuplicateKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseDuplicateKeyException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseDuplicateKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseDuplicateKeyException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseException">
            <summary>
            Base class for all database exception mapping.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseNullCastException">
            <summary>
            Thrown when a DBNull value is cast as a non nullable type.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseNullCastException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseNullCastException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseNullCastException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseNullCastException"/> class. 
            </summary>
            <param name="message">
            The exception message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseNullCastException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseNullCastException"/> class. 
            </summary>
            <param name="message">
            The exception message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseSecurityException">
            <summary>
            Thrown when a database security violation occurs.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseSecurityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseSecurityException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseSecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseSecurityException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseSecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseSecurityException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseSyntaxException">
            <summary>
            Thrown when a SQL syntax error occurs.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseSyntaxException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseSyntaxException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseSyntaxException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseSyntaxException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseSyntaxException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseSyntaxException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.DatabaseTimeoutException">
            <summary>
            Thrown when a database query times out.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseTimeoutException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.DatabaseTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.DatabaseTimeoutException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.EmptyResultSetException">
            <summary>
            Thrown when a query returns no rows where a result was expected.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.EmptyResultSetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.EmptyResultSetException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.EmptyResultSetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.EmptyResultSetException"/> class. 
            </summary>
            <param name="message">
            The exception message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.EmptyResultSetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.EmptyResultSetException"/> class. 
            </summary>
            <param name="message">
            The exception message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ErrorNumbers">
            <summary>
            Contains error number constants.
            </summary>
            <remarks>
            Error numbers from 2000 to 4999 are warnings. The operation that raised a warning can be retried without changes.
            Error numbers from 5000 to 7999 are errors. The operation that raised an error may work if arguments are changed.
            Error numbers from 8000 to 9999 are critical. If a critical error is raised support may need to be contacted.
            </remarks>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.DatabaseTimeout">
            <summary>
            Represents a database timeout. The request can be retried.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.DatabaseDeadlockVictim">
            <summary>
            The request was chosen as the database deadlock victim.  The request can be retried.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.UnexpectedServerFaultMessage">
            <summary>
            The request returned a server fault that did not match the operation contract.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.LoginFailure">
            <summary>
            An attempt to login to the system has failed.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.UserNotLoggedIn">
            <summary>
            An operation was attempted but no user was logged in to the system.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.DecryptionFailure">
            <summary>
            A value could not be decrypted.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.DatabaseNullCast">
            <summary>
            Thrown when a DBNull value is cast as a type that does not support null values.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.EmptyResultSet">
            <summary>
            Thrown when a query returns no rows where a result was expected.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.DatabaseSecurityException">
            <summary>
            The request failed due to a database security exception. The request cannot be completed.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.ServerUnavailalbe">
            <summary>
            The request failed because the server could not be reached.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.SoftwareLicenseViolation">
            <summary>
            The ARx software license has been violated.  This may result in users being unable to access the system.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.PropertyMappingError">
            <summary>
            An invalid property mapping has caused an entity to fail to load.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.DatabaseConnectionError">
            <summary>
            Could not connect to the database.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.ClientConfigurationError">
            <summary>
            Service call fail due to an improper configuration on the client.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.InvalidMessageHeader">
            <summary>
            Service call fail due to an invalid message header.
            </summary>
        </member>
        <member name="F:Arx.Core.Exceptions.ErrorNumbers.ComponentFailure">
            <summary>
            A component on which the system depends has failed.
            </summary>
        </member>
        <member name="T:Arx.Core.Exceptions.ExternalDataProviderServiceException">
            <summary>
            Thrown when the logged in user does not have access to perform the requested action
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ExternalDataProviderServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ExternalDataProviderServiceException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ExternalDataProviderServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ExternalDataProviderServiceException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ExternalDataProviderServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ExternalDataProviderServiceException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ExternalDataResultProcessException">
            <summary>
            Thrown when the an exception occurred during ExternalDataResultProcessException
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ExternalDataResultProcessException.#ctor">
            <summary>
            Initializes a new instance of the ExternalDataResultProcessException class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ExternalDataResultProcessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ExternalDataResultProcessException"/> class. 
            Initializes a new instance of the FilterAggregationException class with the specified error message.
            </summary>
            <param name="message">
            The error message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ExternalDataResultProcessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ExternalDataResultProcessException"/> class. 
            Initializes a new instance of the FilterAggregationException class with the specified error message and inner exception..
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.FilterAggregationException">
            <summary>
            Thrown when the an exception occurred during filter operation.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.FilterAggregationException.#ctor">
            <summary>
            Initializes a new instance of the FilterAggregationException class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.FilterAggregationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FilterAggregationException class with the specified error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Arx.Core.Exceptions.FilterAggregationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FilterAggregationException class with the specified error message and inner exception..
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Arx.Core.Exceptions.FreeSlotUnavailableException">
            <summary>
            Indicates that a free slot could not be found for the specified collection.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.FreeSlotUnavailableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.FreeSlotUnavailableException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.FreeSlotUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.FreeSlotUnavailableException"/> class with a specified error message. 
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.FreeSlotUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.FreeSlotUnavailableException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.InvalidAccountStatusException">
            <summary>
            Thrown when an attempt is made to apply an invalid <see cref="!:AccountStatus"/> to an <see cref="!:Account"/>.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.InvalidAccountStatusException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.InvalidAccountStatusException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.InvalidAccountStatusException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.InvalidAccountStatusException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.InvalidAccountStatusException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.InvalidAccountStatusException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.InvalidMessageException">
            <summary>
            Thrown when a problem with a WCF message occurs.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.InvalidMessageException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.InvalidMessageException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.InvalidMessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.InvalidMessageException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.InvalidMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.InvalidMessageException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.LicenseViolationException">
            <summary>
            Thrown when the ARx software license has been violated.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.LicenseViolationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.LicenseViolationException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.LicenseViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.LicenseViolationException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.LicenseViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.LicenseViolationException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.LoginException">
            <summary>
            Thrown when a login attempt fails.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.LoginException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.LoginException"/> class. 
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.LoginException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.LoginException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.LoginException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.LoginException"/> class. 
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ObjectBuildException">
            <summary>
            Indicates a problem with the construction of an entity.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ObjectBuildException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ObjectBuildException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ObjectBuildException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ObjectBuildException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ObjectBuildException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ObjectBuildException"/> class with a specified error message and a reference
             to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ObjectValidationException">
            <summary>
            Thrown when an attempt to save an invalid object is made. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ObjectValidationException.#ctor">
            <summary>
            Initializes a new instance of the ObjectValidationException class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ObjectValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectValidationException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Arx.Core.Exceptions.ObjectValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ObjectValidationException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception stack trace.</param>
        </member>
        <member name="T:Arx.Core.Exceptions.PropertyExpressionBuilderException">
            <summary>
            Thrown when attempting to generate SQL statement from property expression filter
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.PropertyExpressionBuilderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.PropertyExpressionBuilderException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.PropertyExpressionBuilderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.PropertyExpressionBuilderException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.PropertyExpressionBuilderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.PropertyExpressionBuilderException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="innerException">
            The inner exception stack trace.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.PropertyMappingException">
            <summary>
            Thrown when attempting to use an invalid property mapping for extracting data from data reader. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.PropertyMappingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.PropertyMappingException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.PropertyMappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.PropertyMappingException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.PropertyMappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.PropertyMappingException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ReadOnlyException">
            <summary>
            To be thrown when a read only object or member is changed or saved.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ReadOnlyException.#ctor">
            <summary>
            Initializes a new instance of the ReadOnlyException class
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ReadOnlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ReadOnlyException class with the specified message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Arx.Core.Exceptions.ReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ReadOnlyException class with the specified message.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception stack trace.</param>
        </member>
        <member name="T:Arx.Core.Exceptions.UpdateFieldException">
            <summary>
            Error messages for spUpdateField.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.UpdateFieldException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.UpdateFieldException"/> class with
            the specified error code.
            </summary>
            <param name="errorCode">
            The error code.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ValidationDeleteException">
            <summary>
            Throw from entity delete method when the validation fail.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationDeleteException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationDeleteException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationDeleteException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationDeleteException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationDeleteException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationDeleteException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationDeleteException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationDeleteException"/> class.
            </summary>
            <param name="format">
            The message used in string.format method.
            </param>
            <param name="args">
            The arguments for string.format method.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationDeleteException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationDeleteException"/> class.
            </summary>
            <param name="format">
            The message used in string.format method.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
            <param name="args">
            The arguments for string.format method.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ValidationSaveException">
            <summary>
            Throw from entity save method when the validation fail.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationSaveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationSaveException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationSaveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationSaveException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationSaveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationSaveException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationSaveException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationSaveException"/> class.
            </summary>
            <param name="format">
            The message used in string.format method.
            </param>
            <param name="args">
            The arguments for string.format method.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ValidationSaveException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ValidationSaveException"/> class.
            </summary>
            <param name="format">
            The message used in string.format method.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
            <param name="args">
            The arguments for string.format method.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.ServerFaultMessage">
            <summary>
            Wraps un-handled server side exceptions for return to the client. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ServerFaultMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ServerFaultMessage class.
            </summary>
            <param name="exceptionType">The type of exception.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Arx.Core.Exceptions.ServerFaultMessage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ServerFaultMessage class.
            </summary>
            <param name="exceptionType">The type of exception.</param>
            <param name="message">The error message.</param>
            <param name="errorNumber">The error number.</param>
        </member>
        <member name="M:Arx.Core.Exceptions.ServerFaultMessage.#ctor(System.String,System.String,System.Int32,System.Guid)">
            <summary>
            Initializes a new instance of the ServerFaultMessage class.
            </summary>
            <param name="exceptionType">The type of exception.</param>
            <param name="message">The error message.</param>
            <param name="errorNumber">The error number.</param>
            <param name="traceId">The trace id.</param>
        </member>
        <member name="P:Arx.Core.Exceptions.ServerFaultMessage.ExceptionType">
            <summary>
            Gets or sets the type of exception wrapped.
            </summary>
        </member>
        <member name="P:Arx.Core.Exceptions.ServerFaultMessage.ExceptionMessage">
            <summary>
            Gets or sets the message for this exception.
            </summary>
        </member>
        <member name="P:Arx.Core.Exceptions.ServerFaultMessage.ErrorNumber">
            <summary>
            Gets or sets the error number for this exception.
            </summary>
        </member>
        <member name="P:Arx.Core.Exceptions.ServerFaultMessage.TraceId">
            <summary>
            Gets or sets the trace id for this exception.
            </summary>
            <remarks>
            The trace id can be used to help locate tracing messages associated with this exception that contain more details.
            </remarks>
        </member>
        <member name="T:Arx.Core.Exceptions.ServerUnavailalbeException">
            <summary>
            Thrown when communication with the server fails.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ServerUnavailalbeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ServerUnavailalbeException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.ServerUnavailalbeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ServerUnavailalbeException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.ServerUnavailalbeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.ServerUnavailalbeException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.TransactionPostException">
            <summary>
            Thrown when a financial transaction fails to post.
            </summary>
            <seealso cref="!:TransactionManager"/>
        </member>
        <member name="M:Arx.Core.Exceptions.TransactionPostException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.TransactionPostException"/> class. 
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.TransactionPostException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.TransactionPostException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.TransactionPostException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.TransactionPostException"/> class. 
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="T:Arx.Core.Exceptions.UnknownServerFaultException">
            <summary>
            Thrown when a server fault does not match any expected server fault.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.UnknownServerFaultException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.UnknownServerFaultException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.UnknownServerFaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.UnknownServerFaultException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.UnknownServerFaultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.UnknownServerFaultException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="P:Arx.Core.Exceptions.UnknownServerFaultException.ExceptionMessage">
            <summary>
            Gets or sets the message for this exception.
            </summary>
        </member>
        <member name="P:Arx.Core.Exceptions.UnknownServerFaultException.ErrorNumber">
            <summary>
            Gets or sets the error number for this exception.
            </summary>
        </member>
        <member name="P:Arx.Core.Exceptions.UnknownServerFaultException.TraceId">
            <summary>
            Gets or sets the trace id for this exception.
            </summary>
            <remarks>
            The trace id can be used to help locate tracing messages associated with this exception that contain more details.
            </remarks>
        </member>
        <member name="M:Arx.Core.Exceptions.UnknownServerFaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="T:Arx.Core.Exceptions.UserNotLoggedInException">
            <summary>
            Thrown when no user is logged in when attempting to perform action.
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.UserNotLoggedInException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.UserNotLoggedInException"/> class
            </summary>
        </member>
        <member name="M:Arx.Core.Exceptions.UserNotLoggedInException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.UserNotLoggedInException"/> class
            </summary>
            <param name="message">
            The error message
            </param>
        </member>
        <member name="M:Arx.Core.Exceptions.UserNotLoggedInException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Exceptions.UserNotLoggedInException"/> class
            </summary>
            <param name="message">
            The error message
            </param>
            <param name="innerException">
            The inner exception
            </param>
        </member>
        <member name="T:Arx.Core.IFilteredDropDownEntity">
            <summary>
            Represents a data entity that will use filtered drop down user control
            </summary>
        </member>
        <member name="M:Arx.Core.IFilteredDropDownEntity.StartWith(System.String)">
            <summary>
            The comparison method that indicate whether the current instance is "Start With" the passed parameter.
            </summary>
            <param name="startWithValue">
            The comparison value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Arx.Core.IFilteredDropDownEntity.Compare(System.String)">
            <summary>
            The compare.
            </summary>
            <param name="compareValue">
            The compare value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:Arx.Core.IUpdatableEntity">
            <summary>
            Represents a data entity that knows how to save and delete itself.
            </summary>
        </member>
        <member name="M:Arx.Core.IUpdatableEntity.Save">
            <summary>
            Saves this object.
            </summary>
        </member>
        <member name="M:Arx.Core.IUpdatableEntity.Delete">
            <summary>
            Deletes this object.
            </summary>
        </member>
        <member name="T:Arx.Core.Resources.General">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_AccessDenied">
            <summary>
              Looks up a localized string similar to Access Denied..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_CannotBeNull">
            <summary>
              Looks up a localized string similar to {0} cannot be null..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_ClientConfiguration">
            <summary>
              Looks up a localized string similar to ARx is unable to communicate with the server.  The ARx version may be incompatible with the server version or the ARx configuration may be incorrect.  Please verify the ARx version and configuration.  See inner exception for details..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_CompareToType">
            <summary>
              Looks up a localized string similar to obj is not of the same type as this instance..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_CryptUnlockComponent">
            <summary>
              Looks up a localized string similar to Crypt component unlock failed..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_DatabaseNullCast">
            <summary>
              Looks up a localized string similar to Attempted to cast DBNull to a non-nullable type..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_FilterAggregationException">
            <summary>
              Looks up a localized string similar to Exception occurred during filter operation..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_FreeSlotUnavailable">
            <summary>
              Looks up a localized string similar to All slots for the collection are occupied..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_LicenseViolation">
            <summary>
              Looks up a localized string similar to License violation detected..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_Login">
            <summary>
              Looks up a localized string similar to Error logging the user in..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_ObjectIsInvalid">
            <summary>
              Looks up a localized string similar to Object is invalid..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_ObjectIsReadonly">
            <summary>
              Looks up a localized string similar to Object is readonly..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_PropertyIsReadonly">
            <summary>
              Looks up a localized string similar to Property is readonly..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_RsaComponentFailed">
            <summary>
              Looks up a localized string similar to The RSA encryption component has failed.  See inner exception for details..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_ServerUnavailable">
            <summary>
              Looks up a localized string similar to ARx is unable to communicate with the server.  The server may be down or too busy to accept requests at this time.  If this problem persists contact technical support..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_UnknownServerFault">
            <summary>
              Looks up a localized string similar to The server returned a fault message that is unknown or unexpected at this time.  If this problem persists contact technical support..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Error_UserNotLoggedIn">
            <summary>
              Looks up a localized string similar to User is not logged in..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Validation_FieldLength">
            <summary>
              Looks up a localized string similar to {0} cannot be greater than {1} characters..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Validation_FieldRequired">
            <summary>
              Looks up a localized string similar to {0} is required..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Validation_LessThanMinimum">
            <summary>
              Looks up a localized string similar to {0} cannot be less than {1}..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.General.Warning_EmptyResultSet">
            <summary>
              Looks up a localized string similar to No results were returned for a scalar operation..
            </summary>
        </member>
        <member name="T:Arx.Core.Resources.MessageHandler">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.MessageHandler.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.MessageHandler.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.MessageHandler.Error_RsaComponentFailed">
            <summary>
              Looks up a localized string similar to The RSA encryption component has failed.  See inner exception for details..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.MessageHandler.Error_UnlockComponentFailed">
            <summary>
              Looks up a localized string similar to RSA component unlock failed.
            </summary>
        </member>
        <member name="T:Arx.Core.Resources.MessageInspector">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.MessageInspector.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.MessageInspector.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.MessageInspector.Error_MessageIsInvalid">
            <summary>
              Looks up a localized string similar to Message is invalid. This may be due to an unauthorized client..
            </summary>
        </member>
        <member name="T:Arx.Core.Resources.Utils">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.Error_AddRange">
            <summary>
              Looks up a localized string similar to An item with the same key has already been added..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.Error_DirectoryDoesNotExist">
            <summary>
              Looks up a localized string similar to Directory of path: {0} does not exist..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.Error_FileDoesNotExist">
            <summary>
              Looks up a localized string similar to The file: {0} does not exist.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.Error_RsaUnlockFailed">
            <summary>
              Looks up a localized string similar to RSA component unlock failed.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.Error_ToFixedWidthLengthGreaterThanTarget">
            <summary>
              Looks up a localized string similar to The length of the string (&apos;{0}&apos;) is greater than the target length of the fixed width string (&apos;{1}&apos;)..
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.Error_ZonedDecimalInput">
            <summary>
              Looks up a localized string similar to The string is not a valid EBCDIC zoned decimal.  An EBCDIC zoned decimal must contain only numbers with the exception of the rightmost character which must be one of the following characters: {0}.
            </summary>
        </member>
        <member name="P:Arx.Core.Resources.Utils.Validation_InsertExists">
            <summary>
              Looks up a localized string similar to An item with the same key has already been added..
            </summary>
        </member>
        <member name="T:Arx.Core.Utilities.AesEncryption">
            <summary>
            Contains methods for encrypting and decrypting data.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.AesEncrypt(System.String)">
            <summary>
            Encrypts the text using AES 256 bit encryption and the default encryption key.
            </summary>
            <param name="text">The text to encrypt.</param>
            <returns>Encrypted text.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.AesEncrypt(System.String,System.Boolean)">
            <summary>
            Encrypts text using AES 256 bit encryption.
            </summary>
            <param name="text">The text to encrypt.</param>
            <param name="useSerialKey">Use the access serial encryption key instead of the default encryption key.</param>
            <returns>Encrypted text.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.AesEncrypt(System.String,System.String)">
            <summary>
            Encrypts text using AES 256 bit encryption based on the specified string.
            </summary>
            <param name="text">The text to encrypt.</param>
            <param name="key">The encryption key to use.</param>
            <returns>Encrypted text.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.AesEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            Encrypts text using AES 256 bit encryption and the provided encryption key.
            </summary>
            <param name="text">The text to encrypt.</param>
            <param name="key">The encryption key to use.</param>
            <param name="encoding">
            The text encoding to use.
            NOTE: This should be the same encoding that was used when the value was encrypted or results may not match.
            </param>
            <returns>Encrypted text.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.AesDecrypt(System.String)">
            <summary>
            Decrypts the AES 256 bit encrypted text using the default encryption key.
            </summary>
            <param name="text">The text to decrypt.</param>
            <returns>Decrypted text.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.AesDecrypt(System.String,System.Boolean)">
            <summary>
            Decrypts text using AES 256 bit encryption.
            </summary>
            <param name="text">The text to decrypt.</param>
            <param name="useSerialKey">Use the access serial encryption key instead of the default encryption key.</param>
            <returns>Decrypted text.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.AesDecrypt(System.String,System.String)">
            <summary>
            Decrypts text using AES 256 bit encryption and the provided encryption key.
            </summary>
            <param name="text">The text to decrypt</param>
            <param name="key">The encryption key to use.</param>
            <returns>Decrypted text.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.AesDecrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            Decrypts text using AES 256 bit encryption and the provided encryption key.
            </summary>
            <param name="text">The text to decrypt.</param>
            <param name="key">The encryption key to use.</param>
            <param name="encoding">
            The text encoding to use.
            NOTE: This should be the same encoding that was used when the value was encrypted or results may not match.
            </param>
            <returns>Decrypted text.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AesEncryption.GetEncryptionKey(System.String)">
            <summary>
            This method hashes the provided password into an encryption key that is compatible with both .Net and CHILKAT AES encryption.
            </summary>
            <param name="password">The password or key phrase to hash to an encryption key.</param>
            <returns>The hashed key as a byte array.</returns>
        </member>
        <member name="T:Arx.Core.Utilities.AssemblyDetails">
            <summary>
            Provides assembly information.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.AssemblyDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Utilities.AssemblyDetails"/> class for the entry assembly.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.AssemblyDetails.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Utilities.AssemblyDetails"/> class.
            </summary>
            <param name="assembly">
            The assembly to build details from.
            </param>
        </member>
        <member name="P:Arx.Core.Utilities.AssemblyDetails.Title">
            <summary>
            Gets the title property of the assembly.
            </summary>
            <remarks>
            Retrieved from the <see cref="T:System.Reflection.AssemblyTitleAttribute"/>.
            </remarks>
        </member>
        <member name="P:Arx.Core.Utilities.AssemblyDetails.Description">
            <summary>
            Gets the description property of the assembly.
            </summary>
            <remarks>
            Retrieved from the <see cref="T:System.Reflection.AssemblyDescriptionAttribute"/>.
            </remarks>
        </member>
        <member name="P:Arx.Core.Utilities.AssemblyDetails.Product">
            <summary>
            Gets the product property of the assembly.
            </summary>
            <remarks>
            Retrieved from the <see cref="T:System.Reflection.AssemblyProductAttribute"/>.
            </remarks>
        </member>
        <member name="P:Arx.Core.Utilities.AssemblyDetails.Trademark">
            <summary>
            Gets the trademark property of the assembly.
            </summary>
            <remarks>
            Retrieved from the <see cref="T:System.Reflection.AssemblyTrademarkAttribute"/>.
            </remarks>
        </member>
        <member name="P:Arx.Core.Utilities.AssemblyDetails.Company">
            <summary>
            Gets the company property of the assembly.
            </summary>
            <remarks>
            Retrieved from the <see cref="T:System.Reflection.AssemblyCompanyAttribute"/>.
            </remarks>
        </member>
        <member name="P:Arx.Core.Utilities.AssemblyDetails.Copyright">
            <summary>
            Gets the copyright property of the assembly.
            </summary>
            <remarks>
            Retrieved from the <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/>.
            </remarks>
        </member>
        <member name="P:Arx.Core.Utilities.AssemblyDetails.Version">
            <summary>
            Gets the version of the assembly.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.AssemblyDetails.GetExecutingAssemblyDetails">
            <summary>
            Retrieves the details for the executing assembly.
            </summary>
            <returns>The details of the executing assembly.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.AssemblyDetails.GetAssemblyAttribute``1">
            <summary>
            Retrieves an attribute of the assembly.
            </summary>
            <typeparam name="T">
            The type of assembly attribute to retrieve.
            </typeparam>
            <returns>
            The requested attribute.
            </returns>
        </member>
        <member name="T:Arx.Core.Utilities.Caching.CacheCollection`2">
            <summary>
            An object cache.
            </summary>
            <typeparam name="TKeyPropertyType">
            The type of the property of TItemType that acts as a unique key for locating items.
            </typeparam>
            <typeparam name="TItemType">
            The type of the items to cache.
            </typeparam>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.#ctor">
            <summary>
            Initializes a new instance of the CacheCollection class.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Caching.CacheCollection`2.CacheTimeout">
            <summary>
            Gets or sets the amount of time to cache an item before refreshing.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.TryGet(`0,`1@)">
            <summary>
            Attempts to retrieve an item from the cache.
            </summary>
            <param name="keyValue">The key property value to search for.</param>
            <param name="result">The item if it is found, even if it's expired.</param>
            <returns>True if an item was found in the cache, false if the item was not found or has expired.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.TryRemove(`0,`1)">
            <summary>
            Attempts to remove an item from the cache.
            </summary>
            <param name="keyValue">The key property value to search for.</param>
            <param name="result">The item if it is found.</param>
            <returns>True if an item was found in the cache, false if the item was not found or has expired.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.Add(`0,`1)">
            <summary>
            Adds an item to the cache.
            </summary>
            <param name="keyValue">The value of the key property of the item.</param>
            <param name="item">The item to add to the cache.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.Remove(`0)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="keyValue">The key value of the item to remove.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.ToDictionary">
            <summary>
            Retrieves a dictionary of all items in the cache.
            </summary>
            <returns>A dictionary of all items in the cache.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.ToList">
            <summary>
            Retrieves a list of all items in the cache.
            </summary>
            <returns>A list of all items in the cache.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.HasExpiredItems">
            <summary>
            Checks if any items in the cache are expired.
            </summary>
            <returns>True if any of the items in the cache are expired.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.IsItemExpired(`0)">
            <summary>
            Checks if a specific item in the cache is expired.
            </summary>
            <param name="keyValue">The key value of the item to check.</param>
            <returns>True if the item is expired, false if the item has not expired or does not exist in the collection.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Arx.Core.Utilities.Caching.CacheCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Arx.Core.Utilities.Caching.CacheItem`1">
            <summary>
            Represents an item in a CacheCollection
            </summary>
            <typeparam name="T">
            The type of cached item.
            </typeparam>
        </member>
        <member name="P:Arx.Core.Utilities.Caching.CacheItem`1.Item">
            <summary>
            Gets or sets the item in the cache.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Caching.CacheItem`1.CachedTime">
            <summary>
            Gets or sets the time the item was added to the cache.
            </summary>
        </member>
        <member name="T:Arx.Core.Utilities.Data.DatabaseExceptionMapper">
            <summary>
            Maps database exceptions to more descriptive exception types.
            </summary>
            <seealso cref="T:Arx.Core.Exceptions.DatabaseConnectionException"/>
            <seealso cref="T:Arx.Core.Exceptions.DatabaseConstraintException"/>
            <seealso cref="T:Arx.Core.Exceptions.DatabaseDeadlockException"/>
            <seealso cref="T:Arx.Core.Exceptions.DatabaseException"/>
            <seealso cref="T:Arx.Core.Exceptions.DatabaseSecurityException"/>
            <seealso cref="T:Arx.Core.Exceptions.DatabaseSyntaxException"/>
            <seealso cref="T:Arx.Contracts.FaultContracts.DatabaseSystemException"/>
            <seealso cref="T:Arx.Core.Exceptions.DatabaseTimeoutException"/>
        </member>
        <member name="M:Arx.Core.Utilities.Data.DatabaseExceptionMapper.GetMappedException(System.Data.Common.DbException)">
            <summary>
            Maps an <see cref="T:System.Data.SqlClient.SqlException"/> to the appropriate DatabaseException.
            </summary>
            <param name="exception">The exception to map.</param>
            <returns>A mapped exception.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Data.DatabaseExceptionMapper.CreateDatabaseException(System.Type,System.Data.Common.DbException)">
            <summary>
            Creates an instance of the specified exception type from the provided exception.
            </summary>
            <param name="exceptionType">The type of exception to create.</param>
            <param name="exception">The exception to create the new exception from.</param>
            <returns>A new exception of the specified type.</returns>
        </member>
        <member name="T:Arx.Core.Utilities.Data.DataRecordUtils">
            <summary>
            Utility methods for <see cref="T:System.Data.IDataRecord"/>
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Data.DataRecordUtils.GetValueOrDefault``1(System.Data.IDataRecord,System.Int32,``0)">
            <summary>
            Get value at specified index and return a default value if it's DBNull.
            </summary>
            <param name="dataRecord">
            The data record.
            </param>
            <param name="columnIndex">
            The desired column index.
            </param>
            <param name="defaultValue">
            The default value in case of DBNull.
            </param>
            <typeparam name="T">
            The column value type.
            </typeparam>
            <returns>
            Value of the column cast to the correct type, or the default value if the column value is DBNull.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.Data.DataRecordUtils.GetValueOrDefault``1(System.Data.IDataRecord,System.String,``0)">
            <summary>
            Get value from the specified column and return a default value if it's DBNull.
            </summary>
            <param name="dataRecord">
            The data record.
            </param>
            <param name="columnName">
            The desired column name.
            </param>
            <param name="defaultValue">
            The default value in case of DBNull.
            </param>
            <typeparam name="T">
            The column value type.
            </typeparam>
            <returns>
            Value of the column cast to the correct type, or the default value if the column value is DBNull.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.Data.DataRecordUtils.GetValue``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Get value from the specified column index.
            </summary>
            <param name="dataRecord">
            The data record.
            </param>
            <param name="columnIndex">
            The desired column index.
            </param>
            <typeparam name="T">
            The column value type.
            </typeparam>
            <returns>
            Value of the column cast to the correct type.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.Data.DataRecordUtils.GetValue``1(System.Data.IDataRecord,System.String)">
            <summary>
            Get value from the specified column.
            </summary>
            <param name="dataRecord">
            The data record.
            </param>
            <param name="columnName">
            The desired column.
            </param>
            <typeparam name="T">
            The column value type.
            </typeparam>
            <returns>
            Value of the column cast to the correct type.
            </returns>
        </member>
        <member name="T:Arx.Core.Utilities.Data.SqlServerDatabaseExceptionMapper">
            <summary>
            Maps SQL Server database exceptions to more descriptive exception types.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Data.SqlServerDatabaseExceptionMapper.GetMappedException(System.Data.SqlClient.SqlException)">
            <summary>
            Maps an <see cref="T:System.Data.SqlClient.SqlException"/> to the appropriate DatabaseException.
            </summary>
            <param name="exception">The exception to map.</param>
            <returns>A mapped exception.</returns>
        </member>
        <member name="T:Arx.Core.Utilities.DecimalUtilities">
            <summary>
            Methods and extensions for decimal.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.ToEbcdicZonedDecimalString(System.Decimal)">
            <summary>
            Converts the decimal to a EBCDIC Zoned Decimal string with 2 implied decimal places.
            </summary>
            <param name="d">The decimal to convert.</param>
            <returns>A string representation of the decimal encoded as an EBCDIC Zoned Decimal</returns>
            <remarks>
            EBCDIC Zoned Decimal format, also known as IBM Numeric replaces the right-most digit with
            a character that represents the value and the sign of the number. The values for the last
            character are:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>{</term><term>0</term><term>}</term><term>-0</term></item>
            <item><term>A</term><term>1</term><term>J</term><term>-1</term></item>
            <item><term>B</term><term>2</term><term>K</term><term>-2</term></item>
            <item><term>C</term><term>3</term><term>L</term><term>-3</term></item>
            <item><term>D</term><term>4</term><term>M</term><term>-4</term></item>
            <item><term>E</term><term>5</term><term>N</term><term>-5</term></item>
            <item><term>F</term><term>6</term><term>O</term><term>-6</term></item>
            <item><term>G</term><term>7</term><term>P</term><term>-7</term></item>
            <item><term>H</term><term>8</term><term>Q</term><term>-8</term></item>
            <item><term>I</term><term>9</term><term>R</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in EBCDIC zoned decimal with 2 implied decimal places:
            <code language="cs">
            static void Main(string[] args)
            {
                decimal d1 = 180m;
                decimal d2 = -180m;
                decimal d3 = 187.65m;
                decimal d4 = -187.65m;
            
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d1, d1.ToEbcdicZonedDecimalString()));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d2, d2.ToEbcdicZonedDecimalString()));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d3, d3.ToEbcdicZonedDecimalString()));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d4, d4.ToEbcdicZonedDecimalString()));
            
                // Sample Output:
                // Decimal: 180     EBCDIC: 1800{
                // Decimal: -180    EBCDIC: 1800}
                // Decimal: 187.65  EBCDIC: 1876E
                // Decimal: -187.65 EBCDIC: 1876N
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.ToEbcdicZonedDecimalString(System.Decimal,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.ToEbcdicZonedDecimalString(System.Decimal,System.Int32)">
            <summary>
            Converts the decimal to a EBCDIC Zoned Decimal string with implied decimal places.
            </summary>
            <param name="d">The decimal to convert.</param>
            <param name="impliedDecimalPlaces">The number of implied decimal places to use.</param>
            <returns>A string representation of the decimal encoded as an EBCDIC Zoned Decimal</returns>
            <remarks>
            EBCDIC Zoned Decimal format, also known as IBM Numeric replaces the right-most digit with
            a character that represents the value and the sign of the number. The values for the last
            character are:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>{</term><term>0</term><term>}</term><term>-0</term></item>
            <item><term>A</term><term>1</term><term>J</term><term>-1</term></item>
            <item><term>B</term><term>2</term><term>K</term><term>-2</term></item>
            <item><term>C</term><term>3</term><term>L</term><term>-3</term></item>
            <item><term>D</term><term>4</term><term>M</term><term>-4</term></item>
            <item><term>E</term><term>5</term><term>N</term><term>-5</term></item>
            <item><term>F</term><term>6</term><term>O</term><term>-6</term></item>
            <item><term>G</term><term>7</term><term>P</term><term>-7</term></item>
            <item><term>H</term><term>8</term><term>Q</term><term>-8</term></item>
            <item><term>I</term><term>9</term><term>R</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in EBCDIC zoned decimal with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                decimal d1 = 180m;
                decimal d2 = -180m;
                decimal d3 = 187.65m;
                decimal d4 = -187.65m;
            
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d1, d1.ToEbcdicZonedDecimalString(2)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d2, d2.ToEbcdicZonedDecimalString(2)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d3, d3.ToEbcdicZonedDecimalString(2)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d4, d4.ToEbcdicZonedDecimalString(2)));
            
                // Sample Output:
                // Decimal: 180     EBCDIC: 1800{
                // Decimal: -180    EBCDIC: 1800}
                // Decimal: 187.65  EBCDIC: 1876E
                // Decimal: -187.65 EBCDIC: 1876N
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.ToEbcdicZonedDecimalString(System.Decimal)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.DecimalToEbcdicZonedDecimalString(System.Decimal)">
            <summary>
            Converts a decimal to a EBCDIC Zoned Decimal string with two implied decimal places.
            </summary>
            <param name="d">The decimal to convert.</param>
            <returns>A string representation of the decimal encoded as an EBCDIC Zoned Decimal</returns>
            <remarks>
            EBCDIC Zoned Decimal format, also known as IBM Numeric replaces the right-most digit with
            a character that represents the value and the sign of the number. The values for the last
            character are:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>{</term><term>0</term><term>}</term><term>-0</term></item>
            <item><term>A</term><term>1</term><term>J</term><term>-1</term></item>
            <item><term>B</term><term>2</term><term>K</term><term>-2</term></item>
            <item><term>C</term><term>3</term><term>L</term><term>-3</term></item>
            <item><term>D</term><term>4</term><term>M</term><term>-4</term></item>
            <item><term>E</term><term>5</term><term>N</term><term>-5</term></item>
            <item><term>F</term><term>6</term><term>O</term><term>-6</term></item>
            <item><term>G</term><term>7</term><term>P</term><term>-7</term></item>
            <item><term>H</term><term>8</term><term>Q</term><term>-8</term></item>
            <item><term>I</term><term>9</term><term>R</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in EBCDIC zoned decimal with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                decimal d1 = 180m;
                decimal d2 = -180m;
                decimal d3 = 187.65m;
                decimal d4 = -187.65m;
            
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d1, DecimalUtilities.DecimalToEbcdicZonedDecimalString(d1)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d2, DecimalUtilities.DecimalToEbcdicZonedDecimalString(d2)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d3, DecimalUtilities.DecimalToEbcdicZonedDecimalString(d3)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d4, DecimalUtilities.DecimalToEbcdicZonedDecimalString(d4)));
            
                // Sample Output:
                // Decimal: 180     EBCDIC: 1800{
                // Decimal: -180    EBCDIC: 1800}
                // Decimal: 187.65  EBCDIC: 1876E
                // Decimal: -187.65 EBCDIC: 1876N
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.DecimalToEbcdicZonedDecimalString(System.Decimal,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.DecimalToEbcdicZonedDecimalString(System.Decimal,System.Int32)">
            <summary>
            Converts a decimal to a EBCDIC Zoned Decimal string with implied decimal places.
            </summary>
            <param name="d">The decimal to convert.</param>
            <param name="impliedDecimalPlaces">The number of implied decimal places to use.</param>
            <returns>A string representation of the decimal encoded as an EBCDIC Zoned Decimal</returns>
            <remarks>
            EBCDIC Zoned Decimal format, also known as IBM Numeric replaces the right-most digit with
            a character that represents the value and the sign of the number. The values for the last
            character are:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>{</term><term>0</term><term>}</term><term>-0</term></item>
            <item><term>A</term><term>1</term><term>J</term><term>-1</term></item>
            <item><term>B</term><term>2</term><term>K</term><term>-2</term></item>
            <item><term>C</term><term>3</term><term>L</term><term>-3</term></item>
            <item><term>D</term><term>4</term><term>M</term><term>-4</term></item>
            <item><term>E</term><term>5</term><term>N</term><term>-5</term></item>
            <item><term>F</term><term>6</term><term>O</term><term>-6</term></item>
            <item><term>G</term><term>7</term><term>P</term><term>-7</term></item>
            <item><term>H</term><term>8</term><term>Q</term><term>-8</term></item>
            <item><term>I</term><term>9</term><term>R</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in EBCDIC zoned decimal with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                decimal d1 = 180m;
                decimal d2 = -180m;
                decimal d3 = 187.65m;
                decimal d4 = -187.65m;
            
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d1, DecimalUtilities.DecimalToEbcdicZonedDecimalString(d1, 2)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d2, DecimalUtilities.DecimalToEbcdicZonedDecimalString(d2, 2)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d3, DecimalUtilities.DecimalToEbcdicZonedDecimalString(d3, 2)));
                Console.WriteLine(string.Format("Decimal: {0}\tEBCDIC: {1}", d4, DecimalUtilities.DecimalToEbcdicZonedDecimalString(d4, 2)));
            
                // Sample Output:
                // Decimal: 180     EBCDIC: 1800{
                // Decimal: -180    EBCDIC: 1800}
                // Decimal: 187.65  EBCDIC: 1876E
                // Decimal: -187.65 EBCDIC: 1876N
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.DecimalToEbcdicZonedDecimalString(System.Decimal)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.EbcdicZonedDecimalStringToDecimal(System.String)">
            <summary>
            Converts a string that represents an EBCDIC Zoned Decimal to a decimal value with 2 implied decimal places.
            </summary>
            <param name="s">The string to convert.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="s"/> is not a valid zoned decimal string.
            </exception>
            <returns>he decimal value represented by the EBCDIC Zoned Decimal encoded string.</returns>
            <remarks>
            EBCDIC Zoned Decimal format, also known as IBM Numeric replaces the right-most digit with
            a character that represents the value and the sign of the number. The values for the last
            character are:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>{</term><term>0</term><term>}</term><term>-0</term></item>
            <item><term>A</term><term>1</term><term>J</term><term>-1</term></item>
            <item><term>B</term><term>2</term><term>K</term><term>-2</term></item>
            <item><term>C</term><term>3</term><term>L</term><term>-3</term></item>
            <item><term>D</term><term>4</term><term>M</term><term>-4</term></item>
            <item><term>E</term><term>5</term><term>N</term><term>-5</term></item>
            <item><term>F</term><term>6</term><term>O</term><term>-6</term></item>
            <item><term>G</term><term>7</term><term>P</term><term>-7</term></item>
            <item><term>H</term><term>8</term><term>Q</term><term>-8</term></item>
            <item><term>I</term><term>9</term><term>R</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in EBCDIC zoned decimal with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                string s1 = "1800{";
                string s2 = "1800}";
                string s3 = "1876E";
                string s4 = "1876N";
            
                decimal d1 = DecimalUtilities.EbcdicZonedDecimalStringToDecimal(s1);
                decimal d2 = DecimalUtilities.EbcdicZonedDecimalStringToDecimal(s2);
                decimal d3 = DecimalUtilities.EbcdicZonedDecimalStringToDecimal(s3);
                decimal d4 = DecimalUtilities.EbcdicZonedDecimalStringToDecimal(s4);
            
                Console.WriteLine(string.Format("EBCDIC: {0}\tDecimal: {1}", s1, d1));
                Console.WriteLine(string.Format("EBCDIC: {0}\tDecimal: {1}", s2, d2));
                Console.WriteLine(string.Format("EBCDIC: {0}\tDecimal: {1}", s3, d3));
                Console.WriteLine(string.Format("EBCDIC: {0}\tDecimal: {1}", s4, d4));
            
                // Sample Output:
                // EBCDIC: 1800{   Decimal: 180
                // EBCDIC: 1800}   Decimal: -180
                // EBCDIC: 1876E   Decimal: 187.65
                // EBCDIC: 1876N   Decimal: -187.65
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.EbcdicZonedDecimalStringToDecimal(System.String,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.EbcdicZonedDecimalStringToDecimal(System.String,System.Int32)">
            <summary>
            Converts a string that represents an EBCDIC Zoned Decimal to a decimal value.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="impliedDecimalPlaces">The number of implied decimal places to include.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="s"/> is not a valid zoned decimal string.
            </exception>
            <returns>The decimal value represented by the EBCDIC Zoned Decimal encoded string.</returns>
            <remarks>
            EBCDIC Zoned Decimal format, also known as IBM Numeric replaces the right-most digit with
            a character that represents the value and the sign of the number. The values for the last
            character are:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>{</term><term>0</term><term>}</term><term>-0</term></item>
            <item><term>A</term><term>1</term><term>J</term><term>-1</term></item>
            <item><term>B</term><term>2</term><term>K</term><term>-2</term></item>
            <item><term>C</term><term>3</term><term>L</term><term>-3</term></item>
            <item><term>D</term><term>4</term><term>M</term><term>-4</term></item>
            <item><term>E</term><term>5</term><term>N</term><term>-5</term></item>
            <item><term>F</term><term>6</term><term>O</term><term>-6</term></item>
            <item><term>G</term><term>7</term><term>P</term><term>-7</term></item>
            <item><term>H</term><term>8</term><term>Q</term><term>-8</term></item>
            <item><term>I</term><term>9</term><term>R</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in EBCDIC zoned decimal with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                string s1 = "1800{";
                string s2 = "1800}";
                string s3 = "1876E";
                string s4 = "1876N";
            
                decimal d1 = DecimalUtilities.EbcdicZonedDecimalStringToDecimal(s1, 2);
                decimal d2 = DecimalUtilities.EbcdicZonedDecimalStringToDecimal(s2, 2);
                decimal d3 = DecimalUtilities.EbcdicZonedDecimalStringToDecimal(s3, 2);
                decimal d4 = DecimalUtilities.EbcdicZonedDecimalStringToDecimal(s4, 2);
            
                Console.WriteLine(string.Format("EBCDIC: {0}\tDecimal: {1}", s1, d1));
                Console.WriteLine(string.Format("EBCDIC: {0}\tDecimal: {1}", s2, d2));
                Console.WriteLine(string.Format("EBCDIC: {0}\tDecimal: {1}", s3, d3));
                Console.WriteLine(string.Format("EBCDIC: {0}\tDecimal: {1}", s4, d4));
            
                // Sample Output:
                // EBCDIC: 1800{   Decimal: 180
                // EBCDIC: 1800}   Decimal: -180
                // EBCDIC: 1876E   Decimal: 187.65
                // EBCDIC: 1876N   Decimal: -187.65
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.EbcdicZonedDecimalStringToDecimal(System.String)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.ToMicroFocusZonedDecimalString(System.Decimal)">
            <summary>
            Converts a decimal value to a string in the MicroFocus zoned decimal format with 2 implied decimal places.
            </summary>
            <param name="d">The decimal to convert.</param>
            <returns>The decimal value as a string in the MicroFocus zoned decimal format.</returns>
            <remarks>
            The zoned decimal format used by MicroFocus, MicroSoft, and Fujitsu COBOL compilers use last
            character to imply the sign of the value. The characters 0 - 9 are used to represent positive values
            while the characters P - Y are used to represent negative values:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>0</term><term>0</term><term>P</term><term>-0</term></item>
            <item><term>1</term><term>1</term><term>Q</term><term>-1</term></item>
            <item><term>2</term><term>2</term><term>R</term><term>-2</term></item>
            <item><term>3</term><term>3</term><term>S</term><term>-3</term></item>
            <item><term>4</term><term>4</term><term>T</term><term>-4</term></item>
            <item><term>5</term><term>5</term><term>U</term><term>-5</term></item>
            <item><term>6</term><term>6</term><term>V</term><term>-6</term></item>
            <item><term>7</term><term>7</term><term>W</term><term>-7</term></item>
            <item><term>8</term><term>8</term><term>X</term><term>-8</term></item>
            <item><term>9</term><term>9</term><term>Y</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in MicroFocus zoned decimal format with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                decimal d1 = 180m;
                decimal d2 = -180m;
                decimal d3 = 187.65m;
                decimal d4 = -187.65m;
            
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d1, d1.ToMicroFocusZonedDecimalString()));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d2, d2.ToMicroFocusZonedDecimalString()));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d3, d3.ToMicroFocusZonedDecimalString()));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d4, d4.ToMicroFocusZonedDecimalString()));
            
                // Sample Output:
                // Decimal: 180          MicroFocus: 18000
                // Decimal: -180         MicroFocus: 1800P
                // Decimal: 187.65       MicroFocus: 18765
                // Decimal: -187.65      MicroFocus: 1876U
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.ToMicroFocusZonedDecimalString(System.Decimal,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.ToMicroFocusZonedDecimalString(System.Decimal,System.Int32)">
            <summary>
            Converts a decimal value to a string in the MicroFocus zoned decimal format.
            </summary>
            <param name="d">The decimal to convert.</param>
            <param name="impliedDecimalPlaces">The number of implied decimal places to include.</param>
            <returns>The decimal value as a string in the MicroFocus zoned decimal format.</returns>
            <remarks>
            The zoned decimal format used by MicroFocus, MicroSoft, and Fujitsu COBOL compilers use last
            character to imply the sign of the value. The characters 0 - 9 are used to represent positive values
            while the characters P - Y are used to represent negative values:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>0</term><term>0</term><term>P</term><term>-0</term></item>
            <item><term>1</term><term>1</term><term>Q</term><term>-1</term></item>
            <item><term>2</term><term>2</term><term>R</term><term>-2</term></item>
            <item><term>3</term><term>3</term><term>S</term><term>-3</term></item>
            <item><term>4</term><term>4</term><term>T</term><term>-4</term></item>
            <item><term>5</term><term>5</term><term>U</term><term>-5</term></item>
            <item><term>6</term><term>6</term><term>V</term><term>-6</term></item>
            <item><term>7</term><term>7</term><term>W</term><term>-7</term></item>
            <item><term>8</term><term>8</term><term>X</term><term>-8</term></item>
            <item><term>9</term><term>9</term><term>Y</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in MicroFocus zoned decimal format with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                decimal d1 = 180m;
                decimal d2 = -180m;
                decimal d3 = 187.65m;
                decimal d4 = -187.65m;
            
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d1, d1.ToMicroFocusZonedDecimalString(2)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d2, d2.ToMicroFocusZonedDecimalString(2)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d3, d3.ToMicroFocusZonedDecimalString(2)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d4, d4.ToMicroFocusZonedDecimalString(2)));
            
                // Sample Output:
                // Decimal: 180          MicroFocus: 18000
                // Decimal: -180         MicroFocus: 1800P
                // Decimal: 187.65       MicroFocus: 18765
                // Decimal: -187.65      MicroFocus: 1876U
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.ToMicroFocusZonedDecimalString(System.Decimal)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.DecimalToMicroFocusZonedDecimalString(System.Decimal)">
            <summary>
            Converts a decimal value to a string in the MicroFocus zoned decimal format with 2 implied decimal places.
            </summary>
            <param name="d">The decimal to convert.</param>
            <returns>The decimal value as a string in the MicroFocus zoned decimal format.</returns>
            <remarks>
            The zoned decimal format used by MicroFocus, MicroSoft, and Fujitsu COBOL compilers use last
            character to imply the sign of the value. The characters 0 - 9 are used to represent positive values
            while the characters P - Y are used to represent negative values:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>0</term><term>0</term><term>P</term><term>-0</term></item>
            <item><term>1</term><term>1</term><term>Q</term><term>-1</term></item>
            <item><term>2</term><term>2</term><term>R</term><term>-2</term></item>
            <item><term>3</term><term>3</term><term>S</term><term>-3</term></item>
            <item><term>4</term><term>4</term><term>T</term><term>-4</term></item>
            <item><term>5</term><term>5</term><term>U</term><term>-5</term></item>
            <item><term>6</term><term>6</term><term>V</term><term>-6</term></item>
            <item><term>7</term><term>7</term><term>W</term><term>-7</term></item>
            <item><term>8</term><term>8</term><term>X</term><term>-8</term></item>
            <item><term>9</term><term>9</term><term>Y</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in MicroFocus zoned decimal format with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                decimal d1 = 180m;
                decimal d2 = -180m;
                decimal d3 = 187.65m;
                decimal d4 = -187.65m;
            
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d1, DecimalUtilities.DecimalToMicroFocusZonedDecimalString(d1)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d2, DecimalUtilities.DecimalToMicroFocusZonedDecimalString(d2)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d3, DecimalUtilities.DecimalToMicroFocusZonedDecimalString(d3)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d4, DecimalUtilities.DecimalToMicroFocusZonedDecimalString(d4)));
            
                // Sample Output:
                // Decimal: 180          MicroFocus: 18000
                // Decimal: -180         MicroFocus: 1800P
                // Decimal: 187.65       MicroFocus: 18765
                // Decimal: -187.65      MicroFocus: 1876U
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.DecimalToMicroFocusZonedDecimalString(System.Decimal,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.DecimalToMicroFocusZonedDecimalString(System.Decimal,System.Int32)">
            <summary>
            Converts a decimal value to a string in the MicroFocus zoned decimal format.
            </summary>
            <param name="d">The decimal to convert.</param>
            <param name="impliedDecimalPlaces">The number of implied decimal places to include.</param>
            <returns>The decimal value as a string in the MicroFocus zoned decimal format.</returns>
            <remarks>
            The zoned decimal format used by MicroFocus, MicroSoft, and Fujitsu COBOL compilers use last
            character to imply the sign of the value. The characters 0 - 9 are used to represent positive values
            while the characters P - Y are used to represent negative values:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>0</term><term>0</term><term>P</term><term>-0</term></item>
            <item><term>1</term><term>1</term><term>Q</term><term>-1</term></item>
            <item><term>2</term><term>2</term><term>R</term><term>-2</term></item>
            <item><term>3</term><term>3</term><term>S</term><term>-3</term></item>
            <item><term>4</term><term>4</term><term>T</term><term>-4</term></item>
            <item><term>5</term><term>5</term><term>U</term><term>-5</term></item>
            <item><term>6</term><term>6</term><term>V</term><term>-6</term></item>
            <item><term>7</term><term>7</term><term>W</term><term>-7</term></item>
            <item><term>8</term><term>8</term><term>X</term><term>-8</term></item>
            <item><term>9</term><term>9</term><term>Y</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in MicroFocus zoned decimal format with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                decimal d1 = 180m;
                decimal d2 = -180m;
                decimal d3 = 187.65m;
                decimal d4 = -187.65m;
            
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d1, DecimalUtilities.DecimalToMicroFocusZonedDecimalString(d1, 2)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d2, DecimalUtilities.DecimalToMicroFocusZonedDecimalString(d2, 2)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d3, DecimalUtilities.DecimalToMicroFocusZonedDecimalString(d3, 2)));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d4, DecimalUtilities.DecimalToMicroFocusZonedDecimalString(d4, 2)));
            
                // Sample Output:
                // Decimal: 180          MicroFocus: 18000
                // Decimal: -180         MicroFocus: 1800P
                // Decimal: 187.65       MicroFocus: 18765
                // Decimal: -187.65      MicroFocus: 1876U
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.DecimalToMicroFocusZonedDecimalString(System.Decimal)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(System.String)">
            <summary>
            Converts a string in MicroFocus zoned decimal format with 2 implied decimal places to a decimal value.
            </summary>
            <param name="s">The string to convert.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="s"/> is not a valid zoned decimal string.
            </exception>
            <returns>The decimal value represented by the string.</returns>
            <remarks>
            The zoned decimal format used by MicroFocus, MicroSoft, and Fujitsu COBOL compilers use last
            character to imply the sign of the value. The characters 0 - 9 are used to represent positive values
            while the characters P - Y are used to represent negative values:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>0</term><term>0</term><term>P</term><term>-0</term></item>
            <item><term>1</term><term>1</term><term>Q</term><term>-1</term></item>
            <item><term>2</term><term>2</term><term>R</term><term>-2</term></item>
            <item><term>3</term><term>3</term><term>S</term><term>-3</term></item>
            <item><term>4</term><term>4</term><term>T</term><term>-4</term></item>
            <item><term>5</term><term>5</term><term>U</term><term>-5</term></item>
            <item><term>6</term><term>6</term><term>V</term><term>-6</term></item>
            <item><term>7</term><term>7</term><term>W</term><term>-7</term></item>
            <item><term>8</term><term>8</term><term>X</term><term>-8</term></item>
            <item><term>9</term><term>9</term><term>Y</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in MicroFocus zoned decimal format with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                string s1 = "18000";
                string s2 = "1800P";
                string s3 = "18765";
                string s4 = "1876U";
            
                decimal d1 = DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(s1);
                decimal d2 = DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(s2);
                decimal d3 = DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(s3);
                decimal d4 = DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(s4);
            
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d1, s1));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d2, s2));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d3, s3));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d4, s4));
            
                // Sample Output:
                // Decimal: 180          MicroFocus: 18000
                // Decimal: -180         MicroFocus: 1800P
                // Decimal: 187.65       MicroFocus: 18765
                // Decimal: -187.65      MicroFocus: 1876U
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(System.String,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(System.String,System.Int32)">
            <summary>
            Converts a string in MicroFocus zoned decimal format to a decimal value.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="impliedDecimalPlaces">The number of implied decimal places contained in the string.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="s"/> is not a valid zoned decimal string.
            </exception>
            <returns>The decimal value represented by the string.</returns>
            <remarks>
            The zoned decimal format used by MicroFocus, MicroSoft, and Fujitsu COBOL compilers use last
            character to imply the sign of the value. The characters 0 - 9 are used to represent positive values
            while the characters P - Y are used to represent negative values:
            <list type="table">
            <listheader>
                <term>ASCII Character</term>
                <term>Value</term>
                <term>ASCII Character</term>
                <term>Value</term>
            </listheader>
            <item><term>0</term><term>0</term><term>P</term><term>-0</term></item>
            <item><term>1</term><term>1</term><term>Q</term><term>-1</term></item>
            <item><term>2</term><term>2</term><term>R</term><term>-2</term></item>
            <item><term>3</term><term>3</term><term>S</term><term>-3</term></item>
            <item><term>4</term><term>4</term><term>T</term><term>-4</term></item>
            <item><term>5</term><term>5</term><term>U</term><term>-5</term></item>
            <item><term>6</term><term>6</term><term>V</term><term>-6</term></item>
            <item><term>7</term><term>7</term><term>W</term><term>-7</term></item>
            <item><term>8</term><term>8</term><term>X</term><term>-8</term></item>
            <item><term>9</term><term>9</term><term>Y</term><term>-9</term></item>
            </list>
            </remarks>
            <example>
            The following examples show the output of a decimal number in MicroFocus zoned decimal format with 2 implied decimal places:
            <code>
            static void Main(string[] args)
            {
                string s1 = "18000";
                string s2 = "1800P";
                string s3 = "18765";
                string s4 = "1876U";
            
                decimal d1 = DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(s1, 2);
                decimal d2 = DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(s2, 2);
                decimal d3 = DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(s3, 2);
                decimal d4 = DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(s4, 2);
            
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d1, s1));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d2, s2));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d3, s3));
                Console.WriteLine(string.Format("Decimal: {0}\tMicroFocus: {1}", d4, s4));
            
                // Sample Output:
                // Decimal: 180          MicroFocus: 18000
                // Decimal: -180         MicroFocus: 1800P
                // Decimal: 187.65       MicroFocus: 18765
                // Decimal: -187.65      MicroFocus: 1876U
            }
            </code>
            </example>
            <seealso cref="M:Arx.Core.Utilities.DecimalUtilities.MicroFocusZonedDecimalStringToDecimal(System.String)"/>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.DecimalToZonedDecimalString(System.Decimal,System.Int32,System.String,System.String)">
            <summary>
            Converts a decimal to a string representation of a zoned decimal.
            </summary>
            <param name="d">The decimal to convert.</param>
            <param name="impliedDecimalPlaces">The number of implied decimal places to include.</param>
            <param name="positiveEndChars">The ending characters representing the positive values 0 - 9</param>
            <param name="negativeEndChars">The ending characters representing the negative values 0 - 9</param>
            <returns>A zoned decimal string representation of the decimal with the last character representing the sign and value.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.DecimalUtilities.ZonedDecimalStringToDecimal(System.String,System.Int32,System.String,System.String)">
            <summary>
            Converts a zoned decimal formatted string to a decimal value.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="impliedDecimalPlaces">The number of implied decimal places in the string.</param>
            <param name="positiveEndChars">The ending characters representing the positive values 0 - 9</param>
            <param name="negativeEndChars">The ending characters representing the negative values 0 - 9</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="s"/> is not a valid zoned decimal string.
            </exception>
            <returns>The decimal value of the zoned decimal string.</returns>
        </member>
        <member name="T:Arx.Core.Utilities.FileUtilities">
            <summary>
            Contains utility and extension methods for working with files.
            </summary>
        </member>
        <member name="F:Arx.Core.Utilities.FileUtilities.DefaultArchiveFolderName">
            <summary>
            The default folder name to use for archive folders.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String)">
            <summary>
            Outputs text to file.
            </summary>
            <param name="fileName">The file name and path to output to.</param>
            <param name="text">The text to output.</param>
            <seealso cref="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String,System.Boolean)"/>
            <seealso cref="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String,System.Boolean,System.Text.Encoding)"/>
        </member>
        <member name="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String,System.Boolean)">
            <summary>
            Outputs text to file.
            </summary>
            <param name="fileName">The file name and path to output to.</param>
            <param name="text">The text to output.</param>
            <param name="append">Append to the file if it exists.</param>
            <seealso cref="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String,System.Boolean,System.Text.Encoding)"/>
        </member>
        <member name="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Outputs text to file.
            </summary>
            <param name="fileName">The file name and path to output to.</param>
            <param name="text">The text to output.</param>
            <param name="append">Append to the file if it exists.</param>
            <param name="encoding">The encoding to use.</param>
            <seealso cref="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.FileUtilities.StringToFile(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:Arx.Core.Utilities.FileUtilities.IsFileInSafeUncPath(System.String)">
            <summary>
            Tests whether or not the path is on a safe (non-administrative) UNC path.
            </summary>
            <param name="fileName">The file name and path to test.</param>
            <returns>True if the file is on a safe UNC path, otherwise false.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.FileUtilities.ArchiveFile(System.String)">
            <summary>
            Moves a file to a dated folder within an archive folder that is a child folder of the directory the file is currently in.
            If a file of the same name already exists in the dated folder the file will be renamed
            so that no files in the archive folder will be overwritten.
            </summary>
            <param name="fileName">The path and file name to archive.</param>
            <seealso cref="M:Arx.Core.Utilities.FileUtilities.ArchiveFile(System.String,System.String)"/>
        </member>
        <member name="M:Arx.Core.Utilities.FileUtilities.ArchiveFile(System.String,System.String)">
            <summary>
            Moves a file to a dated folder within an archive folder that is a child folder of the directory the file is currently in.
            If a file of the same name already exists in the dated folder the file will be renamed
            so that no files in the archive folder will be overwritten.
            </summary>
            <param name="fileName">The path and file name to archive.</param>
            <param name="archiveFolderName">The name of the child folder to archive the file to.</param>
            <seealso cref="M:Arx.Core.Utilities.FileUtilities.ArchiveFile(System.String)"/>
        </member>
        <member name="M:Arx.Core.Utilities.FileUtilities.GetUniqueFileNameForFileInFolder(System.String)">
            <summary>
            Finds a unique name for a file in a folder by appending a number to the file name until it does not match
            any files that are already in the folder.
            </summary>
            <param name="fileName">The file name and path to find a new unique name for.</param>
            <returns>A unique name for the file within the folder.</returns>
        </member>
        <member name="T:Arx.Core.Utilities.EnumerableUtilities">
            <summary>
            Contains helper methods for IEnumerable
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.EnumerableUtilities.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Apply action to every element of the collection.
            </summary>
            <param name="source">
            The source collection.
            </param>
            <param name="action">
            The action delegate.
            </param>
            <typeparam name="T">
            Collection item type.
            </typeparam>
        </member>
        <member name="M:Arx.Core.Utilities.EnumerableUtilities.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty collection if this source collection is null.
            </summary>
            <param name="source">
            The source collection.
            </param>
            <typeparam name="T">
            Collection item type.
            </typeparam>
            <returns>
            The original collection or an empty collection if the original is null.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.EnumerableUtilities.FullOuterGroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates two sequences based on their matching keys. This join returns a result for every
            item of both sequences and gives the default if there is no match.
            </summary>
            <param name="outer">
            The outer collection.
            </param>
            <param name="inner">
            The inner collection.
            </param>
            <param name="outerKeySelector">
            The outer key selector.
            </param>
            <param name="innerKeySelector">
            The inner key selector.
            </param>
            <param name="resultSelector">
            The result selector. Parameters are outer items, inner items, and their shared key.<para/>
            One of the collections will be empty if there is no match.
            </param>
            <param name="keyComparer">
            The key equality comparer.
            </param>
            <typeparam name="TOuter">
            Type of the outer collection.
            </typeparam>
            <typeparam name="TInner">
            Type of the inner collection.
            </typeparam>
            <typeparam name="TKey">
            Type of the shared key.
            </typeparam>
            <typeparam name="TResult">
            The result of joining.
            </typeparam>
            <returns>
            The results.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.EnumerableUtilities.FullOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``2,``3},``0,``1,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates two sequences based on their matching keys. This join returns a result for every
            item of both sequences and gives the default if there is no match.
            </summary>
            <param name="outer">
            The outer collection.
            </param>
            <param name="inner">
            The inner collection.
            </param>
            <param name="outerKeySelector">
            The outer key selector.
            </param>
            <param name="innerKeySelector">
            The inner key selector.
            </param>
            <param name="resultSelector">
            The result selector. Parameters are outer item, inner item, and their shared key.
            <para>
            </para>
            One of the items will be replaced with the default if there is no match.
            </param>
            <param name="defaultOuter">
            The default Outer object if there is no match with inner.
            </param>
            <param name="defaultInner">
            The default Inner object if there is no match with outer.
            </param>
            <param name="keyComparer">
            The key equality comparer.
            </param>
            <typeparam name="TOuter">
            Type of the outer collection.
            </typeparam>
            <typeparam name="TInner">
            Type of the inner collection.
            </typeparam>
            <typeparam name="TKey">
            Type of the shared key.
            </typeparam>
            <typeparam name="TResult">
            The result of joining.
            </typeparam>
            <returns>
            The results.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.EnumerableUtilities.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},``1,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates two sequences based on their matching keys. This join returns a result for every
            item in the outer sequence and a matching item in the inner if there is one.
            </summary>
            <param name="outer">
            The outer collection.
            </param>
            <param name="inner">
            The inner collection.
            </param>
            <param name="outerKeySelector">
            The outer key selector.
            </param>
            <param name="innerKeySelector">
            The inner key selector.
            </param>
            <param name="resultSelector">
            The result selector. Parameters are outer item, inner item, returning whatever you want.
            <para>
            </para>
            One of the items will be replaced with the default if there is no match.
            </param>
            <param name="defaultInner">
            The default Inner object if there is no match with outer.
            </param>
            <param name="keyComparer">
            The key equality comparer.
            </param>
            <typeparam name="TOuter">
            Type of the outer collection.
            </typeparam>
            <typeparam name="TInner">
            Type of the inner collection.
            </typeparam>
            <typeparam name="TKey">
            Type of the shared key.
            </typeparam>
            <typeparam name="TResult">
            The result of joining.
            </typeparam>
            <returns>
            The results.
            </returns>
        </member>
        <member name="T:Arx.Core.Utilities.IntegerUtilities">
            <summary>
            Extension methods for integer types.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.IntegerUtilities.DigitSum(System.Int32)">
            <summary>
            Calculates the digit sum (or sum of all digits) for a given integer.
            </summary>
            <param name="value">
            The value to calculate the digit sum for.
            </param>
            <returns>
            The digit sum of the value.
            </returns>
        </member>
        <member name="T:Arx.Core.Utilities.ListUtilities">
            <summary>
            Contains utility and extension methods for List
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0})">
            <summary>
            Randomly orders the elements in the list.
            </summary>
            <typeparam name="T">The generic type parameter for this list.</typeparam>
            <param name="list">The list to shuffle.</param>
            <seealso cref="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0},System.Int32)"/>
            <seealso cref="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Randomly orders the elements in the for the number of passes specified.
            </summary>
            <typeparam name="T">The generic type parameter for this list</typeparam>
            <param name="list">The list to shuffle.</param>
            <param name="numberOfSuffles">The number of passes to shuffle.</param>
            <seealso cref="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0})"/>
            <seealso cref="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Randomly orders the elements in the list a random number of times.
            </summary>
            <typeparam name="T">The generic type parameter for this list</typeparam>
            <param name="list">The list to shuffle.</param>
            <param name="minimumNumberOfShuffles">The minimum number of passes to shuffle.</param>
            <param name="maximumNumberOfShuffles">The maximum number of passes to shuffle.</param>
            <seealso cref="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0})"/>
            <seealso cref="M:Arx.Core.Utilities.ListUtilities.Shuffle``1(System.Collections.Generic.List{``0},System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.ListUtilities.ChangeListType``2(System.Collections.Generic.List{``0})">
            <summary>
            Converts a list from one type to another.
            </summary>
            <typeparam name="TSource">The source type of the list.</typeparam>
            <typeparam name="TTarget">The target type of the list.</typeparam>
            <param name="list">The list to convert.</param>
            <returns>A new list of <typeparamref name="TTarget"/> containing all elements of the source list.</returns>
            <remarks>
            <typeparamref name="TSource"/> must be able to convert to <typeparamref name="TTarget"/>
            </remarks>
        </member>
        <member name="M:Arx.Core.Utilities.ListUtilities.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Breaks a collection into a collection of collections that each have up to a certain number of elements.
            </summary>
            <remarks>
            If chunkSize is greater than the number of elements in the collection the returning collection will contain
            a single collection will all elements of the source collection.  The last collection in the returning collection
            will contain the remainder of the elements and will only have chunkSize number of elements if the number
            of elements in the source collection is evenly divisible by chunkSize. 
            </remarks>
            <typeparam name="T">The type of elements of the source collection.</typeparam>
            <param name="source">The collection to break into chunks.</param>
            <param name="chunkSize">The maximum size of each chunk.</param>
            <returns>A collection of collections each with a maximum of chunkSize elements.</returns>
        </member>
        <member name="T:Arx.Core.Utilities.PropertyComparer`1">
            <summary>
            Equality comparer that will compare objects by comparing a single property.
            </summary>
            <typeparam name="T">
            Object type to be compared.
            </typeparam>
        </member>
        <member name="M:Arx.Core.Utilities.PropertyComparer`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Utilities.PropertyComparer`1"/> class.
            </summary>
            <param name="propertyName">
            Name of the property that will be used for comparison.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.PropertyComparer`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Utilities.PropertyComparer`1"/> class.
            </summary>
            <param name="propertyExpression">
            Member expression that will be used to select the property instead of using a string.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.PropertyComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <paramref name="{T}{T}"/> to compare.</param>
            <param name="y">The second object of type <paramref name="{T}{T}"/> to compare.</param>
        </member>
        <member name="M:Arx.Core.Utilities.PropertyComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:Arx.Core.Utilities.PropertyComparer`1.GetMemberName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the member name from a member expression.
            </summary>
            <param name="expression">Member expression</param>
            <returns>Name of the member in expression</returns>
        </member>
        <member name="T:Arx.Core.Utilities.ReflectionUtilities">
            <summary>
            Utilities and extensions for reflection.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.ReflectionUtilities.GetValueWithoutIndex(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets that value of a property from an instance.
            </summary>
            <param name="property">This property info.</param>
            <param name="instance">The instance to retrieve the property value for.</param>
            <returns>The value of this property from the instance.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.ReflectionUtilities.SetValueWithoutIndex(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Sets a value of a property on an instance.
            </summary>
            <param name="property">This property info.</param>
            <param name="instance">The instance on which to set the property value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Arx.Core.Utilities.ReflectionUtilities.IsNumericType(System.Type)">
            <summary>
            Checks if a type is numeric.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is numeric, otherwise false.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.ReflectionUtilities.IsDateTimeType(System.Type)">
            <summary>
            Checks if a type is a date time type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is DateTime or DateTime?</returns>
        </member>
        <member name="M:Arx.Core.Utilities.ReflectionUtilities.IsBooleanType(System.Type)">
            <summary>
            Checks if a type is a Boolean type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is Boolean or Boolean?</returns>
        </member>
        <member name="M:Arx.Core.Utilities.ReflectionUtilities.GetPropertyValueFromPath(System.Type,System.Object,System.String)">
            <summary>
            Retrieves a value from an object or a child property of an object.
            </summary>
            <param name="type">The type of object to perform this operation on.</param>
            <param name="instance">The object instance.</param>
            <param name="propertyPath">The path to the value to retrieve.</param>
            <returns>The value specified in the <see cref="!:propertyPath"/></returns>
        </member>
        <member name="M:Arx.Core.Utilities.ReflectionUtilities.IsNumeric(System.String)">
            <summary>
            Checks if the text contains only numeric value.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:Arx.Core.Utilities.StringBuilderUtilities">
            <summary>
            Contains utility and extension methods for StringBuilder.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.StringBuilderUtilities.AppendFormattedLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends a formatted line of text to the string builder.
            </summary>
            <param name="sb">The string builder</param>
            <param name="format">The format pattern.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="T:Arx.Core.Utilities.StringUtilities">
            <summary>
            Contains methods and extensions for manipulating strings.
            </summary>
        </member>
        <member name="T:Arx.Core.Utilities.StringUtilities.StringPaddingOption">
            <summary>
            Represents the options for padding a string when converting to fixed width
            </summary>
        </member>
        <member name="F:Arx.Core.Utilities.StringUtilities.StringPaddingOption.PadLeft">
            <summary>
            String will be padded on the left (right aligned)
            </summary>
        </member>
        <member name="F:Arx.Core.Utilities.StringUtilities.StringPaddingOption.PadRight">
            <summary>
            String will be padded on the right (left aligned)
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String)">
            <summary>
            Removes all instances of <paramref name="pattern"/> from the string.  Search is case-sensitive.
            </summary>
            <param name="str">The string to perform the replace on.</param>
            <param name="pattern">The Regex pattern to search for.</param>
            <returns><paramref name="str"/> with all instances of pattern removed.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String,System.Boolean)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String)">
            <summary>
            Replaces parts of the string that match <paramref name="pattern"/> with the replacement text. Search is case-sensitive.
            </summary>
            <param name="str">The string to perform the replace on.</param>
            <param name="pattern">The Regex pattern to search for.</param>
            <param name="replacement">The replacement text.</param>
            <returns><paramref name="str"/> with replacements performed.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String,System.Boolean)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces parts of the string that match <paramref name="pattern"/> with the replacement text.
            </summary>
            <param name="str">The string to perform the replace on.</param>
            <param name="pattern">The Regex pattern to search for.</param>
            <param name="replacement">The replacement text.</param>
            <param name="ignoreCase">Perform a case-insensitive replace.</param>
            <returns><paramref name="str"/> with replacements performed.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Replaces parts of the string that match <paramref name="pattern"/> with the replacement text.
            </summary>
            <param name="str">The string to perform the replace on.</param>
            <param name="pattern">The Regex pattern to search for.</param>
            <param name="replacement">The replacement text.</param>
            <param name="ignoreCase">Perform a case-insensitive replace.</param>
            <param name="multiline"><paramref name="str"/> is multiline.</param>
            <returns><paramref name="str"/> with replacements performed.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Strip(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.StripInvalidFileNameCharacters(System.String)">
            <summary>
            Removes any characters from a string that cannot be used in a file name.
            </summary>
            <param name="str">The string to trim.</param>
            <returns>The string will all invalid file name characters removed.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.StripNonDigitCharacters(System.String)">
            <summary>
            Removes all non-digit characters from a string.
            </summary>
            <param name="str">The string to trim.</param>
            <returns>The string with all non-digit characters removed.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.StripNonDigitCharacters(System.String,System.String)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.StripNonDigitCharacters(System.String,System.String)">
            <summary>
            Replaces all non-digit characters in a string with the specified text.
            </summary>
            <param name="str">The string to remove non-digit characters from.</param>
            <param name="replacement">The string to replace non-digit characters with.</param>
            <returns>The string with all non-digit characters replaced with specified text.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.StripNonDigitCharacters(System.String)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32)">
            <summary>
            Returns the string padded to the right to meet the target width (left aligned) with spaces. 
            </summary>
            <param name="str">The string to pad.</param>
            <param name="targetWidth">The width to make the final string.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="str"/> is longer than <paramref name="targetWidth"/>
            </exception>
            <returns><paramref name="str"/> padded with spaces to the targetWidth.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,System.Char)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,Arx.Core.Utilities.StringUtilities.StringPaddingOption)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,System.Char,Arx.Core.Utilities.StringUtilities.StringPaddingOption)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,System.Char)">
            <summary>
            Returns the string padded to the right to meet the target width (left aligned) with the specified character.
            </summary>
            <param name="str">The string to pad.</param>
            <param name="targetWidth">The width to make the final string.</param>
            <param name="paddingCharacter">The character to pad with.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="str"/> is longer than <paramref name="targetWidth"/>
            </exception>
            <returns><paramref name="str"/> padded with the paddingCharacter to the targetWidth</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,Arx.Core.Utilities.StringUtilities.StringPaddingOption)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,System.Char,Arx.Core.Utilities.StringUtilities.StringPaddingOption)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,Arx.Core.Utilities.StringUtilities.StringPaddingOption)">
            <summary>
            Returns the string padded on the specified side with spaces.
            </summary>
            <param name="str">The string to pad.</param>
            <param name="targetWidth">The width to make the final string.</param>
            <param name="paddingOption">The side of the string to pad on.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="str"/> is longer than <paramref name="targetWidth"/>
            </exception>
            <returns><paramref name="str"/> padded with spaces on the specified side to the target width.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,System.Char)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,System.Char,Arx.Core.Utilities.StringUtilities.StringPaddingOption)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,System.Char,Arx.Core.Utilities.StringUtilities.StringPaddingOption)">
            <summary>
            Returns the string padded in the direction specified with the specified character.
            </summary>
            <param name="str">The string to pad.</param>
            <param name="targetWidth">The width to make the final string.</param>
            <param name="paddingCharacter">The character to pad with.</param>
            <param name="paddingOption">The direction in which to pad.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="str"/> is longer than <paramref name="targetWidth"/>
            </exception>
            <returns><paramref name="str"/> padded with the paddingCharacter to the <paramref name="targetWidth"/>.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,System.Char)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFixedWidth(System.String,System.Int32,Arx.Core.Utilities.StringUtilities.StringPaddingOption)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Right(System.String,System.Int32)">
            <summary>
            Returns the last few characters of the string with a length
            specified by the given parameter. If the string's length is less than the 
            given length the complete string is returned. If length is zero or 
            less an empty string is returned
            </summary>
            <param name="str">The string to process.</param>
            <param name="length">The length of the string to return.</param>
            <returns>The rightmost characters of the string</returns>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Left(System.String,System.Int32)">
            <summary>
            Trims the string to the leftmost length characters.
            </summary>
            <param name="str">The string to trim.</param>
            <param name="length">The length of the string to return.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String)">
            <summary>
            Outputs the string to a file.
            </summary>
            <param name="str">The string to output.</param>
            <param name="fileName">The file name and path to output to.</param>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String,System.Boolean)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String,System.Boolean,System.Text.Encoding)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String,System.Boolean)">
            <summary>
            Outputs the string to a file.
            </summary>
            <param name="str">The string to output.</param>
            <param name="fileName">The file name and path to output to.</param>
            <param name="append">Append to the file if it exists.</param>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String,System.Boolean,System.Text.Encoding)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Outputs the string to a file.
            </summary>
            <param name="str">The string to output.</param>
            <param name="fileName">The file name and path to output to.</param>
            <param name="append">Append to the file if it exists.</param>
            <param name="encoding">The encoding to use.</param>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String)"/>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.ToFile(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.SplitTextQualifiedString(System.String,System.Char,System.Char)">
            <summary>
            Splits a delimited string and removed the text qualifier character.
            </summary>
            <param name="input">The string to split.</param>
            <param name="delimiter">The field delimiter (e.g. ,)</param>
            <param name="textQualifier">The text qualifier (e.g. ")</param>
            <returns>An array of fields from the string with the text qualifier removed.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.SplitTextQualifiedString(System.String,System.Char,System.Char,System.Char)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.SplitTextQualifiedString(System.String,System.Char,System.Char,System.Char)">
            <summary>
            Splits a delimited string that contains a text qualifier.
            </summary>
            <param name="input">The string to split.</param>
            <param name="delimiter">The field delimiter</param>
            <param name="textQualifier">The text qualifier (e.g. ")</param>
            <param name="textQualifierEscapeCharacter">The escape character if the text qualifier is escaped. (e.g. \ when \" is in the file).</param>
            <returns>An array of fields from the input with the text qualifier removed.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.SplitTextQualifiedString(System.String,System.Char,System.Char)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.WrapText(System.String,System.Int32,System.Boolean)">
            <summary>
            Wraps text to the nearest word boundary to the specified line width.
            </summary>
            <param name="text">The text to wrap.</param>
            <param name="lineWidth">The maximum width of a line of text.</param>
            <param name="stripTabs">Replace any tab characters with spaces.</param>
            <returns>A collection of wrapped lines from text.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.WrapText(System.String,System.Int32)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.WrapText(System.String,System.Int32)">
            <summary>
            Wraps text to the nearest word boundary to the specified line width.  Tab characters are replaced with spaces.
            </summary>
            <param name="text">The text to wrap.</param>
            <param name="lineWidth">The maximum width of a line of text.</param>
            <returns>A collection of wrapped lines from text.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.WrapText(System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ConvertCollectionToDelimitedString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Convert collection of string to CSV string
            </summary>
            <param name="collection">collection of string</param>
            <param name="delimiter">string delimiter</param>
            <returns>CSV string</returns>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Base64Encode(System.String)">
            <summary>
            Encodes the string using base 64.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>A base 64 encoded string.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Base64Encode(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Base64Encode(System.String,System.Text.Encoding)">
            <summary>
            Encodes the string using base 64.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="encoding">The System.Text.Encoding to use.</param>
            <returns>A base 64 encoded string.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Base64Encode(System.String)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Base64Decode(System.String)">
            <summary>
            Decodes a base 64 encoded string.
            </summary>
            <param name="s">The base 64 string to decode.</param>
            <returns>The decoded string.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Base64Decode(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.Base64Decode(System.String,System.Text.Encoding)">
            <summary>
            Decodes a base 64 encoded string.
            </summary>
            <param name="s">The base 64 string to decode.</param>
            <param name="encoding">The System.Text.Encoding to use.</param>
            <returns>The decoded string.</returns>
            <seealso cref="M:Arx.Core.Utilities.StringUtilities.Base64Decode(System.String)"/>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.StripDiacriticalMarks(System.String)">
            <summary>
            Removes diacritical marks from a string.
            </summary>
            <param name="s">The string to remove diacritical marks from.</param>
            <returns>The string with all diacritical marks removed.</returns>
            <remarks>
            Diacritical marks are accented characters such as: ã, ë, ò, etc. This method will replace
            diacritical characters with their non-diacritical equivalent.
            </remarks>
            <example>
            <code language="cs">
            static void Main(string[] args)
            {
                string s1 = "J'ai été ravi de faire ta connaissance, A bientôt!";
            
                Console.WriteLine("Before: {0}", s1);
                Console.WriteLine("After: {0}", s1.StripDiacriticalMarks());
            
                /* Sample Output:
                 Before: J'ai été ravi de faire ta connaissance, A bientôt!
                 After: J'ai ete ravi de faire ta connaissance, A bientot!
                */
            }
            </code>
            </example>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.ReplacePropertyTokens(System.String,System.Object)">
            <summary>
            Replaces property names in a string with the values of those properties on the given object.
            </summary>
            <param name="input">
            The input string.
            </param>
            <param name="instance">
            The object instance.
            </param>
            <returns>
            The string with tokens replaced with property values.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.EmptyIfNull(System.String)">
            <summary>
            Returns string.Empty if argument is null.
            </summary>
            <param name="value">
            The string.
            </param>
            <returns>
            The resulting string, can't be null.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.CleanPhone(System.String)">
            <summary>
            Cleans up a phone by removing any non-digit characters and any leading 0s or 1s.
            </summary>
            <remarks>
            This method does NOT perform any validation of the phone number, it only
            removes the characters as described in the summary.
            </remarks>
            <param name="value">
            The string to clean.
            </param>
            <returns>
            The clean <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.CheckLuhnsFormula(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Arx.Core.Utilities.StringUtilities.CheckLuhnsFormula(System.String,System.Boolean)">
            <summary>
            Applys Luhn's formula to determine if value passes the Luhn's formula checksum.
            </summary>
            <param name="value">
            The value to test.
            </param>
            <param name="ignoreNonDigits">
            Indicates whether or not to ignore the non digit characters within the string.  If this value is false an exception will be thrown if the value contains non-digit characters.
            </param>
            <returns>
            True if the value passes the Luhn's formula checksum.
            </returns>
            <remarks>
            Luhn's formula is used to validate self checking numbers such as Social Insurance Numbers, Social Security Numbers, or Credit Card Numbers.
            To apply Luhn's formula:
            <list type="number">
                <item>
                    <description>Read the number from right to left.</description>
                </item>
                <item>
                    <description>
                           Every second digit is doubled and then the sum of those digits are added together and added to the checksum.  
                           Other digits are added to the checksum without doubling.
                    </description>
                </item>
                <item>
                    <description>Add the value of each digit to the checksum, doubling every second value before it is added.</description>
                </item>
                <item>
                    <description>If the resulting checksum is divisible by 10 then the number is valid.</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="T:Arx.Core.Utilities.TelephoneFormatter">
            <summary>
            Formats telephone number strings to the North American Numbering Plan format.
            </summary>
            <example>
            Given phoneString as "4165554444"
            <code>string.Format(new TelephoneFormatter(), "Call: {0}", phoneString);</code> 
            Resulting output of string.Format would be "(416) 555-4444".
            </example>
        </member>
        <member name="M:Arx.Core.Utilities.TelephoneFormatter.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">
            The format type.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.TelephoneFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation
            using specified format and culture-specific formatting information.
            </summary>
            <param name="format">
            The format.
            </param>
            <param name="arg">
            The argument.
            </param>
            <param name="formatProvider">
            The format provider.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown due to invalid input or format string.
            </exception>
        </member>
        <member name="T:Arx.Core.Utilities.Tracing.DailyTextWriterTraceListener">
            <summary>
            Trace listener that creates a new file every day.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.DailyTextWriterTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Utilities.Tracing.DailyTextWriterTraceListener"/> class.
            </summary>
            <param name="fileName">
            The file name.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.DailyTextWriterTraceListener.Write(System.String)">
            <summary>
            Writes a message to the trace.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.DailyTextWriterTraceListener.WriteLine(System.String)">
            <summary>
            Writes a new line to the trace.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.DailyTextWriterTraceListener.Dispose(System.Boolean)">
            <summary>
            Disposes the trace writer.
            </summary>
            <param name="disposing">A value indicating whether or not the object should be disposed.</param>
        </member>
        <member name="T:Arx.Core.Utilities.Tracing.TraceWriter">
            <summary>
            Handles application tracing events.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.Flush">
            <summary>
            Flushes all the trace listeners in the trace listener collection.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace data to the trace listeners in the Listeners collection using the specified event type, event identifier, and trace data.
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace data to the trace listeners in the Listeners collection using the specified event type, event identifier, and trace data array.
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An object array containing the trace data.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes a trace event message to the trace listeners in the Listeners collection using the specified event type and event identifier.
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a trace event to the trace listeners in the Listeners collection using the specified event type, event identifier, and argument array and format.
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceEvent(System.Guid,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a trace event to the trace listeners in the Listeners collection using the specified event type, event identifier, and argument array and format.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceException(System.Exception)">
            <summary>
            Writes an exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="exception">The exception to write.</param>
            <remarks>
            If the type of exception has the ExceptionTraceInformation attribute defined then
            the event type and id of the trace will be derived from the values of this attribute.
            Otherwise the trace will be considered a warning with and id of 0.
            </remarks>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceException(System.Guid,System.Exception)">
            <summary>
            Writes an exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="exception">The exception to write.</param>
            <remarks>
            If the type of exception has the ExceptionTraceInformation attribute defined then
            the event type and id of the trace will be derived from the values of this attribute.
            Otherwise the trace will be considered a warning with and id of 0.
            </remarks>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception)">
            <summary>
            Writes an exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="exception">The exception to write.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceException(System.Guid,System.Diagnostics.TraceEventType,System.Int32,System.Exception)">
            <summary>
            Writes an exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="exception">The exception to write.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceCritical(System.Int32,System.String,System.Object[])">
            <summary>
            Writes a critical message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">The critical message to write.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceCritical(System.Guid,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a critical message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">The critical message to write.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceCritical(System.Int32,System.Exception)">
            <summary>
            Writes a critical exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="exception">The exception to write to the trace listeners.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceCritical(System.Guid,System.Int32,System.Exception)">
            <summary>
            Writes a critical exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="exception">The exception to write to the trace listeners.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceError(System.Int32,System.String,System.Object[])">
            <summary>
            Writes an error message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">The error message to write.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceError(System.Guid,System.Int32,System.String,System.Object[])">
            <summary>
            Writes an error message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">The error message to write.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceError(System.Int32,System.Exception)">
            <summary>
            Writes a error exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="exception">The exception to write to the trace listeners.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceError(System.Guid,System.Int32,System.Exception)">
            <summary>
            Writes a error exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="exception">The exception to write to the trace listeners.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceWarning(System.Int32,System.String,System.Object[])">
            <summary>
            Writes an warning message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">The warning message to write.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceWarning(System.Guid,System.Int32,System.String,System.Object[])">
            <summary>
            Writes an warning message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">The warning message to write.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceWarning(System.Int32,System.Exception)">
            <summary>
            Writes a warning exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="exception">The exception to write to the trace listeners.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceWarning(System.Guid,System.Int32,System.Exception)">
            <summary>
            Writes a warning exception to the trace listeners in the Listeners collection.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="exception">The exception to write to the trace listeners.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="format">
            The informative message to write.
            </param>
            <param name="args">
            An object array containing zero or more objects to format.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceInformation(System.Guid,System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="format">
            The informative message to write.
            </param>
            <param name="args">
            An object array containing zero or more objects to format.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceVerbose(System.String,System.Object[])">
            <summary>
            Writes an debugging message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="format">The debugging message to write.</param>
            <param name="args">n object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Tracing.TraceWriter.TraceVerbose(System.Guid,System.String,System.Object[])">
            <summary>
            Writes an debugging message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="traceId">A unique identifier that identifies this trace.</param>
            <param name="format">The debugging message to write.</param>
            <param name="args">n object array containing zero or more objects to format.</param>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Client.ClientMessageInspector">
            <summary>
            Adds secure token to outgoing messages.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Enables inspection or modification of a message before a request message is sent to a service.
            </summary>
            <returns>
            The object that is returned as the correlationState argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)"/> method. This is null if no correlation state is used.The best practice is to make this a <see cref="T:System.Guid"/> to ensure that no two correlationState objects are the same.
            </returns>
            <param name="request">The message to be sent to the service.</param><param name="channel">The  client object channel.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.
            </summary>
            <param name="reply">The message to be transformed into types and handed back to the client application.</param><param name="correlationState">Correlation state data.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ClientMessageInspector.GetMessageHeaderValue">
            <summary>
            Builds a message header value.
            </summary>
            <returns>A new message header value.</returns>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Client.ClientMessageInspectorBehavior">
            <summary>
            Injects the client message inspector to the endpoint behavior.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ClientMessageInspectorBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ClientMessageInspectorBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param><param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ClientMessageInspectorBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param><param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ClientMessageInspectorBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param><param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Client.ExceptionTranslator">
            <summary>
            Translates WCF exceptions into more specific exceptions and handles <see cref="T:Arx.Core.Exceptions.ServerFaultMessage"/>.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ExceptionTranslator.TranslateException(System.Exception)">
            <summary>
            Translates a WCF exception into a more specific exception.
            </summary>
            <param name="ex">The exception to translate.</param>
            <returns>A more specific exception to be thrown to the caller.</returns>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior">
            <summary>
            Enables the extension of the MaxItemsInGraph DataContractSerializerOperationBehavior to a WCF client when building the endpoint dynamically.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior"/> class.
            </summary>
            <param name="maxItemsInObjectGraph">
            The max items in object graph.
            </param>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior.MaxItemsInObjectGraph">
            <summary>
            Gets or sets the maximum number of objects in the graph.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param><param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param><param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ReaderQuotaExtensionBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param><param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Client.ServiceRequestHandler">
            <summary>
            Wraps WCF service calls with tracing and error handling.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Client.ServiceRequestHandler.TraceRequests">
            <summary>
            Gets or sets a value indicating whether or not requests should be traced.
            </summary>
            <remarks>
            Request tracing is on by default.
            </remarks>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Client.ServiceRequestHandler.TraceExceptions">
            <summary>
            Gets or sets a value indicating whether or not exceptions should be traced.
            </summary>
            <remarks>
            Exception tracing is on by default.
            </remarks>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ServiceRequestHandler.CallMethod(System.Action)">
            <summary>
            Executes a lambda instruction of method delegate the does not return a value and translates server side and communication exceptions.
            </summary>
            <param name="serviceFunction">The lambda instruction or delegate to execute.</param>
            <remarks>
            <example>
            This example shows how to wrap a service call using this method:
            <code language="cs">
            var profile = new AccountGroupingProfile()
            // --- snip update profile properties -- //
            ServiceRequestHander.CallMethod(() => DataAccessClient.GetChannel().SaveAccount(profile));
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.ServiceRequestHandler.CallMethod``1(System.Func{``0})">
            <summary>
            Executes a lambda instruction or method delegate that returns a value of type T and translates server side and communication exceptions.
            </summary>
            <typeparam name="T">The return type of the lambda instruction or delegate.</typeparam>
            <param name="serviceFunction">The lambda instruction or delegate to execute.</param>
            <returns>The return value of the lambda instruction or delegate.</returns>
            <remarks>
            <example>
            This example shows how to retrieve a value from a service request with this method.
            <code language="cs">
            AccoungGroupingProfile profile = ServiceRequestHander.CallMethod(() => 
                DataAccessClient.GetChannel().GetAccountGroupingProfileByName("profile"));
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Client.UserAgent">
            <summary>
            Defines the user information to be included in a WCF message header.
            </summary>
        </member>
        <member name="F:Arx.Core.Utilities.Wcf.Client.UserAgent.HeaderNamespace">
            <summary>
            The namespace for ARx user agent message headers.
            </summary>
        </member>
        <member name="F:Arx.Core.Utilities.Wcf.Client.UserAgent.HeaderName">
            <summary>
            The name of the ARx user agent header.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Client.UserAgent.MachineName">
            <summary>
            Gets or sets the host name of the client machine.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Client.UserAgent.OperatingSystemUser">
            <summary>
            Gets or sets the user name that is logged in to the operating system.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Client.UserAgent.OperatingSystemVersion">
            <summary>
            Gets or sets the operating system version.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Client.UserAgent.ApplicationTitle">
            <summary>
            Gets or sets the application title.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Client.UserAgent.ApplicationVersion">
            <summary>
            Gets or sets the application version.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.UserAgent.Create">
            <summary>
            Builds a new user agent with values loaded from the client environment.
            </summary>
            <returns>A new user agent with values loaded from the client environment.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.UserAgent.DeserializeFromXml(System.String)">
            <summary>
            Builds a new user agent from an XML representation.
            </summary>
            <param name="xml">An XML string that represents a user agent.</param>
            <returns>The user agent represented by the XML string.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.UserAgent.SerializeToXml">
            <summary>
            Creates an XML representation of this object.
            </summary>
            <returns>This user agent object represented by an XML string.</returns>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.UserAgent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Client.UserAgent.ToString(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <param name="verbose">
            A value indicating whether or not verbose output should be used.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Server.MessageHandler">
            <summary>
            Inspects message headers to ensure that they are coming from the appropriate client assembly (ARx.DLL).
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.MessageHandler.TestMessageHeader(System.String)">
            <summary>
            Tests the WCF message header.
            </summary>
            <param name="header">
            The header to test.
            </param>
            <returns>
            True if the header is valid.
            </returns>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Server.MessageInspector">
            <summary>
            Inspects WCF messages as they are received.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Server.MessageInspector.RequireMessageHeaderSecurity">
            <summary>
            Gets or sets a value indicating whether or not to require ARx message header security.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.MessageInspector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Core.Utilities.Wcf.Server.MessageInspector"/> class.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.MessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            Called after an inbound message has been received but before the message is dispatched to the intended operation.
            </summary>
            <returns>
            The object used to correlate state. This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)"/> method.
            </returns>
            <param name="request">
            The request message.
            </param>
            <param name="channel">
            The incoming channel.
            </param>
            <param name="instanceContext">
            The current service instance.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.MessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Called after the operation has returned but before the reply message is sent.
            </summary>
            <param name="reply">
            The reply message. This value is null if the operation is one way.
            </param>
            <param name="correlationState">
            The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)"/> method.
            </param>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Server.MessageMetaData">
            <summary>
            Message header information used for matching request messages to response messages.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Server.MessageMetaData.MessageId">
            <summary>
            Gets or sets the unique id (UUID) of the message.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Server.MessageMetaData.Operation">
            <summary>
            Gets or sets the operation requested.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Server.MessageMetaData.RequestFrom">
            <summary>
            Gets or sets the host or IP that the message was from.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Server.MessageMetaData.RequestReceived">
            <summary>
            Gets or sets the date and time that the request was received.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Server.MessageMetaData.ResponseSent">
            <summary>
            Gets or sets the date and time that the response was sent.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Server.MessageMetaData.TraceId">
            <summary>
            Gets or sets the trace id of this message.
            </summary>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Server.RoutedExceptionHandler">
            <summary>
            Wraps routed exceptions into the supported fault contract.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.RoutedExceptionHandler.HandleError(System.Exception)">
            <summary>
            Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases. 
            </summary>
            <returns>
            true if  should not abort the session (if there is one) and instance context if the instance context is not <see cref="F:System.ServiceModel.InstanceContextMode.Single"/>; otherwise, false. The default is false.
            </returns>
            <param name="error">
            The exception thrown during processing.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.RoutedExceptionHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            Enables the creation of a custom <see cref="T:System.ServiceModel.FaultException`1"/> that is returned from an exception in the course of a service method.
            </summary>
            <param name="error">
            The <see cref="T:System.Exception"/> object thrown in the course of the service operation.
            </param>
            <param name="version">
            The SOAP version of the message.
            </param>
            <param name="fault">
            The <see cref="T:System.ServiceModel.Channels.Message"/> object that is returned to the client, or service, in the duplex case.
            </param>
        </member>
        <member name="T:Arx.Core.Utilities.Wcf.Server.ArxServiceBehaviorAttribute">
            <summary>
            Routes unhandled exceptions thrown from a class to the error handler.
            </summary>
        </member>
        <member name="P:Arx.Core.Utilities.Wcf.Server.ArxServiceBehaviorAttribute.RequireMessageHeaderSecurity">
            <summary>
            Gets or sets a value indicating whether or not to require ARx message header security.
            </summary>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.ArxServiceBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Provides the ability to pass custom data to binding elements to support the contract implementation.
            </summary>
            <param name="serviceDescription">
            The service description of the service.
            </param>
            <param name="serviceHostBase">
            The host of the service.
            </param>
            <param name="endpoints">
            The service endpoints.
            </param>
            <param name="bindingParameters">
            Custom objects to which binding elements have access.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.ArxServiceBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.
            </summary>
            <param name="serviceDescription">
            The service description.
            </param>
            <param name="serviceHostBase">
            The host that is currently being built.
            </param>
        </member>
        <member name="M:Arx.Core.Utilities.Wcf.Server.ArxServiceBehaviorAttribute.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.
            </summary>
            <param name="serviceDescription">
            The service description.
            </param>
            <param name="serviceHostBase">
            The service host that is currently being constructed.
            </param>
        </member>
        <member name="T:Arx.Contracts.FaultContracts.DatabaseSystemException">
            <summary>
            Thrown when the database server throws an error.
            </summary>
        </member>
        <member name="M:Arx.Contracts.FaultContracts.DatabaseSystemException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Contracts.FaultContracts.DatabaseSystemException"/> class.
            </summary>
        </member>
        <member name="M:Arx.Contracts.FaultContracts.DatabaseSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Contracts.FaultContracts.DatabaseSystemException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Arx.Contracts.FaultContracts.DatabaseSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arx.Contracts.FaultContracts.DatabaseSystemException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
    </members>
</doc>
