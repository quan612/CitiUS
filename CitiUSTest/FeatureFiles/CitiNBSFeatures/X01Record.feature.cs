// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiNBSFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("X01 Record")]
    [NUnit.Framework.CategoryAttribute("Placement")]
    [NUnit.Framework.CategoryAttribute("X01_Record")]
    [NUnit.Framework.CategoryAttribute("epic:85568")]
    public partial class X01RecordFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Placement",
                "X01_Record",
                "epic:85568"};
        
#line 1 "X01Record.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "X01 Record", "\tRelated to X01 record\r\n\r\nIBM Signed Numeric Table\r\n{ = 0     } = -0\r\nA = 1     J" +
                    " = -1\r\nB = 2     K = -2\r\nC = 3     L = -3\r\nD = 4     M = -4\r\nE = 5     N = -5\r\nF" +
                    " = 6     O = -6\r\nG = 7     P = -7\r\nH = 8     Q = -8\r\nI = 9     R = -9", ProgrammingLanguage.CSharp, new string[] {
                        "Placement",
                        "X01_Record",
                        "epic:85568"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 18
#line hidden
#line 19
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table533 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table533.AddRow(new string[] {
                        "OILS",
                        "2019/08/15"});
#line 20
  testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table533, "And ");
#line hidden
            TechTalk.SpecFlow.Table table534 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table534.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 23
  testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table534, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4698")]
        public virtual void CITI_4698()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4698", "Verify the saving of bucket and rollbck fields when we receive non-blank values i" +
                    "n X01 Record", ((string[])(null)));
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table535 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table535.AddRow(new string[] {
                            "MsaDelqBucket1",
                            "11A"});
                table535.AddRow(new string[] {
                            "MsaDelqBucket2",
                            "22B"});
                table535.AddRow(new string[] {
                            "MsaDelqBucket3",
                            "33C"});
                table535.AddRow(new string[] {
                            "MsaDelqBucket4",
                            "66F"});
                table535.AddRow(new string[] {
                            "MsaDelqBucket5",
                            "55E"});
                table535.AddRow(new string[] {
                            "MsaDelqBucket6",
                            "44D"});
                table535.AddRow(new string[] {
                            "MsaRollBck1",
                            "111A"});
                table535.AddRow(new string[] {
                            "MsaRollBck2",
                            "222B"});
                table535.AddRow(new string[] {
                            "MsaRollBck3",
                            "333C"});
                table535.AddRow(new string[] {
                            "MsaRollBck4",
                            "666F"});
                table535.AddRow(new string[] {
                            "MsaRollBck5",
                            "555E"});
                table535.AddRow(new string[] {
                            "MsaRollBck6",
                            "444D"});
#line 29
 testRunner.Given("The user modifies the X01 record in DL file with credentials:", ((string)(null)), table535, "Given ");
#line hidden
#line 43
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table536 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table536.AddRow(new string[] {
                            "Number4",
                            "1.11"});
                table536.AddRow(new string[] {
                            "Number5",
                            "2.22"});
                table536.AddRow(new string[] {
                            "Number6",
                            "3.33"});
                table536.AddRow(new string[] {
                            "Number7",
                            "6.66"});
                table536.AddRow(new string[] {
                            "Number8",
                            "5.55"});
                table536.AddRow(new string[] {
                            "Number9",
                            "4.44"});
                table536.AddRow(new string[] {
                            "Currency1",
                            "6.66"});
                table536.AddRow(new string[] {
                            "Number10",
                            "11.11"});
                table536.AddRow(new string[] {
                            "Number11",
                            "22.22"});
                table536.AddRow(new string[] {
                            "Number12",
                            "33.33"});
                table536.AddRow(new string[] {
                            "Number13",
                            "66.66"});
                table536.AddRow(new string[] {
                            "Number14",
                            "55.55"});
                table536.AddRow(new string[] {
                            "Number15",
                            "44.44"});
#line 45
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table536, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4699")]
        public virtual void CITI_4699()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4699", "Verify the saving of bucket and rollbck fields when we receive blank values in X0" +
                    "1 Record", ((string[])(null)));
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table537 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table537.AddRow(new string[] {
                            "MsaDelqBucket1",
                            ""});
                table537.AddRow(new string[] {
                            "MsaDelqBucket2",
                            ""});
                table537.AddRow(new string[] {
                            "MsaDelqBucket3",
                            ""});
                table537.AddRow(new string[] {
                            "MsaDelqBucket4",
                            ""});
                table537.AddRow(new string[] {
                            "MsaDelqBucket5",
                            ""});
                table537.AddRow(new string[] {
                            "MsaDelqBucket6",
                            ""});
                table537.AddRow(new string[] {
                            "MsaRollBck1",
                            ""});
                table537.AddRow(new string[] {
                            "MsaRollBck2",
                            ""});
                table537.AddRow(new string[] {
                            "MsaRollBck3",
                            ""});
                table537.AddRow(new string[] {
                            "MsaRollBck4",
                            ""});
                table537.AddRow(new string[] {
                            "MsaRollBck5",
                            ""});
                table537.AddRow(new string[] {
                            "MsaRollBck6",
                            ""});
#line 63
 testRunner.Given("The user modifies the X01 record in DL file with credentials:", ((string)(null)), table537, "Given ");
#line hidden
#line 77
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table538 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table538.AddRow(new string[] {
                            "Number4",
                            ""});
                table538.AddRow(new string[] {
                            "Number5",
                            ""});
                table538.AddRow(new string[] {
                            "Number6",
                            ""});
                table538.AddRow(new string[] {
                            "Number7",
                            ""});
                table538.AddRow(new string[] {
                            "Number8",
                            ""});
                table538.AddRow(new string[] {
                            "Number9",
                            ""});
                table538.AddRow(new string[] {
                            "Curr1",
                            ""});
                table538.AddRow(new string[] {
                            "Number10",
                            ""});
                table538.AddRow(new string[] {
                            "Number11",
                            ""});
                table538.AddRow(new string[] {
                            "Number12",
                            ""});
                table538.AddRow(new string[] {
                            "Number13",
                            ""});
                table538.AddRow(new string[] {
                            "Number14",
                            ""});
                table538.AddRow(new string[] {
                            "Number15",
                            ""});
#line 79
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table538, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
