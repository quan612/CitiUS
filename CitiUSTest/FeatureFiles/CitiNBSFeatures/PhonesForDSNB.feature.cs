// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiNBSFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NbsPhonesForDSNB")]
    [NUnit.Framework.CategoryAttribute("Placement")]
    [NUnit.Framework.CategoryAttribute("Phones")]
    [NUnit.Framework.CategoryAttribute("DSNB")]
    [NUnit.Framework.CategoryAttribute("epic:84633")]
    public partial class NbsPhonesForDSNBFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Placement",
                "Phones",
                "DSNB",
                "epic:84633"};
        
#line 1 "PhonesForDSNB.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NbsPhonesForDSNB", "\tTo test the loading of phone for new account loaded into the system for Citi DSN" +
                    "B accounts\t", ProgrammingLanguage.CSharp, new string[] {
                        "Placement",
                        "Phones",
                        "DSNB",
                        "epic:84633"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table457 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table457.AddRow(new string[] {
                        "DSNB",
                        "2019/08/15"});
#line 7
  testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table457, "And ");
#line hidden
            TechTalk.SpecFlow.Table table458 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table458.AddRow(new string[] {
                        "AMEX",
                        "7700",
                        "DSNB",
                        "0521"});
#line 10
  testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table458, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4412")]
        public virtual void CITI_4412()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4412", "Verify the phone status where MIO = DSNB and all phone Indicators = D", ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table459 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table459.AddRow(new string[] {
                            "6479991111",
                            "D",
                            "6479992222",
                            "D"});
#line 17
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table459, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table460 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table460.AddRow(new string[] {
                            "6479993333",
                            "D"});
#line 20
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table460, "Given ");
#line hidden
#line 23
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table461 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table461.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "1",
                            "Home",
                            "Landline"});
                table461.AddRow(new string[] {
                            "6479992222",
                            "N",
                            "2",
                            "Work",
                            "Landline"});
                table461.AddRow(new string[] {
                            "6479993333",
                            "N",
                            "18",
                            "Home",
                            "Mobile"});
#line 26
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table461, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table462 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneServiceType",
                            "ARxPhoneLocationType"});
                table462.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "D",
                            "N",
                            "Landline",
                            "Home"});
                table462.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "N",
                            "Landline",
                            "Work"});
                table462.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "D",
                            "N",
                            "Mobile",
                            "Home"});
#line 31
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table462, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
