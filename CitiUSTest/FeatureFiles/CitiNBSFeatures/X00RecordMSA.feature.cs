// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiNBSFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("X00 Record MSA")]
    [NUnit.Framework.CategoryAttribute("Placement")]
    [NUnit.Framework.CategoryAttribute("X00_Record")]
    [NUnit.Framework.CategoryAttribute("MSA")]
    [NUnit.Framework.CategoryAttribute("epic:85568")]
    public partial class X00RecordMSAFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Placement",
                "X00_Record",
                "MSA",
                "epic:85568"};
        
#line 1 "X00RecordMSA.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "X00 Record MSA", "\tRelated to MSA fields in X00 record", ProgrammingLanguage.CSharp, new string[] {
                        "Placement",
                        "X00_Record",
                        "MSA",
                        "epic:85568"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table519 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table519.AddRow(new string[] {
                        "OILS",
                        "2019/08/15"});
#line 7
  testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table519, "And ");
#line hidden
            TechTalk.SpecFlow.Table table520 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table520.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 10
  testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table520, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4691")]
        public virtual void CITI_4691()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4691", "Verify the saving of MSA fields when we receive values that are not blank in X00 " +
                    "Record", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table521 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table521.AddRow(new string[] {
                            "MsaPromoPrefInd",
                            "AB"});
                table521.AddRow(new string[] {
                            "MsaEmail1Addr",
                            "email1@gmail.com"});
                table521.AddRow(new string[] {
                            "MsaEmail1Usblty",
                            "Y"});
                table521.AddRow(new string[] {
                            "MsaEmail1Cnsnt",
                            "Y"});
                table521.AddRow(new string[] {
                            "MsaEmail2Addr",
                            "email2@yahoo.com"});
                table521.AddRow(new string[] {
                            "MsaEmail2Usblty",
                            "N"});
                table521.AddRow(new string[] {
                            "MsaEmail2Cnsnt",
                            "N"});
                table521.AddRow(new string[] {
                            "MsaDtLasReage",
                            "20201212"});
                table521.AddRow(new string[] {
                            "MsaErlyCoInd",
                            "H"});
                table521.AddRow(new string[] {
                            "MsaDtLstBadCk",
                            "20201111"});
                table521.AddRow(new string[] {
                            "MsaLstStmtDt",
                            "20201010"});
                table521.AddRow(new string[] {
                            "MsaNxtStmtDt",
                            "20200909"});
                table521.AddRow(new string[] {
                            "MsaCloseDt",
                            "20200808"});
                table521.AddRow(new string[] {
                            "MsaDeviceType",
                            "M"});
#line 16
 testRunner.Given("The user modifies the X00 record in DL file with credentials:", ((string)(null)), table521, "Given ");
#line hidden
#line 32
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table522 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table522.AddRow(new string[] {
                            "Date1",
                            "12/12/2020 12:00:00 AM"});
                table522.AddRow(new string[] {
                            "Text13",
                            "H"});
                table522.AddRow(new string[] {
                            "Date2",
                            "11/11/2020 12:00:00 AM"});
                table522.AddRow(new string[] {
                            "Date3",
                            "10/10/2020 12:00:00 AM"});
                table522.AddRow(new string[] {
                            "Date4",
                            "9/9/2020 12:00:00 AM"});
                table522.AddRow(new string[] {
                            "Date5",
                            "8/8/2020 12:00:00 AM"});
                table522.AddRow(new string[] {
                            "Text14",
                            "M"});
#line 34
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table522, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table523 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table523.AddRow(new string[] {
                            "MASPPI",
                            "AB"});
                table523.AddRow(new string[] {
                            "MASEM1",
                            "email1@gmail.com"});
                table523.AddRow(new string[] {
                            "MASEU1",
                            "Y"});
                table523.AddRow(new string[] {
                            "MASEI1",
                            "Y"});
                table523.AddRow(new string[] {
                            "MASEM2",
                            "email2@yahoo.com"});
                table523.AddRow(new string[] {
                            "MASEI2",
                            "N"});
                table523.AddRow(new string[] {
                            "MASEU2",
                            "N"});
#line 43
 testRunner.Then("The eCollectApps.Citi.ExtrasOverflow table for the account is as below:", ((string)(null)), table523, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4692")]
        public virtual void CITI_4692()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4692", "Verify the saving of MSA fields when we receive values that are blank in X00 Reco" +
                    "rd", ((string[])(null)));
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table524 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table524.AddRow(new string[] {
                            "MsaPromoPrefInd",
                            ""});
                table524.AddRow(new string[] {
                            "MsaEmail1Addr",
                            ""});
                table524.AddRow(new string[] {
                            "MsaEmail1Usblty",
                            ""});
                table524.AddRow(new string[] {
                            "MsaEmail1Cnsnt",
                            ""});
                table524.AddRow(new string[] {
                            "MsaEmail2Addr",
                            ""});
                table524.AddRow(new string[] {
                            "MsaEmail2Usblty",
                            ""});
                table524.AddRow(new string[] {
                            "MsaEmail2Cnsnt",
                            ""});
                table524.AddRow(new string[] {
                            "MsaDtLasReage",
                            ""});
                table524.AddRow(new string[] {
                            "MsaErlyCoInd",
                            ""});
                table524.AddRow(new string[] {
                            "MsaDtLstBadCk",
                            ""});
                table524.AddRow(new string[] {
                            "MsaLstStmtDt",
                            ""});
                table524.AddRow(new string[] {
                            "MsaNxtStmtDt",
                            ""});
                table524.AddRow(new string[] {
                            "MsaCloseDt",
                            ""});
                table524.AddRow(new string[] {
                            "MsaDeviceType",
                            ""});
#line 55
 testRunner.Given("The user modifies the X00 record in DL file with credentials:", ((string)(null)), table524, "Given ");
#line hidden
#line 71
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table525 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table525.AddRow(new string[] {
                            "Date1",
                            ""});
                table525.AddRow(new string[] {
                            "Text13",
                            ""});
                table525.AddRow(new string[] {
                            "Date2",
                            ""});
                table525.AddRow(new string[] {
                            "Date3",
                            ""});
                table525.AddRow(new string[] {
                            "Date4",
                            ""});
                table525.AddRow(new string[] {
                            "Date5",
                            ""});
                table525.AddRow(new string[] {
                            "Text14",
                            ""});
#line 73
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table525, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table526 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table526.AddRow(new string[] {
                            "MASPPI",
                            ""});
                table526.AddRow(new string[] {
                            "MASEM1",
                            ""});
                table526.AddRow(new string[] {
                            "MASEU1",
                            ""});
                table526.AddRow(new string[] {
                            "MASEI1",
                            ""});
                table526.AddRow(new string[] {
                            "MASEM2",
                            ""});
                table526.AddRow(new string[] {
                            "MASEI2",
                            ""});
                table526.AddRow(new string[] {
                            "MASEU2",
                            ""});
#line 82
 testRunner.Then("The eCollectApps.Citi.ExtrasOverflow table for the account is as below:", ((string)(null)), table526, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4696")]
        public virtual void CITI_4696()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4696", "Verify the mappings for delinquent", ((string[])(null)));
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table527 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table527.AddRow(new string[] {
                            "DaysDelinquent",
                            "555"});
                table527.AddRow(new string[] {
                            "DelinquencyBucket",
                            "1"});
                table527.AddRow(new string[] {
                            "DelinquencyHistory",
                            "abcde"});
                table527.AddRow(new string[] {
                            "TreatmentTag",
                            "tag"});
#line 94
 testRunner.Given("The user modifies the X00 record in DL file with credentials:", ((string)(null)), table527, "Given ");
#line hidden
#line 100
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table528 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table528.AddRow(new string[] {
                            "Text4",
                            "abcde"});
                table528.AddRow(new string[] {
                            "Text5",
                            "tag"});
#line 102
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table528, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table529 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table529.AddRow(new string[] {
                            "Number19",
                            "555"});
                table529.AddRow(new string[] {
                            "Number20",
                            "1"});
#line 106
 testRunner.Then("The Extras table for the account is as below:", ((string)(null)), table529, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4697")]
        public virtual void CITI_4697()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4697", "Verify the mappings for delinquent when they are blank in placement file", ((string[])(null)));
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table530 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table530.AddRow(new string[] {
                            "DaysDelinquent",
                            ""});
                table530.AddRow(new string[] {
                            "DelinquencyBucket",
                            ""});
                table530.AddRow(new string[] {
                            "DelinquencyHistory",
                            ""});
                table530.AddRow(new string[] {
                            "TreatmentTag",
                            ""});
#line 113
 testRunner.Given("The user modifies the X00 record in DL file with credentials:", ((string)(null)), table530, "Given ");
#line hidden
#line 119
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table531 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table531.AddRow(new string[] {
                            "Text4",
                            ""});
                table531.AddRow(new string[] {
                            "Text5",
                            ""});
#line 121
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table531, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table532 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table532.AddRow(new string[] {
                            "Number19",
                            ""});
                table532.AddRow(new string[] {
                            "Number20",
                            ""});
#line 125
 testRunner.Then("The Extras table for the account is as below:", ((string)(null)), table532, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
