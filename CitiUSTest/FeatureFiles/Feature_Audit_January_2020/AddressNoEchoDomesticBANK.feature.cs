// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.Feature_Audit_January_2020
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressNoEchoDomesticBANK")]
    public partial class AddressNoEchoDomesticBANKFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AddressNoEchoDomesticBANK.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddressNoEchoDomesticBANK", "\tTo test specific scenarios related to audit on 21 January 2020", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table955 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table955.AddRow(new string[] {
                        "BANK",
                        "Yesterday"});
#line 6
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table955, "And ");
#line hidden
            TechTalk.SpecFlow.Table table956 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table956.AddRow(new string[] {
                        "CONS",
                        "433902",
                        "BANK",
                        "GL03"});
#line 9
 testRunner.And("The user modifies the account record in DL file with credentials:", ((string)(null)), table956, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4509")]
        public virtual void CITI_4509()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4509", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASAD2 does not match Addr1Line2 (BAN" +
                    "K)", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table957 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table957.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 16
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table957, "Given ");
#line hidden
#line 19
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table958 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table958.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 21
 testRunner.Then("The account address is as below:", ((string)(null)), table958, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table959 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table959.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table959.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 345"});
                table959.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table959.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table959.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 24
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table959, "When ");
#line hidden
#line 31
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table960 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table960.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 345",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 32
 testRunner.Then("The account address is as below:", ((string)(null)), table960, "Then ");
#line hidden
#line 35
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table961 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table961.AddRow(new string[] {
                            "MASAD1"});
                table961.AddRow(new string[] {
                            "MASAD2"});
                table961.AddRow(new string[] {
                            "MASCTY"});
                table961.AddRow(new string[] {
                            "MASSTC"});
                table961.AddRow(new string[] {
                            "MASZIP"});
#line 37
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table961, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4510")]
        public virtual void CITI_4510()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4510", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASAD1 does not match Addr1Line1 (BAN" +
                    "K)", ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table962 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table962.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 48
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table962, "Given ");
#line hidden
#line 51
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table963 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table963.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 53
 testRunner.Then("The account address is as below:", ((string)(null)), table963, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table964 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table964.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "abced 343"});
                table964.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table964.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table964.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table964.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 56
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table964, "When ");
#line hidden
#line 63
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table965 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table965.AddRow(new string[] {
                            "abced 343",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 64
 testRunner.Then("The account address is as below:", ((string)(null)), table965, "Then ");
#line hidden
#line 67
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table966 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table966.AddRow(new string[] {
                            "MASAD1"});
                table966.AddRow(new string[] {
                            "MASAD2"});
                table966.AddRow(new string[] {
                            "MASCTY"});
                table966.AddRow(new string[] {
                            "MASSTC"});
                table966.AddRow(new string[] {
                            "MASZIP"});
#line 69
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table966, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4511")]
        public virtual void CITI_4511()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4511", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that only has MASAD1 (BANK)", ((string[])(null)));
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table967 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table967.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 80
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table967, "Given ");
#line hidden
#line 83
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table968 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table968.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 85
 testRunner.Then("The account address is as below:", ((string)(null)), table968, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table969 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table969.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "abced 343"});
                table969.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table969.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table969.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 88
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table969, "When ");
#line hidden
#line 94
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table970 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table970.AddRow(new string[] {
                            "abced 343",
                            "",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 95
 testRunner.Then("The account address is as below:", ((string)(null)), table970, "Then ");
#line hidden
#line 98
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table971 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table971.AddRow(new string[] {
                            "MASAD1"});
                table971.AddRow(new string[] {
                            "MASAD2"});
                table971.AddRow(new string[] {
                            "MASCTY"});
                table971.AddRow(new string[] {
                            "MASSTC"});
                table971.AddRow(new string[] {
                            "MASZIP"});
#line 100
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table971, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4512")]
        public virtual void CITI_4512()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4512", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that only has MASAD2 (BANK)", ((string[])(null)));
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table972 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table972.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 111
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table972, "Given ");
#line hidden
#line 114
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table973 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table973.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 116
 testRunner.Then("The account address is as below:", ((string)(null)), table973, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table974 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table974.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "line 2 only here"});
                table974.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table974.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table974.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 119
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table974, "When ");
#line hidden
#line 125
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table975 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table975.AddRow(new string[] {
                            "line 2 only here",
                            "",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 126
 testRunner.Then("The account address is as below:", ((string)(null)), table975, "Then ");
#line hidden
#line 129
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table976 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table976.AddRow(new string[] {
                            "MASAD1"});
                table976.AddRow(new string[] {
                            "MASAD2"});
                table976.AddRow(new string[] {
                            "MASCTY"});
                table976.AddRow(new string[] {
                            "MASSTC"});
                table976.AddRow(new string[] {
                            "MASZIP"});
#line 131
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table976, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4513")]
        public virtual void CITI_4513()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4513", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that only has MASAD2 and it is blank (BANK)", ((string[])(null)));
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table977 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table977.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 142
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table977, "Given ");
#line hidden
#line 145
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table978 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table978.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 147
 testRunner.Then("The account address is as below:", ((string)(null)), table978, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table979 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table979.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            ""});
                table979.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table979.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table979.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 150
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table979, "When ");
#line hidden
#line 156
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
 testRunner.Then("A general error status happens when processing the row record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 159
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table980 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table980.AddRow(new string[] {
                            "MASAD1"});
                table980.AddRow(new string[] {
                            "MASAD2"});
                table980.AddRow(new string[] {
                            "MASCTY"});
                table980.AddRow(new string[] {
                            "MASSTC"});
                table980.AddRow(new string[] {
                            "MASZIP"});
#line 160
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table980, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4540")]
        public virtual void CITI_4540()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4540", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASCTY does not match Addr1City (BANK" +
                    ")", ((string[])(null)));
#line 169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table981 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table981.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 171
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table981, "Given ");
#line hidden
#line 174
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table982 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table982.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 176
 testRunner.Then("The account address is as below:", ((string)(null)), table982, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table983 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table983.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table983.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table983.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "NEW YORK"});
                table983.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table983.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 179
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table983, "When ");
#line hidden
#line 186
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table984 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table984.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "NEW YORK",
                            "CA",
                            "900667412"});
#line 187
 testRunner.Then("The account address is as below:", ((string)(null)), table984, "Then ");
#line hidden
#line 190
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table985 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table985.AddRow(new string[] {
                            "MASAD1"});
                table985.AddRow(new string[] {
                            "MASAD2"});
                table985.AddRow(new string[] {
                            "MASCTY"});
                table985.AddRow(new string[] {
                            "MASSTC"});
                table985.AddRow(new string[] {
                            "MASZIP"});
#line 192
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table985, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4541")]
        public virtual void CITI_4541()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4541", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASSTC does not match Addr1Prov (BANK" +
                    ")", ((string[])(null)));
#line 201
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table986 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table986.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 203
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table986, "Given ");
#line hidden
#line 206
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 207
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table987 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table987.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 208
 testRunner.Then("The account address is as below:", ((string)(null)), table987, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table988 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table988.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table988.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table988.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "NEW YORK"});
                table988.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "NY"});
                table988.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 211
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table988, "When ");
#line hidden
#line 218
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table989 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table989.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "NEW YORK",
                            "NY",
                            "900667412"});
#line 219
 testRunner.Then("The account address is as below:", ((string)(null)), table989, "Then ");
#line hidden
#line 222
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 223
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table990 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table990.AddRow(new string[] {
                            "MASAD1"});
                table990.AddRow(new string[] {
                            "MASAD2"});
                table990.AddRow(new string[] {
                            "MASCTY"});
                table990.AddRow(new string[] {
                            "MASSTC"});
                table990.AddRow(new string[] {
                            "MASZIP"});
#line 224
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table990, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4542")]
        public virtual void CITI_4542()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4542", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASZIP does not match Addr1Postal (BA" +
                    "NK)", ((string[])(null)));
#line 233
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table991 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table991.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 235
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table991, "Given ");
#line hidden
#line 238
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 239
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table992 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table992.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 240
 testRunner.Then("The account address is as below:", ((string)(null)), table992, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table993 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table993.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table993.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table993.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "NEW YORK"});
                table993.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "NY"});
                table993.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "10001"});
#line 243
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table993, "When ");
#line hidden
#line 250
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table994 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table994.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "NEW YORK",
                            "NY",
                            "10001"});
#line 251
 testRunner.Then("The account address is as below:", ((string)(null)), table994, "Then ");
#line hidden
#line 254
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 255
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table995 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table995.AddRow(new string[] {
                            "MASAD1"});
                table995.AddRow(new string[] {
                            "MASAD2"});
                table995.AddRow(new string[] {
                            "MASCTY"});
                table995.AddRow(new string[] {
                            "MASSTC"});
                table995.AddRow(new string[] {
                            "MASZIP"});
#line 256
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table995, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4546")]
        public virtual void CITI_4546()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4546", "Verify the domestic address update is sent to Citi if the changes are made from u" +
                    "ser (BANK)", ((string[])(null)));
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table996 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table996.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 267
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table996, "Given ");
#line hidden
#line 270
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 271
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table997 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table997.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 272
 testRunner.Then("The account address is as below:", ((string)(null)), table997, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table998 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table998.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table998.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table998.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "NEW YORK"});
                table998.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "NY"});
                table998.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "10001"});
#line 275
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table998, "When ");
#line hidden
#line 282
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table999 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table999.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "NEW YORK",
                            "NY",
                            "10001"});
#line 283
 testRunner.Then("The account address is as below:", ((string)(null)), table999, "Then ");
#line hidden
#line 286
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 287
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1000 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1000.AddRow(new string[] {
                            "MASAD1"});
                table1000.AddRow(new string[] {
                            "MASAD2"});
                table1000.AddRow(new string[] {
                            "MASCTY"});
                table1000.AddRow(new string[] {
                            "MASSTC"});
                table1000.AddRow(new string[] {
                            "MASZIP"});
#line 288
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1000, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1001 = new TechTalk.SpecFlow.Table(new string[] {
                            "Line1",
                            "Line2",
                            "City",
                            "Prov",
                            "Postal"});
                table1001.AddRow(new string[] {
                            "9999 RIVER ST",
                            "APT 9090",
                            "MINESOTA",
                            "WA",
                            "102030405"});
#line 295
 testRunner.When("the user changes the account primary address as below:", ((string)(null)), table1001, "When ");
#line hidden
#line 298
 testRunner.And("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 299
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1002 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1002.AddRow(new string[] {
                            "MASAD1",
                            "9999 RIVER ST APT 9090"});
                table1002.AddRow(new string[] {
                            "MASAD2",
                            ""});
                table1002.AddRow(new string[] {
                            "MASCTY",
                            "MINESOTA"});
                table1002.AddRow(new string[] {
                            "MASSTC",
                            "WA"});
                table1002.AddRow(new string[] {
                            "MASZIP",
                            "102030405"});
#line 300
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1002, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
