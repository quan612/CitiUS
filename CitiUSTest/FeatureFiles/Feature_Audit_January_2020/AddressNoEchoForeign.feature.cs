// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.Feature_Audit_January_2020
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressNoEchoForeign")]
    public partial class AddressNoEchoForeignFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AddressNoEchoForeign.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddressNoEchoForeign", "\tTo test specific scenarios related to audit on 21 January 2020", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1047 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table1047.AddRow(new string[] {
                        "OILS",
                        "2019/08/15"});
#line 6
  testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table1047, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1048 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table1048.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 9
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table1048, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4469")]
        public virtual void CITI_4469()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4469", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Foreign Address that has MASAD1 does not match Addr1Line1", ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1049 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1049.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 23
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1049, "Given ");
#line hidden
#line 26
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1050 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1050.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 28
 testRunner.Then("The account address is as below:", ((string)(null)), table1050, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1051 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1051.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "FLAT 4 140 MOUNT WISE"});
                table1051.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "TORONTO ON M4E2P1"});
                table1051.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "CANADA"});
                table1051.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "FC"});
                table1051.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "00000"});
#line 31
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1051, "When ");
#line hidden
#line 38
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1052 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1052.AddRow(new string[] {
                            "FLAT 4 140 MOUNT WISE",
                            "",
                            "CANADA",
                            "FC",
                            "00000"});
#line 39
 testRunner.Then("The account address is as below:", ((string)(null)), table1052, "Then ");
#line hidden
#line 42
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
  testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
  testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1053 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1053.AddRow(new string[] {
                            "MASAD1"});
                table1053.AddRow(new string[] {
                            "MASAD2"});
                table1053.AddRow(new string[] {
                            "MASCTY"});
                table1053.AddRow(new string[] {
                            "MASSTC"});
                table1053.AddRow(new string[] {
                            "MASZIP"});
#line 45
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1053, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4531")]
        public virtual void CITI_4531()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4531", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Foreign Address that has MASAD2 does not match Addr1Line2", ((string[])(null)));
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1054 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1054.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 57
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1054, "Given ");
#line hidden
#line 60
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1055 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1055.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 62
 testRunner.Then("The account address is as below:", ((string)(null)), table1055, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1056 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1056.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "FLAT 4 140 MOUNT WISE"});
                table1056.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "UNITED KINGDON FC 000000000"});
                table1056.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "CANADA"});
                table1056.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "FC"});
                table1056.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "00000"});
#line 65
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1056, "When ");
#line hidden
#line 72
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1057 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1057.AddRow(new string[] {
                            "FLAT 4 140 MOUNT WISE",
                            "",
                            "CANADA",
                            "FC",
                            "00000"});
#line 73
 testRunner.Then("The account address is as below:", ((string)(null)), table1057, "Then ");
#line hidden
#line 76
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
  testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
  testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1058 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1058.AddRow(new string[] {
                            "MASAD1"});
                table1058.AddRow(new string[] {
                            "MASAD2"});
                table1058.AddRow(new string[] {
                            "MASCTY"});
                table1058.AddRow(new string[] {
                            "MASSTC"});
                table1058.AddRow(new string[] {
                            "MASZIP"});
#line 79
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1058, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4532")]
        public virtual void CITI_4532()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4532", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Foreign Address that has MASCTY does not match Addr1City", ((string[])(null)));
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1059 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1059.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 91
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1059, "Given ");
#line hidden
#line 94
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1060 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1060.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 96
 testRunner.Then("The account address is as below:", ((string)(null)), table1060, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1061 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1061.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "FLAT 4 140 MOUNT WISE"});
                table1061.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "UNITED KINGDON FC 000000000"});
                table1061.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "IRAN"});
                table1061.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "FC"});
                table1061.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "00000"});
#line 99
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1061, "When ");
#line hidden
#line 106
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1062 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1062.AddRow(new string[] {
                            "FLAT 4 140 MOUNT WISE",
                            "",
                            "IRAN",
                            "FC",
                            "00000"});
#line 107
 testRunner.Then("The account address is as below:", ((string)(null)), table1062, "Then ");
#line hidden
#line 110
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
  testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
  testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1063 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1063.AddRow(new string[] {
                            "MASAD1"});
                table1063.AddRow(new string[] {
                            "MASAD2"});
                table1063.AddRow(new string[] {
                            "MASCTY"});
                table1063.AddRow(new string[] {
                            "MASSTC"});
                table1063.AddRow(new string[] {
                            "MASZIP"});
#line 113
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1063, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4533")]
        public virtual void CITI_4533()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4533", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Foreign Address that has MASZIP does not match Addr1Postal", ((string[])(null)));
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1064 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1064.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 125
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1064, "Given ");
#line hidden
#line 128
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1065 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1065.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 130
 testRunner.Then("The account address is as below:", ((string)(null)), table1065, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1066 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1066.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "FLAT 4 140 MOUNT WISE"});
                table1066.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "UNITED KINGDON FC 000000000"});
                table1066.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "UNITED KINGDOM"});
                table1066.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "FC"});
                table1066.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "72046"});
#line 133
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1066, "When ");
#line hidden
#line 140
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1067 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1067.AddRow(new string[] {
                            "FLAT 4 140 MOUNT WISE",
                            "",
                            "UNITED KINGDOM",
                            "FC",
                            "72046"});
#line 141
 testRunner.Then("The account address is as below:", ((string)(null)), table1067, "Then ");
#line hidden
#line 144
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
  testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
  testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1068 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1068.AddRow(new string[] {
                            "MASAD1"});
                table1068.AddRow(new string[] {
                            "MASAD2"});
                table1068.AddRow(new string[] {
                            "MASCTY"});
                table1068.AddRow(new string[] {
                            "MASSTC"});
                table1068.AddRow(new string[] {
                            "MASZIP"});
#line 147
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1068, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4549")]
        public virtual void CITI_4549()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4549", "Verify the Foreign address update is sent to Citi if the changes are made from us" +
                    "er", ((string[])(null)));
#line 157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1069 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1069.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 159
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1069, "Given ");
#line hidden
#line 162
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 163
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1070 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1070.AddRow(new string[] {
                            "69 LEE AVENUE",
                            "TORONTO ON M4E2P1",
                            "CANADA",
                            "FC",
                            "00000"});
#line 164
 testRunner.Then("The account address is as below:", ((string)(null)), table1070, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1071 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1071.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "FLAT 4 140 MOUNT WISE"});
                table1071.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "UNITED KINGDON FC 000000000"});
                table1071.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "UNITED KINGDOM"});
                table1071.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "FC"});
                table1071.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "72046"});
#line 167
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1071, "When ");
#line hidden
#line 174
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1072 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1072.AddRow(new string[] {
                            "FLAT 4 140 MOUNT WISE",
                            "",
                            "UNITED KINGDOM",
                            "FC",
                            "72046"});
#line 175
 testRunner.Then("The account address is as below:", ((string)(null)), table1072, "Then ");
#line hidden
#line 178
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 179
  testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
  testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1073 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1073.AddRow(new string[] {
                            "MASAD1"});
                table1073.AddRow(new string[] {
                            "MASAD2"});
                table1073.AddRow(new string[] {
                            "MASCTY"});
                table1073.AddRow(new string[] {
                            "MASSTC"});
                table1073.AddRow(new string[] {
                            "MASZIP"});
#line 181
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1073, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1074 = new TechTalk.SpecFlow.Table(new string[] {
                            "Line1",
                            "Line2",
                            "City",
                            "Prov",
                            "Postal"});
                table1074.AddRow(new string[] {
                            "APT 122 3 thang 2 street",
                            "",
                            "VIETNAM",
                            "FC",
                            "50505"});
#line 188
 testRunner.When("the user changes the account primary address as below:", ((string)(null)), table1074, "When ");
#line hidden
#line 191
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1075 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1075.AddRow(new string[] {
                            "MASAD1",
                            "APT 122 3 thang 2 street"});
                table1075.AddRow(new string[] {
                            "MASAD2",
                            "VIETNAM FC 50505"});
                table1075.AddRow(new string[] {
                            "MASCTY",
                            ""});
                table1075.AddRow(new string[] {
                            "MASSTC",
                            "FC"});
                table1075.AddRow(new string[] {
                            "MASZIP",
                            "00000"});
#line 193
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1075, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
