// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.Feature_Audit_January_2020
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressNoEchoDomesticOILS")]
    public partial class AddressNoEchoDomesticOILSFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AddressNoEchoDomesticOILS.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddressNoEchoDomesticOILS", "\tTo test specific scenarios related to audit on 21 January 2020", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1003 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table1003.AddRow(new string[] {
                        "OILS",
                        "Yesterday"});
#line 6
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table1003, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1004 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table1004.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 9
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table1004, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4535")]
        public virtual void CITI_4535()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4535", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASAD2 does not match Addr1Line2 (OIL" +
                    "S)", ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1005 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1005.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 17
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1005, "Given ");
#line hidden
#line 20
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1006 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1006.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 22
 testRunner.Then("The account address is as below:", ((string)(null)), table1006, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1007 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1007.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table1007.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 345"});
                table1007.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table1007.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1007.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 25
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1007, "When ");
#line hidden
#line 32
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1008 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1008.AddRow(new string[] {
                            "APT 345",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 33
 testRunner.Then("The account address is as below:", ((string)(null)), table1008, "Then ");
#line hidden
#line 36
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1009 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1009.AddRow(new string[] {
                            "MASAD1"});
                table1009.AddRow(new string[] {
                            "MASAD2"});
                table1009.AddRow(new string[] {
                            "MASCTY"});
                table1009.AddRow(new string[] {
                            "MASSTC"});
                table1009.AddRow(new string[] {
                            "MASZIP"});
#line 38
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1009, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4536")]
        public virtual void CITI_4536()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4536", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASAD1 does not match Addr1Line1 (OIL" +
                    "S)", ((string[])(null)));
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1010 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1010.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 49
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1010, "Given ");
#line hidden
#line 52
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1011 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1011.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 54
 testRunner.Then("The account address is as below:", ((string)(null)), table1011, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1012 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1012.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "999 RIVERDALE"});
                table1012.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table1012.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table1012.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1012.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 57
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1012, "When ");
#line hidden
#line 64
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1013 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1013.AddRow(new string[] {
                            "APT 3",
                            "999 RIVERDALE",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 65
 testRunner.Then("The account address is as below:", ((string)(null)), table1013, "Then ");
#line hidden
#line 68
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1014 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1014.AddRow(new string[] {
                            "MASAD1"});
                table1014.AddRow(new string[] {
                            "MASAD2"});
                table1014.AddRow(new string[] {
                            "MASCTY"});
                table1014.AddRow(new string[] {
                            "MASSTC"});
                table1014.AddRow(new string[] {
                            "MASZIP"});
#line 70
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1014, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4537")]
        public virtual void CITI_4537()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4537", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that only has MASAD1 (OILS)", ((string[])(null)));
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1015 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1015.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 81
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1015, "Given ");
#line hidden
#line 84
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1016 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1016.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 86
 testRunner.Then("The account address is as below:", ((string)(null)), table1016, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1017 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1017.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "abced 343"});
                table1017.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table1017.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1017.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 89
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1017, "When ");
#line hidden
#line 95
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1018 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1018.AddRow(new string[] {
                            "abced 343",
                            "",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 96
 testRunner.Then("The account address is as below:", ((string)(null)), table1018, "Then ");
#line hidden
#line 99
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1019 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1019.AddRow(new string[] {
                            "MASAD1"});
                table1019.AddRow(new string[] {
                            "MASAD2"});
                table1019.AddRow(new string[] {
                            "MASCTY"});
                table1019.AddRow(new string[] {
                            "MASSTC"});
                table1019.AddRow(new string[] {
                            "MASZIP"});
#line 101
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1019, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4538")]
        public virtual void CITI_4538()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4538", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that only has MASAD2 (OILS)", ((string[])(null)));
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1020 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1020.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 112
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1020, "Given ");
#line hidden
#line 115
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1021 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1021.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 117
 testRunner.Then("The account address is as below:", ((string)(null)), table1021, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1022 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1022.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "line 2 only here"});
                table1022.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "LOS ANGELES"});
                table1022.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1022.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 120
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1022, "When ");
#line hidden
#line 126
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1023 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1023.AddRow(new string[] {
                            "line 2 only here",
                            "",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 127
 testRunner.Then("The account address is as below:", ((string)(null)), table1023, "Then ");
#line hidden
#line 130
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1024 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1024.AddRow(new string[] {
                            "MASAD1"});
                table1024.AddRow(new string[] {
                            "MASAD2"});
                table1024.AddRow(new string[] {
                            "MASCTY"});
                table1024.AddRow(new string[] {
                            "MASSTC"});
                table1024.AddRow(new string[] {
                            "MASZIP"});
#line 132
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1024, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4539")]
        public virtual void CITI_4539()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4539", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASCTY does not match Addr1City (OILS" +
                    ")", ((string[])(null)));
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1025 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1025.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 143
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1025, "Given ");
#line hidden
#line 146
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1026 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1026.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 148
 testRunner.Then("The account address is as below:", ((string)(null)), table1026, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1027 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1027.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table1027.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table1027.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "SANFRANCISCO"});
                table1027.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1027.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 151
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1027, "When ");
#line hidden
#line 158
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1028 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1028.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "SANFRANCISCO",
                            "CA",
                            "900667412"});
#line 159
 testRunner.Then("The account address is as below:", ((string)(null)), table1028, "Then ");
#line hidden
#line 162
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 163
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1029 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1029.AddRow(new string[] {
                            "MASAD1"});
                table1029.AddRow(new string[] {
                            "MASAD2"});
                table1029.AddRow(new string[] {
                            "MASCTY"});
                table1029.AddRow(new string[] {
                            "MASSTC"});
                table1029.AddRow(new string[] {
                            "MASZIP"});
#line 164
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1029, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4543")]
        public virtual void CITI_4543()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4543", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASSTC does not match Addr1Prov (OILS" +
                    ")", ((string[])(null)));
#line 173
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1030 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1030.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 175
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1030, "Given ");
#line hidden
#line 178
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 179
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1031 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1031.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 180
 testRunner.Then("The account address is as below:", ((string)(null)), table1031, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1032 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1032.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table1032.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table1032.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "SANFRANCISCO"});
                table1032.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "NY"});
                table1032.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "900667412"});
#line 183
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1032, "When ");
#line hidden
#line 190
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1033 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1033.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "SANFRANCISCO",
                            "NY",
                            "900667412"});
#line 191
 testRunner.Then("The account address is as below:", ((string)(null)), table1033, "Then ");
#line hidden
#line 194
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 195
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1034 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1034.AddRow(new string[] {
                            "MASAD1"});
                table1034.AddRow(new string[] {
                            "MASAD2"});
                table1034.AddRow(new string[] {
                            "MASCTY"});
                table1034.AddRow(new string[] {
                            "MASSTC"});
                table1034.AddRow(new string[] {
                            "MASZIP"});
#line 196
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1034, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4544")]
        public virtual void CITI_4544()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4544", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for domestic address update that has MASZIP does not match Addr1Postal (OI" +
                    "LS)", ((string[])(null)));
#line 205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1035 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1035.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 207
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1035, "Given ");
#line hidden
#line 210
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 211
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1036 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1036.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 212
 testRunner.Then("The account address is as below:", ((string)(null)), table1036, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1037 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1037.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table1037.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table1037.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "SANFRANCISCO"});
                table1037.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "NY"});
                table1037.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "102030405"});
#line 215
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1037, "When ");
#line hidden
#line 222
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1038 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1038.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "SANFRANCISCO",
                            "NY",
                            "102030405"});
#line 223
 testRunner.Then("The account address is as below:", ((string)(null)), table1038, "Then ");
#line hidden
#line 226
 testRunner.When("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 227
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1039 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1039.AddRow(new string[] {
                            "MASAD1"});
                table1039.AddRow(new string[] {
                            "MASAD2"});
                table1039.AddRow(new string[] {
                            "MASCTY"});
                table1039.AddRow(new string[] {
                            "MASSTC"});
                table1039.AddRow(new string[] {
                            "MASZIP"});
#line 228
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1039, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4545")]
        public virtual void CITI_4545()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4545", "Verify the domestic address update is sent to Citi if the changes are made from u" +
                    "ser (OILS)", ((string[])(null)));
#line 237
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1040 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1040.AddRow(new string[] {
                            "11743 CULVER BLVD",
                            "APT 3",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 239
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1040, "Given ");
#line hidden
#line 242
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 243
  testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1041 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1041.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "LOS ANGELES",
                            "CA",
                            "900667412"});
#line 244
 testRunner.Then("The account address is as below:", ((string)(null)), table1041, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1042 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1042.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "11743 CULVER BLVD"});
                table1042.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 3"});
                table1042.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "SANFRANCISCO"});
                table1042.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "NY"});
                table1042.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "102030405"});
#line 247
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1042, "When ");
#line hidden
#line 254
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1043 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1043.AddRow(new string[] {
                            "APT 3",
                            "11743 CULVER BLVD",
                            "SANFRANCISCO",
                            "NY",
                            "102030405"});
#line 255
 testRunner.Then("The account address is as below:", ((string)(null)), table1043, "Then ");
#line hidden
#line 258
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 259
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1044 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1044.AddRow(new string[] {
                            "MASAD1"});
                table1044.AddRow(new string[] {
                            "MASAD2"});
                table1044.AddRow(new string[] {
                            "MASCTY"});
                table1044.AddRow(new string[] {
                            "MASSTC"});
                table1044.AddRow(new string[] {
                            "MASZIP"});
#line 260
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1044, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1045 = new TechTalk.SpecFlow.Table(new string[] {
                            "Line1",
                            "Line2",
                            "City",
                            "Prov",
                            "Postal"});
                table1045.AddRow(new string[] {
                            "555555",
                            "Toronto ON 12345",
                            "LOS ANGELES",
                            "LA",
                            "102030405"});
#line 267
 testRunner.When("the user changes the account primary address as below:", ((string)(null)), table1045, "When ");
#line hidden
#line 270
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1046 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1046.AddRow(new string[] {
                            "MASAD1",
                            "555555 Toronto ON 12345"});
                table1046.AddRow(new string[] {
                            "MASAD2",
                            ""});
                table1046.AddRow(new string[] {
                            "MASCTY",
                            "LOS ANGELES"});
                table1046.AddRow(new string[] {
                            "MASSTC",
                            "LA"});
                table1046.AddRow(new string[] {
                            "MASZIP",
                            "102030405"});
#line 272
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1046, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
