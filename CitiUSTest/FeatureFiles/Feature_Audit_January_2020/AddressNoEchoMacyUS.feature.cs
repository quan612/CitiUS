// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.Feature_Audit_January_2020
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressNoEchoMacyUS")]
    public partial class AddressNoEchoMacyUSFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AddressNoEchoMacyUS.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddressNoEchoMacyUS", "\tTo test specific scenarios related to audit on 21 January 2020", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1115 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table1115.AddRow(new string[] {
                        "DSNB",
                        "2019/08/15"});
#line 6
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table1115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1116 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table1116.AddRow(new string[] {
                        "AMEX",
                        "7800",
                        "DSNB",
                        "SCA3"});
#line 9
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table1116, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4515")]
        public virtual void CITI_4515()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4515", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has MASAD1 does not match Addr1Line2", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1117 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1117.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 16
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1117, "Given ");
#line hidden
#line 19
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1118 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1118.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 21
 testRunner.Then("The account address is as below:", ((string)(null)), table1118, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1119 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1119.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "1111 RIVERSHOW BLVD"});
                table1119.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 14"});
                table1119.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1119.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1119.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 24
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1119, "When ");
#line hidden
#line 31
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1120 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1120.AddRow(new string[] {
                            "APT 14",
                            "1111 RIVERSHOW BLVD",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 32
 testRunner.Then("The account address is as below:", ((string)(null)), table1120, "Then ");
#line hidden
#line 35
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1121 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1121.AddRow(new string[] {
                            "MASAD1"});
                table1121.AddRow(new string[] {
                            "MASAD2"});
                table1121.AddRow(new string[] {
                            "MASCTY"});
                table1121.AddRow(new string[] {
                            "MASSTC"});
                table1121.AddRow(new string[] {
                            "MASZIP"});
#line 38
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1121, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4516")]
        public virtual void CITI_4516()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4516", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has MASAD2 does not match Addr1Line1", ((string[])(null)));
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1122 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1122.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 49
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1122, "Given ");
#line hidden
#line 52
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1123 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1123.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 54
 testRunner.Then("The account address is as below:", ((string)(null)), table1123, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1124 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1124.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "APT 999999999"});
                table1124.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "1416 S GLENDALE AVE"});
                table1124.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1124.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1124.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 57
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1124, "When ");
#line hidden
#line 64
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1125 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1125.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 999999999",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 65
 testRunner.Then("The account address is as below:", ((string)(null)), table1125, "Then ");
#line hidden
#line 68
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1126 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1126.AddRow(new string[] {
                            "MASAD1"});
                table1126.AddRow(new string[] {
                            "MASAD2"});
                table1126.AddRow(new string[] {
                            "MASCTY"});
                table1126.AddRow(new string[] {
                            "MASSTC"});
                table1126.AddRow(new string[] {
                            "MASZIP"});
#line 71
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1126, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4517")]
        public virtual void CITI_4517()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4517", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has MASAD2 does not match Addr1Line1 and MASAD1 does not " +
                    "match Addr1Line2", ((string[])(null)));
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1127 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1127.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 82
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1127, "Given ");
#line hidden
#line 85
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1128 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1128.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 87
 testRunner.Then("The account address is as below:", ((string)(null)), table1128, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1129 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "1111 RIVERSHOW BLVD"});
                table1129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 999999999"});
                table1129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 90
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1129, "When ");
#line hidden
#line 97
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1130 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1130.AddRow(new string[] {
                            "1111 RIVERSHOW BLVD",
                            "APT 999999999",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 98
 testRunner.Then("The account address is as below:", ((string)(null)), table1130, "Then ");
#line hidden
#line 101
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1131 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1131.AddRow(new string[] {
                            "MASAD1"});
                table1131.AddRow(new string[] {
                            "MASAD2"});
                table1131.AddRow(new string[] {
                            "MASCTY"});
                table1131.AddRow(new string[] {
                            "MASSTC"});
                table1131.AddRow(new string[] {
                            "MASZIP"});
#line 104
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1131, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4518")]
        public virtual void CITI_4518()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4518", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has MASAD2 matches Addr1Line1 and MASAD1 matches Addr1Lin" +
                    "e2", ((string[])(null)));
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1132 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1132.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 115
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1132, "Given ");
#line hidden
#line 118
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1133 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1133.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 120
 testRunner.Then("The account address is as below:", ((string)(null)), table1133, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1134 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1134.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "1416 S GLENDALE AVE"});
                table1134.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 14"});
                table1134.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1134.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1134.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 123
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1134, "When ");
#line hidden
#line 130
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1135 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1135.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 131
 testRunner.Then("The account address is as below:", ((string)(null)), table1135, "Then ");
#line hidden
#line 134
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1136 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1136.AddRow(new string[] {
                            "MASAD1"});
                table1136.AddRow(new string[] {
                            "MASAD2"});
                table1136.AddRow(new string[] {
                            "MASCTY"});
                table1136.AddRow(new string[] {
                            "MASSTC"});
                table1136.AddRow(new string[] {
                            "MASZIP"});
#line 137
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1136, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4524")]
        public virtual void CITI_4524()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4524", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has only MASAD1 field code and it matches Addr1Line1", ((string[])(null)));
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1137 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1137.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 148
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1137, "Given ");
#line hidden
#line 151
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1138 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1138.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 153
 testRunner.Then("The account address is as below:", ((string)(null)), table1138, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1139 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1139.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "APT 14"});
                table1139.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1139.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1139.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 156
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1139, "When ");
#line hidden
#line 162
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1140 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1140.AddRow(new string[] {
                            "APT 14",
                            "",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 163
 testRunner.Then("The account address is as below:", ((string)(null)), table1140, "Then ");
#line hidden
#line 166
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 167
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1141 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1141.AddRow(new string[] {
                            "MASAD1"});
                table1141.AddRow(new string[] {
                            "MASAD2"});
                table1141.AddRow(new string[] {
                            "MASCTY"});
                table1141.AddRow(new string[] {
                            "MASSTC"});
                table1141.AddRow(new string[] {
                            "MASZIP"});
#line 169
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1141, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4525")]
        public virtual void CITI_4525()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4525", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has only MASAD1 field code and it does not match Addr1Lin" +
                    "e1", ((string[])(null)));
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1142 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1142.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 180
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1142, "Given ");
#line hidden
#line 183
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 184
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1143 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1143.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 185
 testRunner.Then("The account address is as below:", ((string)(null)), table1143, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1144 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1144.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "9999 RIVERSHOW BLVD"});
                table1144.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1144.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1144.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 188
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1144, "When ");
#line hidden
#line 194
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1145 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1145.AddRow(new string[] {
                            "9999 RIVERSHOW BLVD",
                            "",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 195
 testRunner.Then("The account address is as below:", ((string)(null)), table1145, "Then ");
#line hidden
#line 198
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 199
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1146 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1146.AddRow(new string[] {
                            "MASAD1"});
                table1146.AddRow(new string[] {
                            "MASAD2"});
                table1146.AddRow(new string[] {
                            "MASCTY"});
                table1146.AddRow(new string[] {
                            "MASSTC"});
                table1146.AddRow(new string[] {
                            "MASZIP"});
#line 201
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1146, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4526")]
        public virtual void CITI_4526()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4526", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has only MASAD2 field code and it does not match Addr1Lin" +
                    "e1", ((string[])(null)));
#line 211
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1147 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1147.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 213
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1147, "Given ");
#line hidden
#line 216
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1148 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1148.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 218
 testRunner.Then("The account address is as below:", ((string)(null)), table1148, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1149 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "9999 RIVERSHOW BLVD"});
                table1149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 221
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1149, "When ");
#line hidden
#line 227
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1150 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1150.AddRow(new string[] {
                            "9999 RIVERSHOW BLVD",
                            "",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 228
 testRunner.Then("The account address is as below:", ((string)(null)), table1150, "Then ");
#line hidden
#line 231
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 232
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 233
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1151 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1151.AddRow(new string[] {
                            "MASAD1"});
                table1151.AddRow(new string[] {
                            "MASAD2"});
                table1151.AddRow(new string[] {
                            "MASCTY"});
                table1151.AddRow(new string[] {
                            "MASSTC"});
                table1151.AddRow(new string[] {
                            "MASZIP"});
#line 234
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1151, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4527")]
        public virtual void CITI_4527()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4527", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has only MASAD2 field code and it is blank", ((string[])(null)));
#line 244
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1152 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1152.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 246
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1152, "Given ");
#line hidden
#line 249
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 250
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1153 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1153.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 251
 testRunner.Then("The account address is as below:", ((string)(null)), table1153, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1154 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1154.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            ""});
                table1154.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1154.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1154.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 254
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1154, "When ");
#line hidden
#line 260
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
 testRunner.Then("A general error status happens when processing the row record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 262
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 263
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1155 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1155.AddRow(new string[] {
                            "MASAD1"});
                table1155.AddRow(new string[] {
                            "MASAD2"});
                table1155.AddRow(new string[] {
                            "MASCTY"});
                table1155.AddRow(new string[] {
                            "MASSTC"});
                table1155.AddRow(new string[] {
                            "MASZIP"});
#line 265
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1155, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4528")]
        public virtual void CITI_4528()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4528", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has MASCTY does not match Addr1City", ((string[])(null)));
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1156 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1156.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 276
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1156, "Given ");
#line hidden
#line 279
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 280
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1157 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1157.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 281
 testRunner.Then("The account address is as below:", ((string)(null)), table1157, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1158 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1158.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "1416 S GLENDALE AVE"});
                table1158.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 14"});
                table1158.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "Markham"});
                table1158.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1158.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 284
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1158, "When ");
#line hidden
#line 291
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1159 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1159.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "Markham",
                            "CA",
                            "912053343"});
#line 292
 testRunner.Then("The account address is as below:", ((string)(null)), table1159, "Then ");
#line hidden
#line 295
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 296
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 297
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1160 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1160.AddRow(new string[] {
                            "MASAD1"});
                table1160.AddRow(new string[] {
                            "MASAD2"});
                table1160.AddRow(new string[] {
                            "MASCTY"});
                table1160.AddRow(new string[] {
                            "MASSTC"});
                table1160.AddRow(new string[] {
                            "MASZIP"});
#line 298
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1160, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4529")]
        public virtual void CITI_4529()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4529", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has MASSTC does not match Addr1Prov", ((string[])(null)));
#line 307
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1161 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1161.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 309
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1161, "Given ");
#line hidden
#line 312
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 313
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1162 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1162.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 314
 testRunner.Then("The account address is as below:", ((string)(null)), table1162, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1163 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1163.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "1416 S GLENDALE AVE"});
                table1163.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 14"});
                table1163.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1163.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "FL"});
                table1163.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "91205-3343"});
#line 317
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1163, "When ");
#line hidden
#line 324
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1164 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1164.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "FL",
                            "912053343"});
#line 325
 testRunner.Then("The account address is as below:", ((string)(null)), table1164, "Then ");
#line hidden
#line 328
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 329
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 330
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1165 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1165.AddRow(new string[] {
                            "MASAD1"});
                table1165.AddRow(new string[] {
                            "MASAD2"});
                table1165.AddRow(new string[] {
                            "MASCTY"});
                table1165.AddRow(new string[] {
                            "MASSTC"});
                table1165.AddRow(new string[] {
                            "MASZIP"});
#line 331
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1165, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4530")]
        public virtual void CITI_4530()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4530", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy US that has MASZIP does not match Addr1Postal", ((string[])(null)));
#line 340
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1166 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1166.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 342
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1166, "Given ");
#line hidden
#line 345
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 346
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1167 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1167.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 347
 testRunner.Then("The account address is as below:", ((string)(null)), table1167, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1168 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1168.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "1416 S GLENDALE AVE"});
                table1168.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 14"});
                table1168.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1168.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "CA"});
                table1168.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "12345"});
#line 350
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1168, "When ");
#line hidden
#line 357
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1169 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1169.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "12345"});
#line 358
 testRunner.Then("The account address is as below:", ((string)(null)), table1169, "Then ");
#line hidden
#line 361
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 362
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 363
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1170 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1170.AddRow(new string[] {
                            "MASAD1"});
                table1170.AddRow(new string[] {
                            "MASAD2"});
                table1170.AddRow(new string[] {
                            "MASCTY"});
                table1170.AddRow(new string[] {
                            "MASSTC"});
                table1170.AddRow(new string[] {
                            "MASZIP"});
#line 364
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1170, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4548")]
        public virtual void CITI_4548()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4548", "Verify the Macy US address update is sent to Citi if the changes are made from us" +
                    "er", ((string[])(null)));
#line 373
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1171 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1171.AddRow(new string[] {
                            "1416 S GLENDALE AVE",
                            "APT 14",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 375
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1171, "Given ");
#line hidden
#line 378
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 379
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1172 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1172.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "CA",
                            "912053343"});
#line 380
 testRunner.Then("The account address is as below:", ((string)(null)), table1172, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1173 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1173.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "1416 S GLENDALE AVE"});
                table1173.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "APT 14"});
                table1173.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "GLENDALE"});
                table1173.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "NY"});
                table1173.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "12345"});
#line 383
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1173, "When ");
#line hidden
#line 390
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1174 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1174.AddRow(new string[] {
                            "APT 14",
                            "1416 S GLENDALE AVE",
                            "GLENDALE",
                            "NY",
                            "12345"});
#line 391
 testRunner.Then("The account address is as below:", ((string)(null)), table1174, "Then ");
#line hidden
#line 394
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 395
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 396
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1175 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1175.AddRow(new string[] {
                            "MASAD1"});
                table1175.AddRow(new string[] {
                            "MASAD2"});
                table1175.AddRow(new string[] {
                            "MASCTY"});
                table1175.AddRow(new string[] {
                            "MASSTC"});
                table1175.AddRow(new string[] {
                            "MASZIP"});
#line 397
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1175, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1176 = new TechTalk.SpecFlow.Table(new string[] {
                            "Line1",
                            "Line2",
                            "City",
                            "Prov",
                            "Postal"});
                table1176.AddRow(new string[] {
                            "UNIT 9",
                            "1991 THAT STREET",
                            "MINESOTA",
                            "MN",
                            "55001"});
#line 404
 testRunner.When("the user changes the account primary address as below:", ((string)(null)), table1176, "When ");
#line hidden
#line 407
 testRunner.And("The user generates an outbound maintenance file for DSNB_POST_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 408
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1177 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1177.AddRow(new string[] {
                            "MASAD1",
                            "UNIT 9 1991 THAT STREET"});
                table1177.AddRow(new string[] {
                            "MASAD2",
                            ""});
                table1177.AddRow(new string[] {
                            "MASCTY",
                            "MINESOTA"});
                table1177.AddRow(new string[] {
                            "MASSTC",
                            "MN"});
                table1177.AddRow(new string[] {
                            "MASZIP",
                            "55001"});
#line 409
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1177, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
