// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.Feature_Audit_January_2020
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PhonesIndicator")]
    [NUnit.Framework.CategoryAttribute("OutboundMaintenance")]
    [NUnit.Framework.CategoryAttribute("Audit")]
    public partial class PhonesIndicatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "OutboundMaintenance",
                "Audit"};
        
#line 1 "PhonesIndicator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PhonesIndicator", "\tTo test specific scenarios related to audit on 21 January 2020", ProgrammingLanguage.CSharp, new string[] {
                        "OutboundMaintenance",
                        "Audit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1279 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table1279.AddRow(new string[] {
                        "OILS",
                        "2020/01/18"});
#line 7
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table1279, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1280 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table1280.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 10
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table1280, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4449")]
        public virtual void CITI_4449()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4449", "Audit January 20 Sending of bad phone in case the number is known by Citi", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1281 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table1281.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 16
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1281, "Given ");
#line hidden
#line 19
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1282 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1282.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table1282.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table1282.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table1282.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table1282.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 21
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1282, "When ");
#line hidden
#line 28
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("the user changes the phone number 6479994444 to status Wrong Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1283 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1283.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table1283.AddRow(new string[] {
                            "MASRPF",
                            "N"});
#line 32
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1283, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4450")]
        public virtual void CITI_4450()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4450", "Audit January 20 Sending of bad phone in case the number is not known by Citi", ((string[])(null)));
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1284 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table1284.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 40
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1284, "Given ");
#line hidden
#line 43
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1285 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1285.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table1285.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table1285.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table1285.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table1285.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 45
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1285, "When ");
#line hidden
#line 52
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("the user adds a new number 6479995555 with status Wireless location Home service " +
                        "Landline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1286 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1286.AddRow(new string[] {
                            "MASHPH"});
                table1286.AddRow(new string[] {
                            "MASHPF"});
                table1286.AddRow(new string[] {
                            "MASOPH"});
                table1286.AddRow(new string[] {
                            "MASOPF"});
                table1286.AddRow(new string[] {
                            "MASCPN"});
                table1286.AddRow(new string[] {
                            "MASCPI"});
                table1286.AddRow(new string[] {
                            "MASRPH"});
                table1286.AddRow(new string[] {
                            "MASRPF"});
#line 56
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1286, "Then ");
#line hidden
#line 66
 testRunner.When("the user changes the phone number 6479995555 to status Wrong Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1287 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1287.AddRow(new string[] {
                            "MASHPH"});
                table1287.AddRow(new string[] {
                            "MASHPF"});
                table1287.AddRow(new string[] {
                            "MASOPH"});
                table1287.AddRow(new string[] {
                            "MASOPF"});
                table1287.AddRow(new string[] {
                            "MASCPN"});
                table1287.AddRow(new string[] {
                            "MASCPI"});
                table1287.AddRow(new string[] {
                            "MASRPH"});
                table1287.AddRow(new string[] {
                            "MASRPF"});
#line 69
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1287, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4451")]
        public virtual void CITI_4451()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4451", "Audit January 20 Sending of good phone in case there is no good phone of the same" +
                    " type and the good phone is verified as RPC", ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1288 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table1288.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "6479992222",
                            "N"});
#line 83
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1288, "Given ");
#line hidden
#line 86
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1289 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1289.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table1289.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "N"});
                table1289.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table1289.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "N"});
                table1289.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 88
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1289, "When ");
#line hidden
#line 95
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1290 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1290.AddRow(new string[] {
                            "MASHPH"});
                table1290.AddRow(new string[] {
                            "MASHPF"});
                table1290.AddRow(new string[] {
                            "MASOPH"});
                table1290.AddRow(new string[] {
                            "MASOPF"});
                table1290.AddRow(new string[] {
                            "MASCPN"});
                table1290.AddRow(new string[] {
                            "MASCPI"});
                table1290.AddRow(new string[] {
                            "MASRPH"});
                table1290.AddRow(new string[] {
                            "MASRPF"});
#line 98
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1290, "Then ");
#line hidden
#line 108
 testRunner.When("the user adds a new number 6479995555 with status Wireless location Home service " +
                        "Mobile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
 testRunner.And("the user creates a call record for phone number 6479995555 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1291 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1291.AddRow(new string[] {
                            "MASCPN",
                            "6479995555"});
                table1291.AddRow(new string[] {
                            "MASCPI",
                            "Y"});
#line 112
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1291, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4452")]
        public virtual void CITI_4452()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4452", "Audit January 20 Sending of good phone in case there is no good phone of the same" +
                    " type and the good phone is not verified as RPC", ((string[])(null)));
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1292 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table1292.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "6479992222",
                            "N"});
#line 120
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1292, "Given ");
#line hidden
#line 123
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1293 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table1293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "N"});
                table1293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table1293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "N"});
                table1293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 125
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1293, "When ");
#line hidden
#line 132
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1294 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1294.AddRow(new string[] {
                            "MASHPH"});
                table1294.AddRow(new string[] {
                            "MASHPF"});
                table1294.AddRow(new string[] {
                            "MASOPH"});
                table1294.AddRow(new string[] {
                            "MASOPF"});
                table1294.AddRow(new string[] {
                            "MASCPN"});
                table1294.AddRow(new string[] {
                            "MASCPI"});
                table1294.AddRow(new string[] {
                            "MASRPH"});
                table1294.AddRow(new string[] {
                            "MASRPF"});
#line 135
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1294, "Then ");
#line hidden
#line 145
 testRunner.When("the user adds a new number 6479995555 with status Wireless location Home service " +
                        "Mobile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
 testRunner.And("the user creates a call record for phone number 6479995555 with Right Party Conta" +
                        "ct as false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1295 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1295.AddRow(new string[] {
                            "MASHPH"});
                table1295.AddRow(new string[] {
                            "MASHPF"});
                table1295.AddRow(new string[] {
                            "MASOPH"});
                table1295.AddRow(new string[] {
                            "MASOPF"});
                table1295.AddRow(new string[] {
                            "MASCPN"});
                table1295.AddRow(new string[] {
                            "MASCPI"});
                table1295.AddRow(new string[] {
                            "MASRPH"});
                table1295.AddRow(new string[] {
                            "MASRPF"});
#line 149
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1295, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4454")]
        public virtual void CITI_4454()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4454", "Audit January 20 Sending of good phone in case there was already a good phone of " +
                    "the same type (OILS)", ((string[])(null)));
#line 161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1296 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table1296.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 163
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1296, "Given ");
#line hidden
#line 166
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 167
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1297 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1297.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table1297.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table1297.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table1297.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table1297.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 168
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1297, "When ");
#line hidden
#line 175
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 176
 testRunner.When("the user adds a new number 6479995555 with status Wireless location Home service " +
                        "Mobile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 177
 testRunner.And("the user creates a call record for phone number 6479995555 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1298 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1298.AddRow(new string[] {
                            "MASHPH"});
                table1298.AddRow(new string[] {
                            "MASHPF"});
                table1298.AddRow(new string[] {
                            "MASOPH"});
                table1298.AddRow(new string[] {
                            "MASOPF"});
                table1298.AddRow(new string[] {
                            "MASCPN"});
                table1298.AddRow(new string[] {
                            "MASCPI"});
                table1298.AddRow(new string[] {
                            "MASRPH"});
                table1298.AddRow(new string[] {
                            "MASRPF"});
#line 180
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1298, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4455")]
        public virtual void CITI_4455()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4455", "Audit January 20 Sending of 94 note code in case a number is changed from good to" +
                    " bad", ((string[])(null)));
#line 192
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1299 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table1299.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 194
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1299, "Given ");
#line hidden
#line 197
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1300 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1300.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table1300.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table1300.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table1300.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table1300.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 199
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1300, "When ");
#line hidden
#line 206
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.When("the user changes the phone number 6479991111 to status Verbal Do Not Call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 208
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1301 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1301.AddRow(new string[] {
                            "MASHPH",
                            "6479991111"});
                table1301.AddRow(new string[] {
                            "MASHPF",
                            "X"});
#line 210
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1301, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4456")]
        public virtual void CITI_4456()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4456", "Audit January 20 Sending of 94 note code in case a number is changed from good to" +
                    " bad the 2nd time", ((string[])(null)));
#line 216
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1302 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table1302.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 218
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1302, "Given ");
#line hidden
#line 221
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 222
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1303 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1303.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table1303.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table1303.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table1303.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table1303.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 223
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1303, "When ");
#line hidden
#line 230
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 231
 testRunner.When("the user changes the phone number 6479991111 to status Verbal Do Not Call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 232
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 233
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1304 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1304.AddRow(new string[] {
                            "MASHPH",
                            "6479991111"});
                table1304.AddRow(new string[] {
                            "MASHPF",
                            "X"});
#line 234
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1304, "Then ");
#line hidden
#line 238
 testRunner.When("the user creates a call record for phone number 6479991111 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 239
 testRunner.When("the user changes the phone number 6479991111 to status Active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 240
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1305 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1305.AddRow(new string[] {
                            "MASHPH",
                            "6479991111"});
                table1305.AddRow(new string[] {
                            "MASHPF",
                            "Y"});
#line 242
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1305, "Then ");
#line hidden
#line 246
 testRunner.When("the user changes the phone number 6479991111 to status Verbal Do Not Call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 247
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 248
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1306 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1306.AddRow(new string[] {
                            "MASHPH",
                            "6479991111"});
                table1306.AddRow(new string[] {
                            "MASHPF",
                            "X"});
#line 249
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1306, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4485")]
        public virtual void CITI_4485()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4485", "Verify the sending of 94 note when receiving a bad phone from Citi MT", ((string[])(null)));
#line 255
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1307 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table1307.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 257
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1307, "Given ");
#line hidden
#line 260
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1308 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1308.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table1308.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "D"});
                table1308.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table1308.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
#line 262
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1308, "When ");
#line hidden
#line 268
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 269
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 270
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1309 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1309.AddRow(new string[] {
                            "MASHPH"});
                table1309.AddRow(new string[] {
                            "MASHPF"});
                table1309.AddRow(new string[] {
                            "MASOPH"});
                table1309.AddRow(new string[] {
                            "MASOPF"});
#line 271
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1309, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1310 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction Code"});
                table1310.AddRow(new string[] {
                            "94"});
#line 277
 testRunner.Then("The comment records are not sent in the outbound maintenance file", ((string)(null)), table1310, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
