// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.Feature_Audit_January_2020
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddressNoEchoMacyCanada")]
    public partial class AddressNoEchoMacyCanadaFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AddressNoEchoMacyCanada.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddressNoEchoMacyCanada", "\tTo test specific scenarios related to audit on 21 January 2020", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1076 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table1076.AddRow(new string[] {
                        "DSNB",
                        "2019/08/15"});
#line 6
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table1076, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1077 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table1077.AddRow(new string[] {
                        "AMEX",
                        "7700",
                        "DSNB",
                        "0521"});
#line 9
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table1077, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4514")]
        public virtual void CITI_4514()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4514", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy Canada that has MASSTC does not match province part in Addr1Line2" +
                    "", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1078 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1078.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "XN",
                            "00000"});
#line 16
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1078, "Given ");
#line hidden
#line 19
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1079 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1079.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "NS",
                            "00000"});
#line 21
 testRunner.Then("The account address is as below:", ((string)(null)), table1079, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1080 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1080.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "UNIT 8"});
                table1080.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "DARTMOUTH NS B1B2B3"});
                table1080.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "CANADA"});
                table1080.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "XK"});
                table1080.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "00000"});
#line 24
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1080, "When ");
#line hidden
#line 31
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1081 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1081.AddRow(new string[] {
                            "UNIT 8",
                            "",
                            "DARTMOUTH",
                            "QC",
                            "B1B2B3"});
#line 32
 testRunner.Then("The account address is as below:", ((string)(null)), table1081, "Then ");
#line hidden
#line 35
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.When("The user generates an outbound maintenance file for DSNB_PRE_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1082 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1082.AddRow(new string[] {
                            "MASAD1"});
                table1082.AddRow(new string[] {
                            "MASAD2"});
                table1082.AddRow(new string[] {
                            "MASCTY"});
                table1082.AddRow(new string[] {
                            "MASSTC"});
                table1082.AddRow(new string[] {
                            "MASZIP"});
#line 38
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1082, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4519")]
        public virtual void CITI_4519()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4519", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy Canada that has MASAD2 city part does not match city part in Addr" +
                    "1Line2", ((string[])(null)));
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1083 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1083.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "XN",
                            "00000"});
#line 49
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1083, "Given ");
#line hidden
#line 52
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1084 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1084.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "NS",
                            "00000"});
#line 54
 testRunner.Then("The account address is as below:", ((string)(null)), table1084, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1085 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1085.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "UNIT 8"});
                table1085.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "MISSISSAUGA NS B1B2B3"});
                table1085.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "CANADA"});
                table1085.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "XN"});
                table1085.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "00000"});
#line 57
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1085, "When ");
#line hidden
#line 64
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1086 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1086.AddRow(new string[] {
                            "UNIT 8",
                            "",
                            "MISSISSAUGA",
                            "NS",
                            "B1B2B3"});
#line 65
 testRunner.Then("The account address is as below:", ((string)(null)), table1086, "Then ");
#line hidden
#line 68
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.When("The user generates an outbound maintenance file for DSNB_PRE_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1087 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1087.AddRow(new string[] {
                            "MASAD1"});
                table1087.AddRow(new string[] {
                            "MASAD2"});
                table1087.AddRow(new string[] {
                            "MASCTY"});
                table1087.AddRow(new string[] {
                            "MASSTC"});
                table1087.AddRow(new string[] {
                            "MASZIP"});
#line 71
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1087, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4520")]
        public virtual void CITI_4520()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4520", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy Canada that has MASAD2 province part does not match province part" +
                    " in Addr1Line2", ((string[])(null)));
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1088 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1088.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "XN",
                            "00000"});
#line 82
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1088, "Given ");
#line hidden
#line 85
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1089 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1089.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "NS",
                            "00000"});
#line 87
 testRunner.Then("The account address is as below:", ((string)(null)), table1089, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1090 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1090.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "UNIT 8"});
                table1090.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "DARTMOUTH QC B1B2B3"});
                table1090.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "CANADA"});
                table1090.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "XN"});
                table1090.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "00000"});
#line 90
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1090, "When ");
#line hidden
#line 97
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1091 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1091.AddRow(new string[] {
                            "UNIT 8",
                            "",
                            "DARTMOUTH",
                            "QC",
                            "B1B2B3"});
#line 98
 testRunner.Then("The account address is as below:", ((string)(null)), table1091, "Then ");
#line hidden
#line 101
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.When("The user generates an outbound maintenance file for DSNB_PRE_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1092 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1092.AddRow(new string[] {
                            "MASAD1"});
                table1092.AddRow(new string[] {
                            "MASAD2"});
                table1092.AddRow(new string[] {
                            "MASCTY"});
                table1092.AddRow(new string[] {
                            "MASSTC"});
                table1092.AddRow(new string[] {
                            "MASZIP"});
#line 104
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1092, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4521")]
        public virtual void CITI_4521()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4521", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy Canada that has MASAD2 zip part does not match zip part in Addr1L" +
                    "ine2", ((string[])(null)));
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1093 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1093.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "XN",
                            "00000"});
#line 115
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1093, "Given ");
#line hidden
#line 118
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1094 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1094.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "NS",
                            "00000"});
#line 120
 testRunner.Then("The account address is as below:", ((string)(null)), table1094, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1095 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1095.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "UNIT 8"});
                table1095.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "DARTMOUTH NS T1T2T3"});
                table1095.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "CANADA"});
                table1095.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "XN"});
                table1095.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "00000"});
#line 123
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1095, "When ");
#line hidden
#line 130
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1096 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1096.AddRow(new string[] {
                            "UNIT 8",
                            "",
                            "DARTMOUTH",
                            "NS",
                            "T1T2T3"});
#line 131
 testRunner.Then("The account address is as below:", ((string)(null)), table1096, "Then ");
#line hidden
#line 134
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
 testRunner.When("The user generates an outbound maintenance file for DSNB_PRE_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1097 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1097.AddRow(new string[] {
                            "MASAD1"});
                table1097.AddRow(new string[] {
                            "MASAD2"});
                table1097.AddRow(new string[] {
                            "MASCTY"});
                table1097.AddRow(new string[] {
                            "MASSTC"});
                table1097.AddRow(new string[] {
                            "MASZIP"});
#line 137
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1097, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4522")]
        public virtual void CITI_4522()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4522", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy Canada that has MASCTY does not match Addr1Country", ((string[])(null)));
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1098 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1098.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "XN",
                            "00000"});
#line 148
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1098, "Given ");
#line hidden
#line 151
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1099 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1099.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "NS",
                            "00000"});
#line 153
 testRunner.Then("The account address is as below:", ((string)(null)), table1099, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1100 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1100.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "UNIT 8"});
                table1100.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "DARTMOUTH NS B1B2B3"});
                table1100.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "Iran"});
                table1100.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "XN"});
                table1100.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "00000"});
#line 156
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1100, "When ");
#line hidden
#line 163
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal",
                            "Addr1Country"});
                table1101.AddRow(new string[] {
                            "UNIT 8",
                            "",
                            "DARTMOUTH",
                            "NS",
                            "B1B2B3",
                            "Iran"});
#line 164
 testRunner.Then("The account address is as below:", ((string)(null)), table1101, "Then ");
#line hidden
#line 167
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.When("The user generates an outbound maintenance file for DSNB_PRE_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 169
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1102 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1102.AddRow(new string[] {
                            "MASAD1"});
                table1102.AddRow(new string[] {
                            "MASAD2"});
                table1102.AddRow(new string[] {
                            "MASCTY"});
                table1102.AddRow(new string[] {
                            "MASSTC"});
                table1102.AddRow(new string[] {
                            "MASZIP"});
#line 170
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1102, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4523")]
        public virtual void CITI_4523()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4523", "Verify there is no echo back when the primary address is changed by processing MT" +
                    " file for Macy Canada that has MASZIP does not match Addr1Postal", ((string[])(null)));
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1103 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1103.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "XN",
                            "00000"});
#line 181
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1103, "Given ");
#line hidden
#line 184
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 185
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1104 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1104.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "NS",
                            "00000"});
#line 186
 testRunner.Then("The account address is as below:", ((string)(null)), table1104, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "UNIT 8"});
                table1105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "DARTMOUTH NS B1B2B3"});
                table1105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "CANADA"});
                table1105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "XN"});
                table1105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "589230245"});
#line 189
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1105, "When ");
#line hidden
#line 196
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1106 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1106.AddRow(new string[] {
                            "UNIT 8",
                            "",
                            "DARTMOUTH",
                            "NS",
                            "B1B2B3"});
#line 197
 testRunner.Then("The account address is as below:", ((string)(null)), table1106, "Then ");
#line hidden
#line 200
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 201
 testRunner.When("The user generates an outbound maintenance file for DSNB_PRE_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1107 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1107.AddRow(new string[] {
                            "MASAD1"});
                table1107.AddRow(new string[] {
                            "MASAD2"});
                table1107.AddRow(new string[] {
                            "MASCTY"});
                table1107.AddRow(new string[] {
                            "MASSTC"});
                table1107.AddRow(new string[] {
                            "MASZIP"});
#line 203
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1107, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4547")]
        public virtual void CITI_4547()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4547", "Verify the Macy Canada address update is sent to Citi if the changes are made fro" +
                    "m user", ((string[])(null)));
#line 212
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Address1",
                            "Address2",
                            "City",
                            "State",
                            "ZipCode"});
                table1108.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "XN",
                            "00000"});
#line 214
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table1108, "Given ");
#line hidden
#line 217
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 218
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1109.AddRow(new string[] {
                            "UNIT 8 850 RADDALL AVE",
                            "DARTMOUTH NS B1B2B3",
                            "CANADA",
                            "NS",
                            "00000"});
#line 219
 testRunner.Then("The account address is as below:", ((string)(null)), table1109, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table1110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD1",
                            "UNIT 8"});
                table1110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASAD2",
                            "DARTMOUTH NS B1B2B3"});
                table1110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCTY",
                            "CANADA"});
                table1110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASSTC",
                            "XN"});
                table1110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASZIP",
                            "589230245"});
#line 222
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table1110, "When ");
#line hidden
#line 229
 testRunner.When("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Addr1Line1",
                            "Addr1Line2",
                            "Addr1City",
                            "Addr1Prov",
                            "Addr1Postal"});
                table1111.AddRow(new string[] {
                            "UNIT 8",
                            "",
                            "DARTMOUTH",
                            "NS",
                            "B1B2B3"});
#line 230
 testRunner.Then("The account address is as below:", ((string)(null)), table1111, "Then ");
#line hidden
#line 233
 testRunner.When("The user applies an action code 662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
 testRunner.When("The user generates an outbound maintenance file for DSNB_PRE_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 235
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1112 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table1112.AddRow(new string[] {
                            "MASAD1"});
                table1112.AddRow(new string[] {
                            "MASAD2"});
                table1112.AddRow(new string[] {
                            "MASCTY"});
                table1112.AddRow(new string[] {
                            "MASSTC"});
                table1112.AddRow(new string[] {
                            "MASZIP"});
#line 236
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table1112, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Line1",
                            "Line2",
                            "City",
                            "Prov",
                            "Postal"});
                table1113.AddRow(new string[] {
                            "UNIT 9",
                            "",
                            "TORONTO",
                            "ON",
                            "M1M1M1"});
#line 243
 testRunner.When("the user changes the account primary address as below:", ((string)(null)), table1113, "When ");
#line hidden
#line 246
 testRunner.And("The user generates an outbound maintenance file for DSNB_PRE_VISA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1114 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table1114.AddRow(new string[] {
                            "MASAD1",
                            "UNIT 9"});
                table1114.AddRow(new string[] {
                            "MASAD2",
                            "TORONTO ON M1M1M1"});
                table1114.AddRow(new string[] {
                            "MASCTY",
                            "Canada"});
                table1114.AddRow(new string[] {
                            "MASSTC",
                            "XO"});
                table1114.AddRow(new string[] {
                            "MASZIP",
                            "00000"});
#line 248
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table1114, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
