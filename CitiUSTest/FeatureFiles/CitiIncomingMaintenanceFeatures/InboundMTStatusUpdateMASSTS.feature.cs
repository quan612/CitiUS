// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiIncomingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("InboundMTStatusUpdateMASSTS")]
    public partial class InboundMTStatusUpdateMASSTSFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "InboundMTStatusUpdateMASSTS.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "InboundMTStatusUpdateMASSTS", "\tTo test the loading of inbound MT with field code MASSTS", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1064")]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PC2", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PC7", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "P3L", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "P32", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "327", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "322", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "342", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "317", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "312", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "307", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "302", null)]
        public virtual void CITI_1064(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1064", "Verify the processing of MT file for account has MTSSTS received from Citi and ac" +
                    "tion code 642 is applied", exampleTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
  testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
     testRunner.And(string.Format("The user creates a Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
  testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
  testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
  testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.Then("The action code 642 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1065")]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "303", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "308", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "313", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "343", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "323", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "328", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "P33", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "P3M", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PC8", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PC3", null)]
        public virtual void CITI_1065(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1065", "Verify the processing of MT file for account has MTSSTS received from Citi and ac" +
                    "tion code 643 is applied", exampleTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
  testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
  testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
     testRunner.And(string.Format("The user creates a Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
  testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
  testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
  testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.Then("The action code 643 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1066")]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PC4", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PC9", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "P3N", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "P34", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "329", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "324", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "344", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "319", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "314", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "309", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "304", null)]
        public virtual void CITI_1066(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1066", "\tVerify the processing of MT file for account has MTSSTS received from Citi and a" +
                    "ction code 644 is applied", exampleTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 63
  testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
  testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
   testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
      testRunner.And(string.Format("The user creates a Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
   testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
   testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
  testRunner.Then("The action code 644 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1067")]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "350", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "351", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "352", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "353", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "354", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "355", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "358", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "P35", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "P3R", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PD1", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PD2", null)]
        public virtual void CITI_1067(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1067", "\tVerify the processing of MT file for account has MTSSTS received from Citi and a" +
                    "ction code 645 is applied", exampleTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 91
  testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
  testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
   testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
      testRunner.And(string.Format("The user creates a Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
   testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
   testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
  testRunner.Then("The action code 645 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1068")]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PD3", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PJ3", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PA3", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "PB3", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "35A", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "35B", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "35C", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "35D", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "35E", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "35F", null)]
        public virtual void CITI_1068(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1068", "\tVerify the processing of MT file for account has MTSSTS received from Citi and a" +
                    "ction code 646 is applied (only applied to CRET)", exampleTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 119
  testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
  testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
   testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
      testRunner.And(string.Format("The user creates the Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
   testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
   testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
  testRunner.Then("The action code 646 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
   testRunner.And("The account is put to support queue CSSIFExceptionCiti", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1069")]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "373", null)]
        public virtual void CITI_1069(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1069", "\tVerify the processing of MT file for account has MTSSTS received from Citi and a" +
                    "ction code 647 is applied", exampleTags);
#line 145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 147
  testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 148
  testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
   testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
      testRunner.And(string.Format("The user creates a Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
   testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
   testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
  testRunner.Then("The action code 647 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
  testRunner.Then("The account is put to support queue CSRecallMonitorCiti", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1070")]
        [NUnit.Framework.TestCaseAttribute("2019/09/13", "MT", "MASSTS", "375", null)]
        public virtual void CITI_1070(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1070", "\tVerify the processing of MT file for account has MTSSTS received from Citi and a" +
                    "ction code 648 is applied", exampleTags);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 166
  testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
  testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
   testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
      testRunner.And(string.Format("The user creates a Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
   testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
   testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
  testRunner.Then("The action code 648 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
  testRunner.Then("The account is put to support queue CSRecallMonitorCiti", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1045")]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "301", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "302", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "303", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "306", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "307", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "308", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "311", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "312", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "313", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "316", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "317", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "318", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "321", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "322", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "323", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "326", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "327", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "328", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "P31", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "PC1", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "PC6", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "P3K", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "341", null)]
        public virtual void CITI_1045(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1045", "\tVerify the processing of MT file for account that has MASSTS received from Citi " +
                    "and were charged off", exampleTags);
#line 183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 185
  testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account status"});
                table97.AddRow(new string[] {
                            "000"});
#line 186
   testRunner.And("The user modifies the account record in DL file with credentials:", ((string)(null)), table97, "And ");
#line hidden
#line 190
  testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
   testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
      testRunner.And(string.Format("The user creates a Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
   testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
   testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
  testRunner.Then(string.Format("The account extras information: Text7 is {0}", newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
   testRunner.And("The action code 641 is NOT applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
   testRunner.And("The account is not moved to any support queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI-1046")]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "300", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "305", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "310", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "315", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "320", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "325", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "340", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "P30", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "PC0", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "PC5", null)]
        [NUnit.Framework.TestCaseAttribute("2019/09/16", "MT", "MASSTS", "P3J", null)]
        public virtual void CITI_1046(string transactionDateTime, string transactionCode, string fieldCode, string newValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI-1046", "\tVerify the processing of MT file for account that has MASSTS received from Citi " +
                    "and were NOT charged off (to be moved to Support)", exampleTags);
#line 232
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 234
  testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "Account status"});
                table98.AddRow(new string[] {
                            "000"});
#line 235
   testRunner.And("The user modifies the account record in DL file with credentials:", ((string)(null)), table98, "And ");
#line hidden
#line 239
  testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 240
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
   testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
      testRunner.And(string.Format("The user creates a Citi Inbound MT File with {0}, {1}, {2}, {3}", transactionDateTime, transactionCode, fieldCode, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
   testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
   testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 245
   testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
  testRunner.Then(string.Format("The account extras information: Text7 is {0}", newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 248
   testRunner.And("The action code 641 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
   testRunner.And("The account is put to support queue CSSIFExceptionsCiti", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
