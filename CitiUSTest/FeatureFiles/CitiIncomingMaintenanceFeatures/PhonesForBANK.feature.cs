// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiIncomingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("InboundMTPhonesForBANK")]
    [NUnit.Framework.CategoryAttribute("InboundMaintenance")]
    [NUnit.Framework.CategoryAttribute("Phones")]
    [NUnit.Framework.CategoryAttribute("BANK")]
    [NUnit.Framework.CategoryAttribute("epic:84633")]
    public partial class InboundMTPhonesForBANKFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "InboundMaintenance",
                "Phones",
                "BANK",
                "epic:84633"};
        
#line 1 "PhonesForBANK.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "InboundMTPhonesForBANK", "\tTo test the updating of phone for account through Maintenance file for Citi BANK" +
                    " accounts\t", ProgrammingLanguage.CSharp, new string[] {
                        "InboundMaintenance",
                        "Phones",
                        "BANK",
                        "epic:84633"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table142.AddRow(new string[] {
                        "BANK",
                        "Yesterday"});
#line 7
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table142, "And ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table143.AddRow(new string[] {
                        "CONS",
                        "433902",
                        "BANK",
                        "GL03"});
#line 10
 testRunner.And("The user modifies the account record in DL file with credentials:", ((string)(null)), table143, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4283")]
        public virtual void CITI_4283()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4283", "No phone in ARx, receiving Citi MT with all bad phone indicators (BANK)", ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table144.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
#line 17
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table144, "Given ");
#line hidden
#line 20
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table145.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table145.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "B"});
                table145.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table145.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "B"});
                table145.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table145.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "B"});
#line 23
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table145, "When ");
#line hidden
#line 31
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table146.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table146.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table146.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
#line 34
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table146, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table147.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "B",
                            "V",
                            "Home",
                            "Landline"});
                table147.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "B",
                            "V",
                            "Work",
                            "Landline"});
                table147.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "B",
                            "V",
                            "Home",
                            "Mobile"});
#line 39
 testRunner.Then("The Citi Phone tracker table for the account is as below:", ((string)(null)), table147, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4284")]
        public virtual void CITI_4284()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4284", "No phone in ARx, receiving Citi MT with all good phone indicators (BANK)", ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table148.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
#line 48
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table148, "Given ");
#line hidden
#line 51
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table149.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 54
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table149, "When ");
#line hidden
#line 62
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table150.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "N",
                            "Home",
                            "Landline"});
                table150.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "A",
                            "Work",
                            "Landline"});
                table150.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 64
 testRunner.Then("The Citi Phone tracker table for the account is as below:", ((string)(null)), table150, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4285")]
        public virtual void CITI_4285()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4285", "No phone in ARx, receiving Citi MT with bad Home Written indicator applies to all" +
                    " phones (BANK)", ((string[])(null)));
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table151.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
#line 73
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table151, "Given ");
#line hidden
#line 76
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table152.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table152.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "W"});
                table152.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table152.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "A"});
                table152.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table152.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "A"});
#line 79
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table152, "When ");
#line hidden
#line 87
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table153.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Home",
                            "Landline"});
                table153.AddRow(new string[] {
                            "6479992222",
                            "X",
                            "2",
                            "Work",
                            "Landline"});
                table153.AddRow(new string[] {
                            "6479993333",
                            "X",
                            "18",
                            "Home",
                            "Mobile"});
#line 89
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table153, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table154.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "W",
                            "X",
                            "Home",
                            "Landline"});
                table154.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table154.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Home",
                            "Mobile"});
#line 94
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table154, "And ");
#line hidden
#line 99
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4286")]
        public virtual void CITI_4286()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4286", "No phone in ARx, receiving Citi MT with bad Work Verbal indicator applies to all " +
                    "phones (BANK)", ((string[])(null)));
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table155.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
#line 104
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table155, "Given ");
#line hidden
#line 107
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table156.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table156.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "A"});
                table156.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table156.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "V"});
                table156.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table156.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "A"});
#line 110
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table156, "When ");
#line hidden
#line 118
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table157.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table157.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table157.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
#line 120
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table157, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table158.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table158.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "V",
                            "V",
                            "Work",
                            "Landline"});
                table158.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Home",
                            "Mobile"});
#line 125
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table158, "And ");
#line hidden
#line 130
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4287")]
        public virtual void CITI_4287()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4287", "Home Work Cell are good from DL, receiving Citi MT with Home Verbal DNC (BANK)", ((string[])(null)));
#line 133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table159.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 135
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table159, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table160.AddRow(new string[] {
                            "6479993333",
                            "A"});
#line 138
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table160, "Given ");
#line hidden
#line 141
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table161.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table161.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "B"});
                table161.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table161.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "N"});
                table161.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table161.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 144
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table161, "When ");
#line hidden
#line 152
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table162.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table162.AddRow(new string[] {
                            "6479992222",
                            "N",
                            "2",
                            "Work",
                            "Landline"});
                table162.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
#line 154
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table162, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table163.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "B",
                            "V",
                            "Home",
                            "Landline"});
                table163.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "N",
                            "N",
                            "Work",
                            "Landline"});
                table163.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 159
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table163, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4288")]
        public virtual void CITI_4288()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4288", "Home Work Cell are good from DL, receiving Citi MT with Work Verbal DNC (BANK)", ((string[])(null)));
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table164.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 168
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table164, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table165.AddRow(new string[] {
                            "6479993333",
                            "A"});
#line 171
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table165, "Given ");
#line hidden
#line 174
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table166.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table166.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table166.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table166.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "X"});
                table166.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table166.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 177
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table166, "When ");
#line hidden
#line 185
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 186
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table167.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "1",
                            "Home",
                            "Landline"});
                table167.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table167.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
#line 187
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table167, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table168.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "N",
                            "Home",
                            "Landline"});
                table168.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "X",
                            "V",
                            "Work",
                            "Landline"});
                table168.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 192
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table168, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4289")]
        public virtual void CITI_4289()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4289", "Home Work Cell are good from DL, receiving Citi MT with Cell Written DNC applies " +
                    "to all phone statuses (BANK)", ((string[])(null)));
#line 199
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table169.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 201
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table169, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table170.AddRow(new string[] {
                            "6479993333",
                            "E"});
#line 204
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table170, "Given ");
#line hidden
#line 207
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 208
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table171.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table171.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table171.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table171.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table171.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table171.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "W"});
#line 210
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table171, "When ");
#line hidden
#line 218
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table172.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Home",
                            "Landline"});
                table172.AddRow(new string[] {
                            "6479992222",
                            "X",
                            "2",
                            "Work",
                            "Landline"});
                table172.AddRow(new string[] {
                            "6479993333",
                            "X",
                            "18",
                            "Home",
                            "Mobile"});
#line 221
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table172, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table173.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "N",
                            "Home",
                            "Landline"});
                table173.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "A",
                            "Work",
                            "Landline"});
                table173.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "W",
                            "X",
                            "Home",
                            "Mobile"});
#line 226
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table173, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4290")]
        public virtual void CITI_4290()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4290", "Home Work Cell are same and good from DL, receiving Citi MT with Home Verbal DNC " +
                    "(BANK)", ((string[])(null)));
#line 233
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table174.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479991111",
                            "A"});
#line 235
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table174, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table175.AddRow(new string[] {
                            "6479991111",
                            "A"});
#line 238
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table175, "Given ");
#line hidden
#line 241
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 242
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table176.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table176.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "B"});
#line 244
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table176, "When ");
#line hidden
#line 248
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table177.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Mobile"});
#line 251
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table177, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table178.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "B",
                            "V",
                            "Work",
                            "Mobile"});
                table178.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table178.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Work",
                            "Mobile"});
#line 254
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table178, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4291")]
        public virtual void CITI_4291()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4291", "Home Work Cell are same and good from DL, receiving Citi MT with Work Verbal DNC " +
                    "(BANK)", ((string[])(null)));
#line 261
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table179.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479991111",
                            "A"});
#line 263
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table179, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table180.AddRow(new string[] {
                            "6479991111",
                            "A"});
#line 266
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table180, "Given ");
#line hidden
#line 269
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 270
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table181.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479991111"});
                table181.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "X"});
#line 272
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table181, "When ");
#line hidden
#line 276
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 277
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table182.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Mobile"});
#line 279
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table182, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table183.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table183.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "X",
                            "V",
                            "Work",
                            "Mobile"});
                table183.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Work",
                            "Mobile"});
#line 282
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table183, "And ");
#line hidden
#line 287
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4292")]
        public virtual void CITI_4292()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4292", "Home Work Cell are same and good from DL, receiving Citi MT with Cell Written DNC" +
                    " applies to all phone statuses (BANK)", ((string[])(null)));
#line 290
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table184.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479991111",
                            "A"});
#line 292
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table184, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table185.AddRow(new string[] {
                            "6479991111",
                            "A"});
#line 295
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table185, "Given ");
#line hidden
#line 298
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 299
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 300
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table186.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table186.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "W"});
#line 301
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table186, "When ");
#line hidden
#line 305
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 306
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 307
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table187.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Work",
                            "Mobile"});
#line 308
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table187, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table188.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table188.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table188.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "W",
                            "X",
                            "Work",
                            "Mobile"});
#line 311
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table188, "And ");
#line hidden
#line 316
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4293")]
        public virtual void CITI_4293()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4293", "Home Work Cell are same and good from DL, ARx has extra phones, receiving Citi MT" +
                    " with Cell Written DNC applies to all phones (BANK)", ((string[])(null)));
#line 319
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table189.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479991111",
                            "A"});
#line 321
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table189, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table190.AddRow(new string[] {
                            "6479991111",
                            "A"});
#line 324
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table190, "Given ");
#line hidden
#line 327
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 328
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 329
 testRunner.And("the user adds a new number 6479994444 with status Active location Home service La" +
                        "ndline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 330
 testRunner.Then("The Account Phones table for the account has 2 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table191.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table191.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "W"});
#line 331
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table191, "When ");
#line hidden
#line 335
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 336
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table192.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Work",
                            "Mobile"});
                table192.AddRow(new string[] {
                            "6479994444",
                            "X",
                            "3",
                            "Home",
                            "Landline"});
#line 337
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table192, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table193.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table193.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table193.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "W",
                            "X",
                            "Work",
                            "Mobile"});
#line 341
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table193, "And ");
#line hidden
#line 346
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4294")]
        public virtual void CITI_4294()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4294", "Home Work Cell are bad from DL, receiving Citi MT with good for those Home Work C" +
                    "ell (BANK)", ((string[])(null)));
#line 349
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table194.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B"});
#line 351
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table194, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table195.AddRow(new string[] {
                            "6479993333",
                            "B"});
#line 354
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table195, "Given ");
#line hidden
#line 357
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 358
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table196.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table196.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "A"});
                table196.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table196.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table196.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table196.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 359
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table196, "When ");
#line hidden
#line 367
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 368
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table197.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table197.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table197.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
#line 369
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table197, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table198.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table198.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "A",
                            "Work",
                            "Landline"});
                table198.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 374
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table198, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4295")]
        public virtual void CITI_4295()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4295", "Home Work Cell are same and bad from DL, receiving Citi MT with good indicator fo" +
                    "r those Home Work Cell (BANK)", ((string[])(null)));
#line 381
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table199.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479991111",
                            "B"});
#line 383
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table199, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table200.AddRow(new string[] {
                            "6479991111",
                            "B"});
#line 386
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table200, "Given ");
#line hidden
#line 389
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 390
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 391
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table201.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table201.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "A"});
                table201.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479991111"});
                table201.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table201.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table201.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 392
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table201, "When ");
#line hidden
#line 400
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 401
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table202.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Mobile"});
#line 402
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table202, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table203.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table203.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "A",
                            "Work",
                            "Landline"});
                table203.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 405
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table203, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4296")]
        public virtual void CITI_4296()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4296", "Home Work Cell are bad from DL file then receiving a Citi MT file with new good H" +
                    "ome Work Cell (BANK)", ((string[])(null)));
#line 412
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table204.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B"});
#line 414
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table204, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table205.AddRow(new string[] {
                            "6479993333",
                            "B"});
#line 417
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table205, "Given ");
#line hidden
#line 420
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 421
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table206.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479994444"});
                table206.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table206.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479995555"});
                table206.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table206.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479996666"});
                table206.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 422
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table206, "When ");
#line hidden
#line 430
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 431
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table207.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table207.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table207.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
                table207.AddRow(new string[] {
                            "6479994444",
                            "N",
                            "3",
                            "Home",
                            "Landline"});
                table207.AddRow(new string[] {
                            "6479995555",
                            "A",
                            "4",
                            "Work",
                            "Landline"});
                table207.AddRow(new string[] {
                            "6479996666",
                            "W",
                            "19",
                            "Home",
                            "Mobile"});
#line 432
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table207, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table208.AddRow(new string[] {
                            "6479994444",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "N",
                            "Home",
                            "Landline"});
                table208.AddRow(new string[] {
                            "6479995555",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "A",
                            "Work",
                            "Landline"});
                table208.AddRow(new string[] {
                            "6479996666",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 440
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table208, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4297")]
        public virtual void CITI_4297()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4297", "Verify the processing of Citi Maintenance when missing the indicator update (BANK" +
                    ")", ((string[])(null)));
#line 447
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table209.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B"});
#line 449
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table209, "Given ");
#line hidden
#line 452
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 453
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table210.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
#line 454
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table210, "When ");
#line hidden
#line 457
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 458
 testRunner.Then("An exception error is thrown as General Error exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4298")]
        public virtual void CITI_4298()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4298", "Verify the processing of Citi Maintenance when missing the phone number update (B" +
                    "ANK)", ((string[])(null)));
#line 461
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table211.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B",
                            "6479993333",
                            "B"});
#line 463
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table211, "Given ");
#line hidden
#line 466
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 467
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table212.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
#line 468
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table212, "When ");
#line hidden
#line 471
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 472
 testRunner.Then("An exception error is thrown as General Error exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4299")]
        public virtual void CITI_4299()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4299", "Verify the processing of Citi Maintenance when the phone indicator is not in the " +
                    "mapping (BANK)", ((string[])(null)));
#line 475
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table213.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B"});
#line 477
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table213, "Given ");
#line hidden
#line 480
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 481
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table214.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table214.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "Z"});
#line 482
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table214, "When ");
#line hidden
#line 486
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 487
 testRunner.Then("An exception error is thrown as General Error exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4300")]
        public virtual void CITI_4300()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4300", "Home Work are good from DL then receiving a Citi MT with good Cell number that is" +
                    " same with current Home (BANK)", ((string[])(null)));
#line 490
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table215.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 492
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table215, "Given ");
#line hidden
#line 495
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 496
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table216.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table216.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 497
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table216, "When ");
#line hidden
#line 501
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 502
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 503
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table217.AddRow(new string[] {
                            "6479991111",
                            "W",
                            "1",
                            "Home",
                            "Mobile"});
                table217.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
#line 504
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table217, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table218.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table218.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table218.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 508
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table218, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4301")]
        public virtual void CITI_4301()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4301", "Home Work are good from DL then receiving a Citi MT with a different good Cell nu" +
                    "mber (BANK)", ((string[])(null)));
#line 515
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table219.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "",
                            ""});
#line 517
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table219, "Given ");
#line hidden
#line 520
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 521
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table220.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table220.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 522
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table220, "When ");
#line hidden
#line 526
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 527
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table221.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "1",
                            "Home",
                            "Landline"});
                table221.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
                table221.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
#line 528
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table221, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table222.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table222.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table222.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 533
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table222, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4302")]
        public virtual void CITI_4302()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4302", "Home Work Cell are good from DL then receiving a Citi MT with new different good " +
                    "Home Work Cell (BANK)", ((string[])(null)));
#line 540
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table223.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 542
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table223, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table224.AddRow(new string[] {
                            "6479993333",
                            "A"});
#line 545
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table224, "Given ");
#line hidden
#line 548
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 549
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table225.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479994444"});
                table225.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "J"});
                table225.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479995555"});
                table225.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "J"});
                table225.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479996666"});
                table225.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 550
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table225, "When ");
#line hidden
#line 558
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 559
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table226.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "1",
                            "Home",
                            "Landline"});
                table226.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
                table226.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
                table226.AddRow(new string[] {
                            "6479994444",
                            "A",
                            "3",
                            "Home",
                            "Landline"});
                table226.AddRow(new string[] {
                            "6479995555",
                            "A",
                            "4",
                            "Work",
                            "Landline"});
                table226.AddRow(new string[] {
                            "6479996666",
                            "W",
                            "19",
                            "Home",
                            "Mobile"});
#line 560
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table226, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table227.AddRow(new string[] {
                            "6479994444",
                            "MASHPH",
                            "MASHPF",
                            "J",
                            "A",
                            "Home",
                            "Landline"});
                table227.AddRow(new string[] {
                            "6479995555",
                            "MASOPH",
                            "MASOPF",
                            "J",
                            "A",
                            "Work",
                            "Landline"});
                table227.AddRow(new string[] {
                            "6479996666",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 568
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table227, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_3915")]
        public virtual void CITI_3915()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_3915", "Receiving Citi MT for phone update when InternalExternal = O and Recoverer = AGEN" +
                    "CY and there is no outgoing history", ((string[])(null)));
#line 575
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table228.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 577
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table228, "Given ");
#line hidden
#line 580
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 581
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value",
                            "Flag",
                            "RecovererId"});
                table229.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111",
                            "O",
                            "Agency"});
                table229.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "B",
                            "O",
                            "Agency"});
#line 582
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table229, "When ");
#line hidden
#line 586
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 587
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table230.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table230.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
#line 588
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table230, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table231.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "B",
                            "V",
                            "Home",
                            "Landline"});
                table231.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
#line 592
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table231, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4304")]
        public virtual void CITI_4304()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4304", "Receiving Citi MT for phone update when InternalExternal = O and Recoverer = AGEN" +
                    "CY where there was outgoing history and they are same", ((string[])(null)));
#line 598
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table232.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 600
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table232, "Given ");
#line hidden
#line 603
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 604
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 605
 testRunner.When("the user changes the phone number 6479991111 to status Verbal Do Not Call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 606
 testRunner.And("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 607
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value",
                            "Flag",
                            "RecovererId"});
                table233.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111",
                            "O",
                            "Agency"});
                table233.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "X",
                            "O",
                            "Agency"});
#line 608
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table233, "When ");
#line hidden
#line 612
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 613
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table234.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table234.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
#line 614
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table234, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table235.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "X",
                            "V",
                            "Home",
                            "Landline"});
                table235.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
#line 618
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table235, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4443")]
        public virtual void CITI_4443()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4443", "Home Work Cell is good then loads an incoming MT file with Not In Service Home Wo" +
                    "rk Cell", ((string[])(null)));
#line 624
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table236.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 626
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table236, "Given ");
#line hidden
#line 629
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 630
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table237.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table237.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table237.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table237.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "N"});
                table237.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table237.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "N"});
#line 631
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table237, "When ");
#line hidden
#line 639
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table238.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "1",
                            "Home",
                            "Landline"});
                table238.AddRow(new string[] {
                            "6479992222",
                            "N",
                            "2",
                            "Work",
                            "Landline"});
                table238.AddRow(new string[] {
                            "6479993333",
                            "N",
                            "18",
                            "Home",
                            "Mobile"});
#line 640
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table238, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
