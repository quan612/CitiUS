// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiIncomingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("InboundMTPhonesForOILS")]
    [NUnit.Framework.CategoryAttribute("InboundMaintenance")]
    [NUnit.Framework.CategoryAttribute("Phones")]
    [NUnit.Framework.CategoryAttribute("OILS")]
    [NUnit.Framework.CategoryAttribute("epic:84633")]
    public partial class InboundMTPhonesForOILSFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "InboundMaintenance",
                "Phones",
                "OILS",
                "epic:84633"};
        
#line 1 "PhonesForOILS.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "InboundMTPhonesForOILS", "\tTo test the updating of phone for account through Maintenance file for Citi OILS" +
                    " accounts\t", ProgrammingLanguage.CSharp, new string[] {
                        "InboundMaintenance",
                        "Phones",
                        "OILS",
                        "epic:84633"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table239.AddRow(new string[] {
                        "OILS",
                        "Yesterday"});
#line 7
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table240.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 10
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table240, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4305")]
        public virtual void CITI_4305()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4305", "No phone in ARx, receiving Citi MT with all bad phone indicators (OILS)", ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table241.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
#line 17
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table241, "Given ");
#line hidden
#line 20
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table242.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table242.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table242.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table242.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "N"});
                table242.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table242.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "N"});
#line 23
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table242, "When ");
#line hidden
#line 31
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table243.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table243.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table243.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
#line 33
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table243, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table244.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "V",
                            "Home",
                            "Landline"});
                table244.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "N",
                            "V",
                            "Work",
                            "Landline"});
                table244.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "N",
                            "V",
                            "Home",
                            "Mobile"});
#line 38
 testRunner.Then("The Citi Phone tracker table for the account is as below:", ((string)(null)), table244, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4306")]
        public virtual void CITI_4306()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4306", "No phone in ARx, receiving Citi MT with all good phone indicators (OILS)", ((string[])(null)));
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table245.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
#line 47
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table245, "Given ");
#line hidden
#line 50
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table246.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table246.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "D"});
                table246.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table246.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "E"});
                table246.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table246.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "B"});
#line 53
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table246, "When ");
#line hidden
#line 61
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table247.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "D",
                            "N",
                            "Home",
                            "Landline"});
                table247.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table247.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "B",
                            "W",
                            "Home",
                            "Mobile"});
#line 63
 testRunner.Then("The Citi Phone tracker table for the account is as below:", ((string)(null)), table247, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4307")]
        public virtual void CITI_4307()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4307", "No phone in ARx, receiving Citi MT with bad Home Written indicator applies to all" +
                    " phones (OILS)", ((string[])(null)));
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table248.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
#line 72
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table248, "Given ");
#line hidden
#line 75
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table249.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table249.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "C"});
                table249.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table249.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "Y"});
                table249.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table249.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "Y"});
#line 78
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table249, "When ");
#line hidden
#line 86
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table250.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Home",
                            "Landline"});
                table250.AddRow(new string[] {
                            "6479992222",
                            "X",
                            "2",
                            "Work",
                            "Landline"});
                table250.AddRow(new string[] {
                            "6479993333",
                            "X",
                            "18",
                            "Home",
                            "Mobile"});
#line 88
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table250, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table251.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "C",
                            "X",
                            "Home",
                            "Landline"});
                table251.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "Y",
                            "A",
                            "Work",
                            "Landline"});
                table251.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "Y",
                            "W",
                            "Home",
                            "Mobile"});
#line 93
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table251, "And ");
#line hidden
#line 98
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4308")]
        public virtual void CITI_4308()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4308", "No phone in ARx, receiving Citi MT with bad Work Verbal indicator applies to all " +
                    "phones (OILS)", ((string[])(null)));
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table252.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
#line 103
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table252, "Given ");
#line hidden
#line 106
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table253.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table253.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "A"});
                table253.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table253.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "X"});
                table253.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table253.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "A"});
#line 109
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table253, "When ");
#line hidden
#line 117
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table254.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table254.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table254.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
#line 119
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table254, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table255.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table255.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "X",
                            "V",
                            "Work",
                            "Landline"});
                table255.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Home",
                            "Mobile"});
#line 124
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table255, "And ");
#line hidden
#line 129
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4309")]
        public virtual void CITI_4309()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4309", "Home Work Cell are good from DL, receiving Citi MT with Home Verbal DNC (OILS)", ((string[])(null)));
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table256.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 134
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table256, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table257.AddRow(new string[] {
                            "6479993333",
                            "E"});
#line 137
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table257, "Given ");
#line hidden
#line 140
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table258.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table258.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table258.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table258.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "E"});
                table258.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table258.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
#line 143
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table258, "When ");
#line hidden
#line 151
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table259.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table259.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
                table259.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
#line 153
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table259, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table260.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "V",
                            "Home",
                            "Landline"});
                table260.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table260.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "E",
                            "W",
                            "Home",
                            "Mobile"});
#line 158
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table260, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4310")]
        public virtual void CITI_4310()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4310", "Home Work Cell are good from DL, receiving Citi MT with Work Verbal DNC (OILS)", ((string[])(null)));
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table261.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 167
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table261, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table262.AddRow(new string[] {
                            "6479993333",
                            "E"});
#line 170
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table262, "Given ");
#line hidden
#line 173
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 174
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table263.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table263.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "V"});
                table263.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table263.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "S"});
                table263.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table263.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "U"});
#line 176
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table263, "When ");
#line hidden
#line 184
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table264.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "1",
                            "Home",
                            "Landline"});
                table264.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table264.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
#line 186
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table264, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table265.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "V",
                            "A",
                            "Home",
                            "Landline"});
                table265.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "S",
                            "V",
                            "Work",
                            "Landline"});
                table265.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "U",
                            "W",
                            "Home",
                            "Mobile"});
#line 191
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table265, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4311")]
        public virtual void CITI_4311()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4311", "Home Work Cell are good from DL, receiving Citi MT with Cell Written DNC applies " +
                    "to all phone statuses (OILS)", ((string[])(null)));
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table266.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 200
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table266, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table267.AddRow(new string[] {
                            "6479993333",
                            "E"});
#line 203
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table267, "Given ");
#line hidden
#line 206
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 207
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table268.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table268.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "H"});
                table268.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table268.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "U"});
                table268.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table268.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "C"});
#line 209
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table268, "When ");
#line hidden
#line 217
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table269.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Home",
                            "Landline"});
                table269.AddRow(new string[] {
                            "6479992222",
                            "X",
                            "2",
                            "Work",
                            "Landline"});
                table269.AddRow(new string[] {
                            "6479993333",
                            "X",
                            "18",
                            "Home",
                            "Mobile"});
#line 219
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table269, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table270.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "H",
                            "A",
                            "Home",
                            "Landline"});
                table270.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "U",
                            "A",
                            "Work",
                            "Landline"});
                table270.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "C",
                            "X",
                            "Home",
                            "Mobile"});
#line 224
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table270, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4312")]
        public virtual void CITI_4312()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4312", "Home Work Cell are same and good from DL, receiving Citi MT with Home Verbal DNC " +
                    "(OILS)", ((string[])(null)));
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table271.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E"});
#line 233
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table271, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table272.AddRow(new string[] {
                            "6479991111",
                            "E"});
#line 236
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table272, "Given ");
#line hidden
#line 239
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 240
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table273.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table273.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
#line 242
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table273, "When ");
#line hidden
#line 246
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table274.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Mobile"});
#line 248
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table274, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table275.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "V",
                            "Work",
                            "Mobile"});
                table275.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table275.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "E",
                            "W",
                            "Work",
                            "Mobile"});
#line 251
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table275, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4313")]
        public virtual void CITI_4313()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4313", "Home Work Cell are same and good from DL, receiving Citi MT with Work Verbal DNC " +
                    "(OILS)", ((string[])(null)));
#line 258
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table276.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E",
                            "",
                            ""});
#line 260
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table276, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table277.AddRow(new string[] {
                            "6479991111",
                            "E"});
#line 263
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table277, "Given ");
#line hidden
#line 266
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 267
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 268
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table278.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479991111"});
                table278.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "S"});
#line 269
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table278, "When ");
#line hidden
#line 273
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table279.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Mobile"});
#line 275
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table279, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table280.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "E",
                            "A",
                            "Home",
                            "Landline"});
                table280.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "S",
                            "V",
                            "Work",
                            "Mobile"});
                table280.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "E",
                            "W",
                            "Work",
                            "Mobile"});
#line 278
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table280, "And ");
#line hidden
#line 283
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4314")]
        public virtual void CITI_4314()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4314", "Home Work Cell are same and good from DL, receiving Citi MT with Cell Written DNC" +
                    " applies to all phone statuses (OILS)", ((string[])(null)));
#line 286
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table281.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E"});
#line 288
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table281, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table282.AddRow(new string[] {
                            "6479991111",
                            "E"});
#line 291
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table282, "Given ");
#line hidden
#line 294
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 295
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 296
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table283.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table283.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "C"});
#line 297
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table283, "When ");
#line hidden
#line 301
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 302
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table284.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Work",
                            "Mobile"});
#line 303
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table284, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table285.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "E",
                            "A",
                            "Home",
                            "Landline"});
                table285.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table285.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "C",
                            "X",
                            "Work",
                            "Mobile"});
#line 306
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table285, "And ");
#line hidden
#line 311
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4315")]
        public virtual void CITI_4315()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4315", "Home Work Cell are same and good from DL, ARx has extra phones, receiving Citi MT" +
                    " with Cell Written DNC applies to all phones (OILS)", ((string[])(null)));
#line 314
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table286.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E"});
#line 316
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table286, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table287.AddRow(new string[] {
                            "6479991111",
                            "E"});
#line 319
  testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table287, "Given ");
#line hidden
#line 322
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 323
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 324
 testRunner.And("the user adds a new number 6479994444 with status Active location Home service La" +
                        "ndline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 325
 testRunner.Then("The Account Phones table for the account has 2 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table288.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table288.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "C"});
#line 326
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table288, "When ");
#line hidden
#line 330
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 331
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table289.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Work",
                            "Mobile"});
                table289.AddRow(new string[] {
                            "6479994444",
                            "X",
                            "3",
                            "Home",
                            "Landline"});
#line 332
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table289, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table290.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "E",
                            "A",
                            "Home",
                            "Landline"});
                table290.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table290.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "C",
                            "X",
                            "Work",
                            "Mobile"});
#line 336
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table290, "And ");
#line hidden
#line 341
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4316")]
        public virtual void CITI_4316()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4316", "Home Work Cell are bad from DL, receiving Citi MT with good for those Home Work C" +
                    "ell (OILS)", ((string[])(null)));
#line 344
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table291.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "6479992222",
                            "N"});
#line 346
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table291, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator"});
                table292.AddRow(new string[] {
                            "6479993333",
                            "N"});
#line 349
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table292, "Given ");
#line hidden
#line 352
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 353
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "U"});
                table293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "E"});
                table293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table293.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "B"});
#line 354
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table293, "When ");
#line hidden
#line 362
 testRunner.And("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 363
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table294.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table294.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table294.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
#line 364
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table294, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table295.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "U",
                            "A",
                            "Home",
                            "Landline"});
                table295.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table295.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "B",
                            "W",
                            "Home",
                            "Mobile"});
#line 369
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table295, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4444")]
        public virtual void CITI_4444()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4444", "Home Work is good then loads an incoming MT file with Not In Service Home Work Ce" +
                    "ll 4th phone (OILS)", ((string[])(null)));
#line 376
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table296.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 378
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table296, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                            "CellNumber",
                            "CellIndicator",
                            "FourthPhoneNumber",
                            "FourthPhoneIndicator",
                            "FourthPhoneType"});
                table297.AddRow(new string[] {
                            "6479993333",
                            "A",
                            "6479994444",
                            "A",
                            "L"});
#line 381
 testRunner.Given("ThThe user modifies the X00 record in DL file with credentials:", ((string)(null)), table297, "Given ");
#line hidden
#line 384
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 385
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table298.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table298.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "D"});
                table298.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table298.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table298.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table298.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "D"});
                table298.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table298.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "D"});
#line 386
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table298, "When ");
#line hidden
#line 396
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table299.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "1",
                            "Home",
                            "Landline"});
                table299.AddRow(new string[] {
                            "6479992222",
                            "N",
                            "2",
                            "Work",
                            "Landline"});
                table299.AddRow(new string[] {
                            "6479993333",
                            "N",
                            "18",
                            "Home",
                            "Mobile"});
                table299.AddRow(new string[] {
                            "6479994444",
                            "N",
                            "3",
                            "Unknown",
                            "Landline"});
#line 397
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table299, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
