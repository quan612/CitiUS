// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiIncomingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Inbound MT with DSA field codes")]
    [NUnit.Framework.CategoryAttribute("InboundMaintenance")]
    [NUnit.Framework.CategoryAttribute("DSA")]
    [NUnit.Framework.CategoryAttribute("epic:85568")]
    public partial class InboundMTWithDSAFieldCodesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "InboundMaintenance",
                "DSA",
                "epic:85568"};
        
#line 1 "DSAFieldCodes.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Inbound MT with DSA field codes", "\tFor updating account DSA", ProgrammingLanguage.CSharp, new string[] {
                        "InboundMaintenance",
                        "DSA",
                        "epic:85568"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table59.AddRow(new string[] {
                        "OILS",
                        "2019/08/15"});
#line 7
  testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table60.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 10
  testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table60, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4688")]
        public virtual void CITI_4688()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4688", "Verify the processing of MAS field codes for DSA\t", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 16
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table61.AddRow(new string[] {
                            "Text6",
                            ""});
                table61.AddRow(new string[] {
                            "Text7",
                            ""});
                table61.AddRow(new string[] {
                            "Text8",
                            ""});
                table61.AddRow(new string[] {
                            "Text9",
                            ""});
                table61.AddRow(new string[] {
                            "Text10",
                            ""});
                table61.AddRow(new string[] {
                            "Text11",
                            ""});
                table61.AddRow(new string[] {
                            "Text15",
                            ""});
                table61.AddRow(new string[] {
                            "Text12",
                            ""});
#line 18
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table61, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table62.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDNM",
                            "Test DSA Name"});
                table62.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDA1",
                            "Address 1"});
                table62.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDA2",
                            "Address 2"});
                table62.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDCT",
                            "Toronto"});
                table62.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDST",
                            "AZ"});
                table62.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDZP",
                            "12345-1234"});
                table62.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDPH",
                            "4169991234"});
                table62.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDEM",
                            "abc@gmail.com"});
#line 28
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table62, "When ");
#line hidden
#line 38
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table63.AddRow(new string[] {
                            "Text6",
                            "Test DSA Name"});
                table63.AddRow(new string[] {
                            "Text7",
                            "Address 1"});
                table63.AddRow(new string[] {
                            "Text8",
                            "Address 2"});
                table63.AddRow(new string[] {
                            "Text9",
                            "Toronto"});
                table63.AddRow(new string[] {
                            "Text10",
                            "AZ"});
                table63.AddRow(new string[] {
                            "Text11",
                            "12345-1234"});
                table63.AddRow(new string[] {
                            "Text15",
                            "4169991234"});
                table63.AddRow(new string[] {
                            "Text12",
                            "abc@gmail.com"});
#line 40
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table63, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4689")]
        public virtual void CITI_4689()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4689", "Verify the values can be updated when we had some DSA values from placement and t" +
                    "hen having different values from MAS field codes in MT file", ((string[])(null)));
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table64.AddRow(new string[] {
                            "DsaName",
                            "Test DSA Name"});
                table64.AddRow(new string[] {
                            "DsaAddress1",
                            "Address 1"});
                table64.AddRow(new string[] {
                            "DsaAddress2",
                            "Address 2"});
                table64.AddRow(new string[] {
                            "DsaCity",
                            "Toronto"});
                table64.AddRow(new string[] {
                            "DsaState",
                            "AZ"});
                table64.AddRow(new string[] {
                            "DsaZip",
                            "12345-1234"});
                table64.AddRow(new string[] {
                            "DsaPhone",
                            "4169991234"});
                table64.AddRow(new string[] {
                            "DsaEmail",
                            "abc@gmail.com"});
#line 53
 testRunner.Given("The user modifies the M record in DL file with credentials:", ((string)(null)), table64, "Given ");
#line hidden
#line 63
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table65.AddRow(new string[] {
                            "Text6",
                            "Test DSA Name"});
                table65.AddRow(new string[] {
                            "Text7",
                            "Address 1"});
                table65.AddRow(new string[] {
                            "Text8",
                            "Address 2"});
                table65.AddRow(new string[] {
                            "Text9",
                            "Toronto"});
                table65.AddRow(new string[] {
                            "Text10",
                            "AZ"});
                table65.AddRow(new string[] {
                            "Text11",
                            "12345-1234"});
                table65.AddRow(new string[] {
                            "Text15",
                            "4169991234"});
                table65.AddRow(new string[] {
                            "Text12",
                            "abc@gmail.com"});
#line 65
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table65, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table66.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDNM",
                            "Quan"});
                table66.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDA1",
                            "line 1 changed"});
                table66.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDA2",
                            "line 2 changed"});
                table66.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDCT",
                            "Vancouver"});
                table66.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDST",
                            "BC"});
                table66.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDZP",
                            "M2M3M4"});
                table66.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDPH",
                            "6479991111"});
                table66.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDEM",
                            "test1234@yahoo.com"});
#line 75
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table66, "When ");
#line hidden
#line 85
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table67.AddRow(new string[] {
                            "Text6",
                            "Quan"});
                table67.AddRow(new string[] {
                            "Text7",
                            "line 1 changed"});
                table67.AddRow(new string[] {
                            "Text8",
                            "line 2 changed"});
                table67.AddRow(new string[] {
                            "Text9",
                            "Vancouver"});
                table67.AddRow(new string[] {
                            "Text10",
                            "BC"});
                table67.AddRow(new string[] {
                            "Text11",
                            "M2M3M4"});
                table67.AddRow(new string[] {
                            "Text15",
                            "6479991111"});
                table67.AddRow(new string[] {
                            "Text12",
                            "test1234@yahoo.com"});
#line 87
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table67, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4690")]
        public virtual void CITI_4690()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4690", "Verify the processing of MAS field codes for DSA when the values are blank in MT " +
                    "file", ((string[])(null)));
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table68.AddRow(new string[] {
                            "DsaName",
                            "Test DSA Name"});
                table68.AddRow(new string[] {
                            "DsaAddress1",
                            "Address 1"});
                table68.AddRow(new string[] {
                            "DsaAddress2",
                            "Address 2"});
                table68.AddRow(new string[] {
                            "DsaCity",
                            "Toronto"});
                table68.AddRow(new string[] {
                            "DsaState",
                            "AZ"});
                table68.AddRow(new string[] {
                            "DsaZip",
                            "12345-1234"});
                table68.AddRow(new string[] {
                            "DsaPhone",
                            "4169991234"});
                table68.AddRow(new string[] {
                            "DsaEmail",
                            "abc@gmail.com"});
#line 100
 testRunner.Given("The user modifies the M record in DL file with credentials:", ((string)(null)), table68, "Given ");
#line hidden
#line 110
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table69.AddRow(new string[] {
                            "Text6",
                            "Test DSA Name"});
                table69.AddRow(new string[] {
                            "Text7",
                            "Address 1"});
                table69.AddRow(new string[] {
                            "Text8",
                            "Address 2"});
                table69.AddRow(new string[] {
                            "Text9",
                            "Toronto"});
                table69.AddRow(new string[] {
                            "Text10",
                            "AZ"});
                table69.AddRow(new string[] {
                            "Text11",
                            "12345-1234"});
                table69.AddRow(new string[] {
                            "Text15",
                            "4169991234"});
                table69.AddRow(new string[] {
                            "Text12",
                            "abc@gmail.com"});
#line 112
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table69, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table70.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDNM",
                            ""});
                table70.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDA1",
                            ""});
                table70.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDA2",
                            ""});
                table70.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDCT",
                            ""});
                table70.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDST",
                            ""});
                table70.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDZP",
                            ""});
                table70.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDPH",
                            ""});
                table70.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASDEM",
                            ""});
#line 122
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table70, "When ");
#line hidden
#line 132
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table71.AddRow(new string[] {
                            "Text6",
                            ""});
                table71.AddRow(new string[] {
                            "Text7",
                            ""});
                table71.AddRow(new string[] {
                            "Text8",
                            ""});
                table71.AddRow(new string[] {
                            "Text9",
                            ""});
                table71.AddRow(new string[] {
                            "Text10",
                            ""});
                table71.AddRow(new string[] {
                            "Text11",
                            ""});
                table71.AddRow(new string[] {
                            "Text15",
                            ""});
                table71.AddRow(new string[] {
                            "Text12",
                            ""});
#line 134
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table71, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
