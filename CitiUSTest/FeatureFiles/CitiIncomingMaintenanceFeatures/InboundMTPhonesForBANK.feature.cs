// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiIncomingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("InboundMTPhonesForBANK")]
    [NUnit.Framework.CategoryAttribute("Inbound")]
    [NUnit.Framework.CategoryAttribute("Maintenance")]
    [NUnit.Framework.CategoryAttribute("Phones")]
    [NUnit.Framework.CategoryAttribute("BANK")]
    public partial class InboundMTPhonesForBANKFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Inbound",
                "Maintenance",
                "Phones",
                "BANK"};
        
#line 1 "InboundMTPhonesForBANK.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "InboundMTPhonesForBANK", "\tTo test the updating of phone for account through Maintenance file for Citi BANK" +
                    " accounts\t", ProgrammingLanguage.CSharp, new string[] {
                        "Inbound",
                        "Maintenance",
                        "Phones",
                        "BANK"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table76.AddRow(new string[] {
                        "BANK",
                        "Yesterday"});
#line 7
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table77.AddRow(new string[] {
                        "CONS",
                        "433902",
                        "BANK",
                        "GL03"});
#line 10
 testRunner.And("The user modifies the account record in DL file with credentials:", ((string)(null)), table77, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4283")]
        public virtual void CITI_4283()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4283", "No phone in ARx, receiving Citi MT with all bad phone indicators (BANK)", ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table78.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 17
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table78, "Given ");
#line hidden
#line 20
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "B"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "B"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "B"});
#line 24
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table79, "When ");
#line hidden
#line 32
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table80.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "B",
                            "V",
                            "Home",
                            "Landline"});
                table80.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "B",
                            "V",
                            "Work",
                            "Landline"});
                table80.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "B",
                            "V",
                            "Home",
                            "Mobile"});
#line 35
 testRunner.Then("The Citi Phone tracker table for the account is as below:", ((string)(null)), table80, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4284")]
        public virtual void CITI_4284()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4284", "No phone in ARx, receiving Citi MT with all good phone indicators (BANK)", ((string[])(null)));
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table81.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 44
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table81, "Given ");
#line hidden
#line 47
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 51
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table82, "When ");
#line hidden
#line 59
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table83.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "N",
                            "Home",
                            "Landline"});
                table83.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "A",
                            "Work",
                            "Landline"});
                table83.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 62
 testRunner.Then("The Citi Phone tracker table for the account is as below:", ((string)(null)), table83, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4285")]
        public virtual void CITI_4285()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4285", "No phone in ARx, receiving Citi MT with bad Home Written indicator applies to all" +
                    " phones (BANK)", ((string[])(null)));
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table84.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 71
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table84, "Given ");
#line hidden
#line 74
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "W"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "A"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "A"});
#line 78
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table85, "When ");
#line hidden
#line 86
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table86.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Home",
                            "Landline"});
                table86.AddRow(new string[] {
                            "6479992222",
                            "X",
                            "2",
                            "Work",
                            "Landline"});
                table86.AddRow(new string[] {
                            "6479993333",
                            "X",
                            "3",
                            "Home",
                            "Mobile"});
#line 89
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table86, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table87.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "W",
                            "X",
                            "Home",
                            "Landline"});
                table87.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table87.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Home",
                            "Mobile"});
#line 94
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table87, "And ");
#line hidden
#line 99
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4286")]
        public virtual void CITI_4286()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4286", "No phone in ARx, receiving Citi MT with bad Work Verbal indicator applies to all " +
                    "phones (BANK)", ((string[])(null)));
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table88.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 104
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table88, "Given ");
#line hidden
#line 107
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "A"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "V"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "A"});
#line 111
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table89, "When ");
#line hidden
#line 119
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table90.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table90.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table90.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "3",
                            "Home",
                            "Mobile"});
#line 122
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table90, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table91.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table91.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "V",
                            "V",
                            "Work",
                            "Landline"});
                table91.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Home",
                            "Mobile"});
#line 127
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table91, "And ");
#line hidden
#line 132
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4287")]
        public virtual void CITI_4287()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4287", "Home Work Cell are good from DL, receiving Citi MT with Home Verbal DNC (BANK)", ((string[])(null)));
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table92.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "6479993333",
                            "A"});
#line 137
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table92, "Given ");
#line hidden
#line 140
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "B"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "N"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 144
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table93, "When ");
#line hidden
#line 152
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table94.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table94.AddRow(new string[] {
                            "6479992222",
                            "N",
                            "2",
                            "Work",
                            "Landline"});
                table94.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
#line 155
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table94, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table95.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "B",
                            "V",
                            "Home",
                            "Landline"});
                table95.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "N",
                            "N",
                            "Work",
                            "Landline"});
                table95.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 160
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table95, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4288")]
        public virtual void CITI_4288()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4288", "Home Work Cell are good from DL, receiving Citi MT with Work Verbal DNC (BANK)", ((string[])(null)));
#line 167
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table96.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "6479993333",
                            "A"});
#line 169
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table96, "Given ");
#line hidden
#line 172
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "X"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 176
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table97, "When ");
#line hidden
#line 184
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table98.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "1",
                            "Home",
                            "Landline"});
                table98.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table98.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
#line 187
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table98, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table99.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "N",
                            "Home",
                            "Landline"});
                table99.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "X",
                            "V",
                            "Work",
                            "Landline"});
                table99.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 192
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table99, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4289")]
        public virtual void CITI_4289()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4289", "Home Work Cell are good from DL, receiving Citi MT with Cell Written DNC applies " +
                    "to all phone statuses (BANK)", ((string[])(null)));
#line 199
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table100.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "6479993333",
                            "A"});
#line 201
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table100, "Given ");
#line hidden
#line 204
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.Then("The Account Phones table for the account has 3 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "W"});
#line 208
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table101, "When ");
#line hidden
#line 216
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table102.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Home",
                            "Landline"});
                table102.AddRow(new string[] {
                            "6479992222",
                            "X",
                            "2",
                            "Work",
                            "Landline"});
                table102.AddRow(new string[] {
                            "6479993333",
                            "X",
                            "18",
                            "Home",
                            "Mobile"});
#line 219
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table102, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table103.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "N",
                            "Home",
                            "Landline"});
                table103.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "A",
                            "Work",
                            "Landline"});
                table103.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "W",
                            "X",
                            "Home",
                            "Mobile"});
#line 224
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table103, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4290")]
        public virtual void CITI_4290()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4290", "Home Work Cell are same and good from DL, receiving Citi MT with Home Verbal DNC " +
                    "(BANK)", ((string[])(null)));
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table104.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479991111",
                            "A",
                            "6479991111",
                            "A"});
#line 233
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table104, "Given ");
#line hidden
#line 236
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 237
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "B"});
#line 240
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table105, "When ");
#line hidden
#line 244
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 245
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 246
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table106.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Mobile"});
#line 247
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table106, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table107.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "B",
                            "V",
                            "Work",
                            "Mobile"});
                table107.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table107.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Work",
                            "Mobile"});
#line 250
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table107, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4291")]
        public virtual void CITI_4291()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4291", "Home Work Cell are same and good from DL, receiving Citi MT with Work Verbal DNC " +
                    "(BANK)", ((string[])(null)));
#line 257
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table108.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479991111",
                            "A",
                            "6479991111",
                            "A"});
#line 259
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table108, "Given ");
#line hidden
#line 262
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 263
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 265
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table109.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479991111"});
                table109.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "X"});
#line 266
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table109, "When ");
#line hidden
#line 270
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table110.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Mobile"});
#line 273
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table110, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table111.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table111.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "X",
                            "V",
                            "Work",
                            "Mobile"});
                table111.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Work",
                            "Mobile"});
#line 276
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table111, "And ");
#line hidden
#line 281
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4292")]
        public virtual void CITI_4292()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4292", "Home Work Cell are same and good from DL, receiving Citi MT with Cell Written DNC" +
                    " applies to all phone statuses (BANK)", ((string[])(null)));
#line 284
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table112.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479991111",
                            "A",
                            "6479991111",
                            "A"});
#line 286
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table112, "Given ");
#line hidden
#line 289
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 290
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 291
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "W"});
#line 293
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table113, "When ");
#line hidden
#line 297
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 298
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 299
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table114.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Work",
                            "Mobile"});
#line 300
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table114, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table115.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table115.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table115.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "W",
                            "X",
                            "Work",
                            "Mobile"});
#line 303
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table115, "And ");
#line hidden
#line 308
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4293")]
        public virtual void CITI_4293()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4293", "Home Work Cell are same and good from DL, ARx has extra phones, receiving Citi MT" +
                    " with Cell Written DNC applies to all phones (BANK)", ((string[])(null)));
#line 311
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table116.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479991111",
                            "A",
                            "6479991111",
                            "A"});
#line 313
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table116, "Given ");
#line hidden
#line 316
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 317
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 318
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
 testRunner.And("the user adds a new number 6479994444 with status Active location Home service La" +
                        "ndline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 320
 testRunner.Then("The Account Phones table for the account has 2 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "W"});
#line 321
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table117, "When ");
#line hidden
#line 325
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 326
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 327
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table118.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Work",
                            "Mobile"});
                table118.AddRow(new string[] {
                            "6479994444",
                            "X",
                            "3",
                            "Home",
                            "Landline"});
#line 328
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table118, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table119.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table119.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table119.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "W",
                            "X",
                            "Work",
                            "Mobile"});
#line 332
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table119, "And ");
#line hidden
#line 337
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4294")]
        public virtual void CITI_4294()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4294", "Home Work Cell are bad from DL, receiving Citi MT with good  for those Home Work " +
                    "Cell (BANK)", ((string[])(null)));
#line 340
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table120.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B",
                            "6479993333",
                            "B"});
#line 342
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table120, "Given ");
#line hidden
#line 345
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 346
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 347
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 348
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table121, "When ");
#line hidden
#line 356
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 357
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 358
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table122.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table122.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table122.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
#line 359
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table122, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table123.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "V",
                            "Home",
                            "Landline"});
                table123.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "V",
                            "Work",
                            "Landline"});
                table123.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "V",
                            "Home",
                            "Mobile"});
#line 364
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table123, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4295")]
        public virtual void CITI_4295()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4295", "Home Work Cell are same and bad from DL, receiving Citi MT with good indicator fo" +
                    "r those Home Work Cell (BANK)", ((string[])(null)));
#line 371
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table124.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479991111",
                            "B",
                            "6479991111",
                            "B"});
#line 373
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table124, "Given ");
#line hidden
#line 376
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 377
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 378
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 379
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479991111"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 380
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table125, "When ");
#line hidden
#line 388
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 389
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 390
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table126.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Mobile"});
#line 391
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table126, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table127.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "V",
                            "Work",
                            "Mobile"});
                table127.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "V",
                            "Work",
                            "Mobile"});
                table127.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "V",
                            "Work",
                            "Mobile"});
#line 394
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table127, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4296")]
        public virtual void CITI_4296()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4296", "Home Work Cell are bad from DL file then receiving a Citi MT file with new good H" +
                    "ome Work Cell (BANK)", ((string[])(null)));
#line 401
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table128.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B",
                            "6479993333",
                            "B"});
#line 403
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table128, "Given ");
#line hidden
#line 406
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 407
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 408
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479994444"});
                table129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479995555"});
                table129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479996666"});
                table129.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 409
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table129, "When ");
#line hidden
#line 417
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 418
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 419
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table130.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table130.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table130.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "18",
                            "Home",
                            "Mobile"});
                table130.AddRow(new string[] {
                            "6479994444",
                            "N",
                            "3",
                            "Home",
                            "Landline"});
                table130.AddRow(new string[] {
                            "6479995555",
                            "A",
                            "4",
                            "Work",
                            "Landline"});
                table130.AddRow(new string[] {
                            "6479996666",
                            "W",
                            "5",
                            "Home",
                            "Mobile"});
#line 420
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table130, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table131.AddRow(new string[] {
                            "6479994444",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "N",
                            "Home",
                            "Landline"});
                table131.AddRow(new string[] {
                            "6479995555",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "A",
                            "Work",
                            "Landline"});
                table131.AddRow(new string[] {
                            "6479996666",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 428
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table131, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4297")]
        public virtual void CITI_4297()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4297", "Verify the processing of Citi Maintenance when missing the indicator update (BANK" +
                    ")", ((string[])(null)));
#line 435
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table132.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B",
                            "6479993333",
                            "B"});
#line 437
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table132, "Given ");
#line hidden
#line 440
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 441
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 442
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table133.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
#line 443
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table133, "When ");
#line hidden
#line 446
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 447
 testRunner.Then("An exception error is thrown as General Error exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4298")]
        public virtual void CITI_4298()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4298", "Verify the processing of Citi Maintenance when missing the phone number update (B" +
                    "ANK)", ((string[])(null)));
#line 450
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table134.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B",
                            "6479993333",
                            "B"});
#line 452
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table134, "Given ");
#line hidden
#line 455
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 456
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 457
 testRunner.When("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table135.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
#line 458
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table135, "When ");
#line hidden
#line 461
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 462
 testRunner.Then("An exception error is thrown as General Error exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4299")]
        public virtual void CITI_4299()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4299", "Verify the processing of Citi Maintenance when the phone indicator is not in the " +
                    "mapping (BANK)", ((string[])(null)));
#line 465
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table136.AddRow(new string[] {
                            "6479991111",
                            "B",
                            "6479992222",
                            "B",
                            "6479993333",
                            "B"});
#line 467
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table136, "Given ");
#line hidden
#line 470
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 471
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 472
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table137.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table137.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "Z"});
#line 473
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table137, "When ");
#line hidden
#line 477
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 478
 testRunner.Then("An exception error is thrown as General Error exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4300")]
        public virtual void CITI_4300()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4300", "Home Work are good from DL then receiving a Citi MT with good Cell number that is" +
                    " same with current Home (BANK)", ((string[])(null)));
#line 481
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table138.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "",
                            ""});
#line 483
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table138, "Given ");
#line hidden
#line 486
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 487
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 488
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table139.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table139.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 489
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table139, "When ");
#line hidden
#line 493
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 494
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 495
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table140.AddRow(new string[] {
                            "6479991111",
                            "W",
                            "1",
                            "Home",
                            "Mobile"});
                table140.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
#line 496
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table140, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table141.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table141.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table141.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 500
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table141, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4301")]
        public virtual void CITI_4301()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4301", "Home Work are good from DL then receiving a Citi MT with a different good Cell nu" +
                    "mber (BANK)", ((string[])(null)));
#line 507
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table142.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "",
                            ""});
#line 509
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table142, "Given ");
#line hidden
#line 512
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 513
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 514
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table143.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table143.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 515
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table143, "When ");
#line hidden
#line 519
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 520
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 521
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table144.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "1",
                            "Home",
                            "Landline"});
                table144.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
                table144.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "3",
                            "Home",
                            "Mobile"});
#line 522
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table144, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table145.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table145.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
                table145.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 527
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table145, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4302")]
        public virtual void CITI_4302()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4302", "Home Work Cell are good from DL then receiving a Citi MT with new different good " +
                    "Home Work Cell (BANK)", ((string[])(null)));
#line 534
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table146.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "6479993333",
                            "A"});
#line 536
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table146, "Given ");
#line hidden
#line 539
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 540
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 541
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table147.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479994444"});
                table147.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "J"});
                table147.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479995555"});
                table147.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "J"});
                table147.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479996666"});
                table147.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "J"});
#line 542
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table147, "When ");
#line hidden
#line 550
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 551
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 552
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table148.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "1",
                            "Home",
                            "Landline"});
                table148.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
                table148.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "18",
                            "Home",
                            "Mobile"});
                table148.AddRow(new string[] {
                            "6479994444",
                            "A",
                            "3",
                            "Home",
                            "Landline"});
                table148.AddRow(new string[] {
                            "6479995555",
                            "A",
                            "4",
                            "Work",
                            "Landline"});
                table148.AddRow(new string[] {
                            "6479996666",
                            "W",
                            "5",
                            "Home",
                            "Mobile"});
#line 553
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table148, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table149.AddRow(new string[] {
                            "6479994444",
                            "MASHPH",
                            "MASHPF",
                            "J",
                            "A",
                            "Home",
                            "Landline"});
                table149.AddRow(new string[] {
                            "6479995555",
                            "MASOPH",
                            "MASOPF",
                            "J",
                            "A",
                            "Work",
                            "Landline"});
                table149.AddRow(new string[] {
                            "6479996666",
                            "MASCPN",
                            "MASCPI",
                            "J",
                            "W",
                            "Home",
                            "Mobile"});
#line 561
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table149, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_3915")]
        public virtual void CITI_3915()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_3915", "Receiving Citi MT for phone update when InternalExternal = O and Recoverer = AGEN" +
                    "CY and there is no outgoing history", ((string[])(null)));
#line 568
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table150.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "",
                            ""});
#line 570
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table150, "Given ");
#line hidden
#line 573
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 574
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 575
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value",
                            "Flag",
                            "RecovererId"});
                table151.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111",
                            "O",
                            "Agency"});
                table151.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "B",
                            "O",
                            "Agency"});
#line 576
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table151, "When ");
#line hidden
#line 580
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 581
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 582
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table152.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table152.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
#line 583
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table152, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table153.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "B",
                            "V",
                            "Home",
                            "Landline"});
                table153.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
#line 587
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table153, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4304")]
        public virtual void CITI_4304()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4304", "Receiving Citi MT for phone update when InternalExternal = O and Recoverer = AGEN" +
                    "CY where there was outgoing history and they are same", ((string[])(null)));
#line 593
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table154.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "",
                            ""});
#line 595
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table154, "Given ");
#line hidden
#line 598
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 599
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 600
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 601
 testRunner.When("the user changes the phone number 6479991111 to status Verbal Do Not Call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 602
 testRunner.And("The user generates an outbound maintenance file for BANK_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 603
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value",
                            "Flag",
                            "RecovererId"});
                table155.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111",
                            "O",
                            "Agency"});
                table155.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "X",
                            "O",
                            "Agency"});
#line 604
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table155, "When ");
#line hidden
#line 608
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 609
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 610
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table156.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table156.AddRow(new string[] {
                            "6479992222",
                            "A",
                            "2",
                            "Work",
                            "Landline"});
#line 611
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table156, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table157.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "X",
                            "V",
                            "Home",
                            "Landline"});
                table157.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "A",
                            "A",
                            "Work",
                            "Landline"});
#line 615
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table157, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4443")]
        public virtual void CITI_4443()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4443", "Home Work Cell is good then loads an incoming MT file with Not In Service Home Wo" +
                    "rk Cell", ((string[])(null)));
#line 621
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table158.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A",
                            "6479993333",
                            "A"});
#line 623
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table158, "Given ");
#line hidden
#line 626
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 627
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table159.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table159.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table159.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table159.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "N"});
                table159.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table159.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "N"});
#line 628
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table159, "When ");
#line hidden
#line 636
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table160.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "1",
                            "Home",
                            "Landline"});
                table160.AddRow(new string[] {
                            "6479992222",
                            "N",
                            "2",
                            "Work",
                            "Landline"});
                table160.AddRow(new string[] {
                            "6479993333",
                            "N",
                            "18",
                            "Home",
                            "Mobile"});
#line 637
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table160, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
