// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiIncomingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("InboundMTPhonesForOILS")]
    public partial class InboundMTPhonesForOILSFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "InboundMTPhonesForOILS.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "InboundMTPhonesForOILS", "\tTo test the updating of phone for account through Maintenance file for Citi OILS" +
                    " accounts\t", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table76.AddRow(new string[] {
                        "OILS",
                        "Yesterday"});
#line 6
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table77.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 9
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table77, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4305")]
        public virtual void CITI_4305()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4305", "No phone in ARx, receiving Citi MT with all bad phone indicators (OILS)", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table78.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 16
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table78, "Given ");
#line hidden
#line 19
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "N"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table79.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "N"});
#line 23
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table79, "When ");
#line hidden
#line 31
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table80.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "V",
                            "Home",
                            "Landline"});
                table80.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "N",
                            "V",
                            "Work",
                            "Landline"});
                table80.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "N",
                            "V",
                            "Home",
                            "Mobile"});
#line 34
 testRunner.Then("The Citi Phone tracker table for the account is as below:", ((string)(null)), table80, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4306")]
        public virtual void CITI_4306()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4306", "No phone in ARx, receiving Citi MT with all good phone indicators (OILS)", ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table81.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 43
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table81, "Given ");
#line hidden
#line 46
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "D"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "E"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table82.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "B"});
#line 50
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table82, "When ");
#line hidden
#line 58
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table83.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "D",
                            "N",
                            "Home",
                            "Landline"});
                table83.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table83.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "B",
                            "W",
                            "Home",
                            "Mobile"});
#line 61
 testRunner.Then("The Citi Phone tracker table for the account is as below:", ((string)(null)), table83, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4307")]
        public virtual void CITI_4307()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4307", "No phone in ARx, receiving Citi MT with bad Home Written indicator applies to all" +
                    " phones (OILS)", ((string[])(null)));
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table84.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 70
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table84, "Given ");
#line hidden
#line 73
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "C"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "Y"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table85.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "Y"});
#line 77
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table85, "When ");
#line hidden
#line 85
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table86.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Home",
                            "Landline"});
                table86.AddRow(new string[] {
                            "6479992222",
                            "X",
                            "2",
                            "Work",
                            "Landline"});
                table86.AddRow(new string[] {
                            "6479993333",
                            "X",
                            "3",
                            "Home",
                            "Mobile"});
#line 88
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table86, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table87.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "C",
                            "X",
                            "Home",
                            "Landline"});
                table87.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "Y",
                            "A",
                            "Work",
                            "Landline"});
                table87.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "Y",
                            "W",
                            "Home",
                            "Mobile"});
#line 93
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table87, "And ");
#line hidden
#line 98
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4308")]
        public virtual void CITI_4308()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4308", "No phone in ARx, receiving Citi MT with bad Work Verbal indicator applies to all " +
                    "phones (OILS)", ((string[])(null)));
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table88.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 103
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table88, "Given ");
#line hidden
#line 106
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.Then("The Account Phones table for the account has 0 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "A"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "X"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table89.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "A"});
#line 110
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table89, "When ");
#line hidden
#line 118
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table90.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table90.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table90.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "3",
                            "Home",
                            "Mobile"});
#line 121
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table90, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table91.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "A",
                            "A",
                            "Home",
                            "Landline"});
                table91.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "X",
                            "V",
                            "Work",
                            "Landline"});
                table91.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "A",
                            "W",
                            "Home",
                            "Mobile"});
#line 126
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table91, "And ");
#line hidden
#line 131
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4309")]
        public virtual void CITI_4309()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4309", "Home Work Cell are good from DL, receiving Citi MT with Home Verbal DNC (OILS)", ((string[])(null)));
#line 134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table92.AddRow(new string[] {
                            "6479991111",
                            "D",
                            "6479992222",
                            "D",
                            "",
                            ""});
#line 136
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table92, "Given ");
#line hidden
#line 139
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.Then("The Account Phones table for the account has 2 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table93.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
#line 143
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table93, "When ");
#line hidden
#line 151
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table94.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table94.AddRow(new string[] {
                            "6479992222",
                            "N",
                            "2",
                            "Work",
                            "Landline"});
                table94.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "3",
                            "Home",
                            "Mobile"});
#line 154
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table94, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table95.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "V",
                            "Home",
                            "Landline"});
                table95.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "D",
                            "N",
                            "Work",
                            "Landline"});
                table95.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "E",
                            "W",
                            "Home",
                            "Mobile"});
#line 159
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table95, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4310")]
        public virtual void CITI_4310()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4310", "Home Work Cell are good from DL, receiving Citi MT with Work Verbal DNC (OILS)", ((string[])(null)));
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table96.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "D",
                            "",
                            ""});
#line 168
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table96, "Given ");
#line hidden
#line 171
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 172
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.Then("The Account Phones table for the account has 2 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "V"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "S"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table97.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "U"});
#line 175
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table97, "When ");
#line hidden
#line 183
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table98.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "1",
                            "Home",
                            "Landline"});
                table98.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table98.AddRow(new string[] {
                            "6479993333",
                            "W",
                            "3",
                            "Home",
                            "Mobile"});
#line 186
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table98, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table99.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "V",
                            "A",
                            "Home",
                            "Landline"});
                table99.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "S",
                            "V",
                            "Work",
                            "Landline"});
                table99.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "U",
                            "W",
                            "Home",
                            "Mobile"});
#line 191
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table99, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4311")]
        public virtual void CITI_4311()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4311", "Home Work Cell are good from DL, receiving Citi MT with Cell Written DNC applies " +
                    "to all phone statuses (OILS)", ((string[])(null)));
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table100.AddRow(new string[] {
                            "6479991111",
                            "D",
                            "6479992222",
                            "D",
                            "",
                            ""});
#line 200
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table100, "Given ");
#line hidden
#line 203
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 204
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.Then("The Account Phones table for the account has 2 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "H"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "U"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table101.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "C"});
#line 207
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table101, "When ");
#line hidden
#line 215
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table102.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Home",
                            "Landline"});
                table102.AddRow(new string[] {
                            "6479992222",
                            "X",
                            "2",
                            "Work",
                            "Landline"});
                table102.AddRow(new string[] {
                            "6479993333",
                            "X",
                            "3",
                            "Home",
                            "Mobile"});
#line 218
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table102, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table103.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "H",
                            "N",
                            "Home",
                            "Landline"});
                table103.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "U",
                            "N",
                            "Work",
                            "Landline"});
                table103.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "C",
                            "X",
                            "Home",
                            "Mobile"});
#line 223
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table103, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4312")]
        public virtual void CITI_4312()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4312", "Home Work Cell are same and good from DL, receiving Citi MT with Home Verbal DNC " +
                    "(OILS)", ((string[])(null)));
#line 230
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table104.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E",
                            "",
                            ""});
#line 232
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table104, "Given ");
#line hidden
#line 235
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 236
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table105.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "N"});
#line 239
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table105, "When ");
#line hidden
#line 243
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 245
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table106.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Landline"});
#line 246
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table106, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table107.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "N",
                            "V",
                            "Work",
                            "Landline"});
                table107.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
#line 249
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table107, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4313")]
        public virtual void CITI_4313()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4313", "Home Work Cell are same and good from DL, receiving Citi MT with Work Verbal DNC " +
                    "(OILS)", ((string[])(null)));
#line 255
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table108.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E",
                            "",
                            ""});
#line 257
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table108, "Given ");
#line hidden
#line 260
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table109.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479991111"});
                table109.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "S"});
#line 264
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table109, "When ");
#line hidden
#line 268
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 269
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table110.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Work",
                            "Landline"});
#line 271
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table110, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table111.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "E",
                            "A",
                            "Home",
                            "Landline"});
                table111.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "S",
                            "V",
                            "Work",
                            "Landline"});
#line 274
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table111, "And ");
#line hidden
#line 278
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4314")]
        public virtual void CITI_4314()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4314", "Home Work Cell are same and good from DL, receiving Citi MT with Cell Written DNC" +
                    " applies to all phone statuses (OILS)", ((string[])(null)));
#line 281
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table112.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E",
                            "",
                            ""});
#line 283
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table112, "Given ");
#line hidden
#line 286
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 287
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
 testRunner.Then("The Account Phones table for the account has 1 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "C"});
#line 290
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table113, "When ");
#line hidden
#line 294
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 296
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table114.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Work",
                            "Mobile"});
#line 297
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table114, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table115.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "E",
                            "A",
                            "Home",
                            "Landline"});
                table115.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table115.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "C",
                            "X",
                            "Work",
                            "Mobile"});
#line 300
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table115, "And ");
#line hidden
#line 305
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4315")]
        public virtual void CITI_4315()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4315", "Home Work Cell are same and good from DL, ARx has extra phones, receiving Citi MT" +
                    " with Cell Written DNC applies to all phones (OILS)", ((string[])(null)));
#line 308
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table116.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E",
                            "",
                            ""});
#line 310
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table116, "Given ");
#line hidden
#line 313
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 314
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 315
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 316
 testRunner.And("the user adds a new number 6479994444 with status Active location Home service La" +
                        "ndline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 317
 testRunner.Then("The Account Phones table for the account has 2 records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "C"});
#line 318
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table117, "When ");
#line hidden
#line 322
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 323
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 324
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table118.AddRow(new string[] {
                            "6479991111",
                            "X",
                            "1",
                            "Work",
                            "Mobile"});
                table118.AddRow(new string[] {
                            "6479994444",
                            "X",
                            "3",
                            "Home",
                            "Landline"});
#line 325
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table118, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table119.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "E",
                            "A",
                            "Home",
                            "Landline"});
                table119.AddRow(new string[] {
                            "6479991111",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "A",
                            "Work",
                            "Landline"});
                table119.AddRow(new string[] {
                            "6479991111",
                            "MASCPN",
                            "MASCPI",
                            "C",
                            "X",
                            "Work",
                            "Mobile"});
#line 329
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table119, "And ");
#line hidden
#line 334
 testRunner.And("The action code 234 is applied to the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4316")]
        public virtual void CITI_4316()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4316", "Home Work Cell are bad from DL, receiving Citi MT with good  for those Home Work " +
                    "Cell (OILS)", ((string[])(null)));
#line 337
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator",
                            "CellNumber",
                            "CellIndicator"});
                table120.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "6479992222",
                            "N",
                            "",
                            ""});
#line 339
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table120, "Given ");
#line hidden
#line 342
 testRunner.When("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 343
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 344
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 345
 testRunner.And("the user adds a new number 6479993333 with status Verbal Do Not Call location Hom" +
                        "e service Mobile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "D"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "E"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "B"});
#line 346
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table121, "When ");
#line hidden
#line 354
 testRunner.And("The user drops the file to the client UNC path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 355
 testRunner.And("The file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 356
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table122.AddRow(new string[] {
                            "6479991111",
                            "V",
                            "1",
                            "Home",
                            "Landline"});
                table122.AddRow(new string[] {
                            "6479992222",
                            "V",
                            "2",
                            "Work",
                            "Landline"});
                table122.AddRow(new string[] {
                            "6479993333",
                            "V",
                            "3",
                            "Home",
                            "Mobile"});
#line 357
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table122, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "CitiPhoneNumberField",
                            "CitiIndicatorField",
                            "CitiIndicator",
                            "ARxPhoneStatus",
                            "ARxPhoneLocationType",
                            "ARxPhoneServiceType"});
                table123.AddRow(new string[] {
                            "6479991111",
                            "MASHPH",
                            "MASHPF",
                            "D",
                            "V",
                            "Home",
                            "Landline"});
                table123.AddRow(new string[] {
                            "6479992222",
                            "MASOPH",
                            "MASOPF",
                            "E",
                            "V",
                            "Work",
                            "Landline"});
                table123.AddRow(new string[] {
                            "6479993333",
                            "MASCPN",
                            "MASCPI",
                            "B",
                            "V",
                            "Home",
                            "Mobile"});
#line 362
 testRunner.And("The Citi Phone tracker table for the account is as below:", ((string)(null)), table123, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4444")]
        public virtual void CITI_4444()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4444", "Home Work is good then loads an incoming MT file with Not In Service Home Work Ce" +
                    "ll 4th phone (OILS)", ((string[])(null)));
#line 369
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table124.AddRow(new string[] {
                            "6479991111",
                            "A",
                            "6479992222",
                            "A"});
#line 371
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table124, "Given ");
#line hidden
#line 374
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 375
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPH",
                            "6479991111"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASHPF",
                            "D"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPH",
                            "6479992222"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASOPF",
                            "D"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "D"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table125.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "D"});
#line 376
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table125, "When ");
#line hidden
#line 386
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                            "PhoneNumber",
                            "PhoneStatus",
                            "DisplaySlot",
                            "LocationType",
                            "ServiceType"});
                table126.AddRow(new string[] {
                            "6479991111",
                            "N",
                            "1",
                            "Home",
                            "Landline"});
                table126.AddRow(new string[] {
                            "6479992222",
                            "N",
                            "2",
                            "Work",
                            "Landline"});
                table126.AddRow(new string[] {
                            "6479993333",
                            "N",
                            "3",
                            "Home",
                            "Mobile"});
                table126.AddRow(new string[] {
                            "6479994444",
                            "N",
                            "4",
                            "Unknown",
                            "Unknown"});
#line 387
 testRunner.Then("The Account Phones table for the account is as below:", ((string)(null)), table126, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
