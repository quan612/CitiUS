// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiIncomingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Inbound MT with MASBK MASRB field codes")]
    [NUnit.Framework.CategoryAttribute("InboundMaintenance")]
    [NUnit.Framework.CategoryAttribute("MASBK_MASRB")]
    [NUnit.Framework.CategoryAttribute("epic:85568")]
    public partial class InboundMTWithMASBKMASRBFieldCodesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "InboundMaintenance",
                "MASBK_MASRB",
                "epic:85568"};
        
#line 1 "MASBK_MASRB.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Inbound MT with MASBK MASRB field codes", null, ProgrammingLanguage.CSharp, new string[] {
                        "InboundMaintenance",
                        "MASBK_MASRB",
                        "epic:85568"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table99.AddRow(new string[] {
                        "OILS",
                        "2019/08/15"});
#line 6
  testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table100.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 9
  testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table100, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4700")]
        public virtual void CITI_4700()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4700", "Verify the saving of bucket values when processing an inbound MT", ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 15
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table101.AddRow(new string[] {
                            "Number4",
                            ""});
                table101.AddRow(new string[] {
                            "Number5",
                            ""});
                table101.AddRow(new string[] {
                            "Number6",
                            ""});
                table101.AddRow(new string[] {
                            "Number7",
                            ""});
                table101.AddRow(new string[] {
                            "Number8",
                            ""});
                table101.AddRow(new string[] {
                            "Number9",
                            ""});
                table101.AddRow(new string[] {
                            "Curr1",
                            ""});
#line 17
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table101, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table102.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK1",
                            "1.11"});
                table102.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK2",
                            "2.22"});
                table102.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK3",
                            "3.33"});
                table102.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK4",
                            "6.66"});
                table102.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK5",
                            "5.55"});
                table102.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK6",
                            "4.44"});
#line 26
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table102, "When ");
#line hidden
#line 34
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table103.AddRow(new string[] {
                            "Number4",
                            "1.11"});
                table103.AddRow(new string[] {
                            "Number5",
                            "2.22"});
                table103.AddRow(new string[] {
                            "Number6",
                            "3.33"});
                table103.AddRow(new string[] {
                            "Number7",
                            "6.66"});
                table103.AddRow(new string[] {
                            "Number8",
                            "5.55"});
                table103.AddRow(new string[] {
                            "Number9",
                            "4.44"});
                table103.AddRow(new string[] {
                            "Curr1",
                            "6.66"});
#line 36
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table103, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4701")]
        public virtual void CITI_4701()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4701", "Verify the updating of bucket values when having values received in placement and" +
                    " then having different values in inbound MT", ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table104.AddRow(new string[] {
                            "MsaDelqBucket1",
                            "1.11"});
                table104.AddRow(new string[] {
                            "MsaDelqBucket2",
                            "2.22"});
                table104.AddRow(new string[] {
                            "MsaDelqBucket3",
                            "3.33"});
                table104.AddRow(new string[] {
                            "MsaDelqBucket4",
                            "6.66"});
                table104.AddRow(new string[] {
                            "MsaDelqBucket5",
                            "5.55"});
                table104.AddRow(new string[] {
                            "MsaDelqBucket6",
                            "4.44"});
#line 48
 testRunner.Given("The user modifies the X01 record in DL file with credentials:", ((string)(null)), table104, "Given ");
#line hidden
#line 56
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table105.AddRow(new string[] {
                            "Number4",
                            "1.11"});
                table105.AddRow(new string[] {
                            "Number5",
                            "2.22"});
                table105.AddRow(new string[] {
                            "Number6",
                            "3.33"});
                table105.AddRow(new string[] {
                            "Number7",
                            "6.66"});
                table105.AddRow(new string[] {
                            "Number8",
                            "5.55"});
                table105.AddRow(new string[] {
                            "Number9",
                            "4.44"});
                table105.AddRow(new string[] {
                            "Curr1",
                            "6.66"});
#line 58
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table105, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table106.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK1",
                            "11.11"});
                table106.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK2",
                            "12.22"});
                table106.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK3",
                            "13.33"});
                table106.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK4",
                            "16.66"});
                table106.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK5",
                            "15.55"});
                table106.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK6",
                            "14.44"});
#line 67
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table106, "When ");
#line hidden
#line 75
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table107.AddRow(new string[] {
                            "Number4",
                            "11.11"});
                table107.AddRow(new string[] {
                            "Number5",
                            "12.22"});
                table107.AddRow(new string[] {
                            "Number6",
                            "13.33"});
                table107.AddRow(new string[] {
                            "Number7",
                            "16.66"});
                table107.AddRow(new string[] {
                            "Number8",
                            "15.55"});
                table107.AddRow(new string[] {
                            "Number9",
                            "14.44"});
                table107.AddRow(new string[] {
                            "Curr1",
                            "16.66"});
#line 77
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table107, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4702")]
        public virtual void CITI_4702()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4702", "Verify the updating of bucket values when having values received in placement and" +
                    " then having blank values in inbound MT", ((string[])(null)));
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table108.AddRow(new string[] {
                            "MsaDelqBucket1",
                            "1.11"});
                table108.AddRow(new string[] {
                            "MsaDelqBucket2",
                            "2.22"});
                table108.AddRow(new string[] {
                            "MsaDelqBucket3",
                            "3.33"});
                table108.AddRow(new string[] {
                            "MsaDelqBucket4",
                            "6.66"});
                table108.AddRow(new string[] {
                            "MsaDelqBucket5",
                            "5.55"});
                table108.AddRow(new string[] {
                            "MsaDelqBucket6",
                            "4.44"});
#line 89
 testRunner.Given("The user modifies the X01 record in DL file with credentials:", ((string)(null)), table108, "Given ");
#line hidden
#line 97
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table109.AddRow(new string[] {
                            "Number4",
                            "1.11"});
                table109.AddRow(new string[] {
                            "Number5",
                            "2.22"});
                table109.AddRow(new string[] {
                            "Number6",
                            "3.33"});
                table109.AddRow(new string[] {
                            "Number7",
                            "6.66"});
                table109.AddRow(new string[] {
                            "Number8",
                            "5.55"});
                table109.AddRow(new string[] {
                            "Number9",
                            "4.44"});
                table109.AddRow(new string[] {
                            "Curr1",
                            "6.66"});
#line 99
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table109, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK1",
                            ""});
                table110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK2",
                            ""});
                table110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK3",
                            ""});
                table110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK4",
                            ""});
                table110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK5",
                            ""});
                table110.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASBK6",
                            ""});
#line 108
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table110, "When ");
#line hidden
#line 116
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table111.AddRow(new string[] {
                            "Number4",
                            ""});
                table111.AddRow(new string[] {
                            "Number5",
                            ""});
                table111.AddRow(new string[] {
                            "Number6",
                            ""});
                table111.AddRow(new string[] {
                            "Number7",
                            ""});
                table111.AddRow(new string[] {
                            "Number8",
                            ""});
                table111.AddRow(new string[] {
                            "Number9",
                            ""});
                table111.AddRow(new string[] {
                            "Curr1",
                            ""});
#line 118
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table111, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4703")]
        public virtual void CITI_4703()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4703", "Verify the saving of roolbck values when processing an inbound MT", ((string[])(null)));
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 130
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table112.AddRow(new string[] {
                            "Number10",
                            ""});
                table112.AddRow(new string[] {
                            "Number11",
                            ""});
                table112.AddRow(new string[] {
                            "Number12",
                            ""});
                table112.AddRow(new string[] {
                            "Number13",
                            ""});
                table112.AddRow(new string[] {
                            "Number14",
                            ""});
                table112.AddRow(new string[] {
                            "Number15",
                            ""});
#line 132
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table112, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB1",
                            "21.11"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB2",
                            "22.22"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB3",
                            "23.33"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB4",
                            "26.66"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB5",
                            "25.55"});
                table113.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB6",
                            "24.44"});
#line 140
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table113, "When ");
#line hidden
#line 148
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table114.AddRow(new string[] {
                            "Number10",
                            "21.11"});
                table114.AddRow(new string[] {
                            "Number11",
                            "22.22"});
                table114.AddRow(new string[] {
                            "Number12",
                            "23.33"});
                table114.AddRow(new string[] {
                            "Number13",
                            "26.66"});
                table114.AddRow(new string[] {
                            "Number14",
                            "25.55"});
                table114.AddRow(new string[] {
                            "Number15",
                            "24.44"});
#line 150
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table114, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4704")]
        public virtual void CITI_4704()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4704", "Verify the updating of rollbck values when having values received in placement an" +
                    "d then having different values in inbound MT", ((string[])(null)));
#line 159
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table115.AddRow(new string[] {
                            "MsaRollBck1",
                            "11.11"});
                table115.AddRow(new string[] {
                            "MsaRollBck1",
                            "22.22"});
                table115.AddRow(new string[] {
                            "MsaRollBck1",
                            "33.33"});
                table115.AddRow(new string[] {
                            "MsaRollBck1",
                            "44.44"});
                table115.AddRow(new string[] {
                            "MsaRollBck1",
                            "55.55"});
                table115.AddRow(new string[] {
                            "MsaRollBck1",
                            "66.66"});
#line 161
 testRunner.Given("The user modifies the X01 record in DL file with credentials:", ((string)(null)), table115, "Given ");
#line hidden
#line 169
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 170
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table116.AddRow(new string[] {
                            "Number10",
                            "11.11"});
                table116.AddRow(new string[] {
                            "Number11",
                            "22.22"});
                table116.AddRow(new string[] {
                            "Number12",
                            "33.33"});
                table116.AddRow(new string[] {
                            "Number13",
                            "44.44"});
                table116.AddRow(new string[] {
                            "Number14",
                            "55.55"});
                table116.AddRow(new string[] {
                            "Number15",
                            "66.66"});
#line 171
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table116, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB1",
                            "991.11"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB2",
                            "992.22"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB3",
                            "993.33"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB4",
                            "996.66"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB5",
                            "995.55"});
                table117.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB6",
                            "994.44"});
#line 179
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table117, "When ");
#line hidden
#line 187
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 188
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table118.AddRow(new string[] {
                            "Number10",
                            "991.11"});
                table118.AddRow(new string[] {
                            "Number11",
                            "992.22"});
                table118.AddRow(new string[] {
                            "Number12",
                            "993.33"});
                table118.AddRow(new string[] {
                            "Number13",
                            "996.66"});
                table118.AddRow(new string[] {
                            "Number14",
                            "995.55"});
                table118.AddRow(new string[] {
                            "Number15",
                            "994.44"});
#line 189
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table118, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4705")]
        public virtual void CITI_4705()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4705", "Verify the updating of rollbck values when having values received in placement an" +
                    "d then having blank values in inbound MT", ((string[])(null)));
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table119.AddRow(new string[] {
                            "MsaRollBck1",
                            "11.11"});
                table119.AddRow(new string[] {
                            "MsaRollBck1",
                            "22.22"});
                table119.AddRow(new string[] {
                            "MsaRollBck1",
                            "33.33"});
                table119.AddRow(new string[] {
                            "MsaRollBck1",
                            "44.44"});
                table119.AddRow(new string[] {
                            "MsaRollBck1",
                            "55.55"});
                table119.AddRow(new string[] {
                            "MsaRollBck1",
                            "66.66"});
#line 200
 testRunner.Given("The user modifies the X01 record in DL file with credentials:", ((string)(null)), table119, "Given ");
#line hidden
#line 208
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table120.AddRow(new string[] {
                            "Number10",
                            "11.11"});
                table120.AddRow(new string[] {
                            "Number11",
                            "22.22"});
                table120.AddRow(new string[] {
                            "Number12",
                            "33.33"});
                table120.AddRow(new string[] {
                            "Number13",
                            "44.44"});
                table120.AddRow(new string[] {
                            "Number14",
                            "55.55"});
                table120.AddRow(new string[] {
                            "Number15",
                            "66.66"});
#line 210
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table120, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB1",
                            ""});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB2",
                            ""});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB3",
                            ""});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB4",
                            ""});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB5",
                            ""});
                table121.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRB6",
                            ""});
#line 218
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table121, "When ");
#line hidden
#line 226
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 227
 testRunner.And("The ECollectUpdate Job is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table122.AddRow(new string[] {
                            "Number10",
                            ""});
                table122.AddRow(new string[] {
                            "Number11",
                            ""});
                table122.AddRow(new string[] {
                            "Number12",
                            ""});
                table122.AddRow(new string[] {
                            "Number13",
                            ""});
                table122.AddRow(new string[] {
                            "Number14",
                            ""});
                table122.AddRow(new string[] {
                            "Number15",
                            ""});
#line 228
 testRunner.Then("The Interal Extras table for the account is as below:", ((string)(null)), table122, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
