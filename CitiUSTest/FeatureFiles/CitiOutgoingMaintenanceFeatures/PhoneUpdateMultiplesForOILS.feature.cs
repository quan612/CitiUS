// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiOutgoingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Multiples Phones Updates for OILS")]
    [NUnit.Framework.CategoryAttribute("OutboundMaintenance")]
    [NUnit.Framework.CategoryAttribute("Phones")]
    [NUnit.Framework.CategoryAttribute("MultipleChanges")]
    [NUnit.Framework.CategoryAttribute("epic:84633")]
    public partial class MultiplesPhonesUpdatesForOILSFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "OutboundMaintenance",
                "Phones",
                "MultipleChanges",
                "epic:84633"};
        
#line 1 "PhoneUpdateMultiplesForOILS.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Multiples Phones Updates for OILS", null, ProgrammingLanguage.CSharp, new string[] {
                        "OutboundMaintenance",
                        "Phones",
                        "MultipleChanges",
                        "epic:84633"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table678 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table678.AddRow(new string[] {
                        "OILS",
                        "2019/08/15"});
#line 6
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table678, "And ");
#line hidden
            TechTalk.SpecFlow.Table table679 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table679.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 9
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table679, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4442")]
        public virtual void CITI_4442()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4442", "Citi Cell is good, agent changes this Cell status to Active and doing multiple ch" +
                    "anges test (OILS)", ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table680 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table680.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 16
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table680, "Given ");
#line hidden
#line 19
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table681 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table681.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table681.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
#line 21
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table681, "When ");
#line hidden
#line 25
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table682 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table682.AddRow(new string[] {
                            "MASHPH"});
                table682.AddRow(new string[] {
                            "MASHPF"});
                table682.AddRow(new string[] {
                            "MASOPH"});
                table682.AddRow(new string[] {
                            "MASOPF"});
                table682.AddRow(new string[] {
                            "MASCPN"});
                table682.AddRow(new string[] {
                            "MASCPI"});
#line 28
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table682, "Then ");
#line hidden
#line 36
 testRunner.When("the user changes the phone number 6479993333 to status Active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table683 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table683.AddRow(new string[] {
                            "MASHPH"});
                table683.AddRow(new string[] {
                            "MASHPF"});
                table683.AddRow(new string[] {
                            "MASOPH"});
                table683.AddRow(new string[] {
                            "MASOPF"});
                table683.AddRow(new string[] {
                            "MASCPN"});
                table683.AddRow(new string[] {
                            "MASCPI"});
#line 39
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table683, "Then ");
#line hidden
#line 47
 testRunner.When("the user changes the phone number 6479991111 to status Wrong Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table684 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table684.AddRow(new string[] {
                            "MASHPH",
                            "6479991111"});
                table684.AddRow(new string[] {
                            "MASHPF",
                            "N"});
#line 50
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table684, "Then ");
#line hidden
#line 54
 testRunner.When("the user changes the phone number 6479993333 to status Wireless", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.And("the user creates a call record for phone number 6479993333 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table685 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldCode"});
                table685.AddRow(new string[] {
                            "MASHPH"});
                table685.AddRow(new string[] {
                            "MASHPF"});
                table685.AddRow(new string[] {
                            "MASOPH"});
                table685.AddRow(new string[] {
                            "MASOPF"});
                table685.AddRow(new string[] {
                            "MASCPN"});
                table685.AddRow(new string[] {
                            "MASCPI"});
#line 58
 testRunner.Then("The records below should not be sent for the account in the file", ((string)(null)), table685, "Then ");
#line hidden
#line 66
 testRunner.When("the user changes the phone number 6479993333 to status Active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.When("the user adds a new number 6479996666 with status Wireless location Home service " +
                        "Mobile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.And("the user creates a call record for phone number 6479996666 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table686 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table686.AddRow(new string[] {
                            "MASCPN",
                            "6479996666"});
                table686.AddRow(new string[] {
                            "MASCPI",
                            "Y"});
                table686.AddRow(new string[] {
                            "MASRPH",
                            "6479993333"});
                table686.AddRow(new string[] {
                            "MASRPF",
                            "Y"});
#line 71
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table686, "Then ");
#line hidden
#line 77
 testRunner.When("the user changes the phone number 6479991111 to status Active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.And("the user creates a call record for phone number 6479991111 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table687 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table687.AddRow(new string[] {
                            "MASHPH",
                            "6479991111"});
                table687.AddRow(new string[] {
                            "MASHPF",
                            "Y"});
#line 81
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table687, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
