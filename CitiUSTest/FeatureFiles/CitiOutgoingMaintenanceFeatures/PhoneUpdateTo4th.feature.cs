// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CitiUSTest.FeatureFiles.CitiOutgoingMaintenanceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PhoneUpdateTo4th")]
    [NUnit.Framework.CategoryAttribute("OutboundMaintenance")]
    [NUnit.Framework.CategoryAttribute("Phones")]
    [NUnit.Framework.CategoryAttribute("4thPhone")]
    public partial class PhoneUpdateTo4ThFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "OutboundMaintenance",
                "Phones",
                "4thPhone"};
        
#line 1 "PhoneUpdateTo4th.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PhoneUpdateTo4th", "\tTo test sending of 4th phonen number update to Citi", ProgrammingLanguage.CSharp, new string[] {
                        "OutboundMaintenance",
                        "Phones",
                        "4thPhone"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("The user creates a Citi NBS based on the sample file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table688 = new TechTalk.SpecFlow.Table(new string[] {
                        "MIOCode",
                        "ListDate"});
            table688.AddRow(new string[] {
                        "OILS",
                        "2019/08/15"});
#line 7
 testRunner.And("The user modifies the header record with credentials:", ((string)(null)), table688, "And ");
#line hidden
            TechTalk.SpecFlow.Table table689 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanTypeCode",
                        "OfficerCode",
                        "MIOCode",
                        "RecovererCode"});
            table689.AddRow(new string[] {
                        "CONS",
                        "0800",
                        "OILS",
                        "GIC5"});
#line 10
 testRunner.And("The user modifies the recoverer in DL file with credentials:", ((string)(null)), table689, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4415")]
        public virtual void CITI_4415()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4415", "Citi Home Work Cell is good and user adds a new good Home phone with RPC (OILS)", ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table690 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table690.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 17
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table690, "Given ");
#line hidden
#line 20
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table691 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table691.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table691.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
#line 22
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table691, "When ");
#line hidden
#line 26
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("the user adds a new number 6479994444 with status Active location Home service La" +
                        "ndline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("the user creates a call record for phone number 6479994444 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table692 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table692.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table692.AddRow(new string[] {
                            "MASRPF",
                            "Y"});
#line 31
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table692, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4416")]
        public virtual void CITI_4416()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4416", "Citi Home Work Cell is good and user adds a new good Work phone with RPC (OILS)", ((string[])(null)));
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table693 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table693.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 39
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table693, "Given ");
#line hidden
#line 42
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table694 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table694.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table694.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
#line 44
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table694, "When ");
#line hidden
#line 48
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("the user adds a new number 6479994444 with status Active location Work service La" +
                        "ndline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("the user creates a call record for phone number 6479994444 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table695 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table695.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table695.AddRow(new string[] {
                            "MASRPF",
                            "Y"});
#line 53
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table695, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4417")]
        public virtual void CITI_4417()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4417", "Citi Home Work Cell is good and user adds a new good Cell phone with RPC (OILS)", ((string[])(null)));
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table696 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table696.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 60
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table696, "Given ");
#line hidden
#line 63
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table697 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table697.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table697.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
#line 65
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table697, "When ");
#line hidden
#line 69
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("the user adds a new number 6479994444 with status Wireless location Home service " +
                        "Landline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.And("the user creates a call record for phone number 6479994444 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table698 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table698.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table698.AddRow(new string[] {
                            "MASRPF",
                            "Y"});
#line 74
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table698, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4432")]
        public virtual void CITI_4432()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4432", "Citi Home Work Cell Good, 4th is Wrong Number, change the 4th number to Good (OIL" +
                    "S)", ((string[])(null)));
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table699 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table699.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 82
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table699, "Given ");
#line hidden
#line 85
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table700 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table700.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table700.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table700.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table700.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table700.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "I"});
#line 87
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table700, "When ");
#line hidden
#line 94
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("the user changes the phone number 6479994444 to status Active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table701 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table701.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table701.AddRow(new string[] {
                            "MASRPF",
                            "Y"});
#line 98
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table701, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4436")]
        public virtual void CITI_4436()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4436", "Citi Home Work Cell Good, 4th is Wrong Number, add a new good number in ARx (OILS" +
                    ")", ((string[])(null)));
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table702 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table702.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 105
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table702, "Given ");
#line hidden
#line 108
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table703 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table703.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table703.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table703.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table703.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table703.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "I"});
#line 110
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table703, "When ");
#line hidden
#line 117
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.And("the user adds a new number 6479995555 with status Active location Work service La" +
                        "ndline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.And("the user creates a call record for phone number 6479995555 with Right Party Conta" +
                        "ct as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table704 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table704.AddRow(new string[] {
                            "MASRPH",
                            "6479995555"});
                table704.AddRow(new string[] {
                            "MASRPF",
                            "Y"});
#line 122
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table704, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4437")]
        public virtual void CITI_4437()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4437", "Citi Home Work Cell 4th is good, change 4th number to Wrong number (OILS)", ((string[])(null)));
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table705 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table705.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 129
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table705, "Given ");
#line hidden
#line 132
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table706 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table706.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table706.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table706.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table706.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table706.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 134
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table706, "When ");
#line hidden
#line 141
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.When("the user changes the phone number 6479994444 to status Wrong Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table707 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table707.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table707.AddRow(new string[] {
                            "MASRPF",
                            "N"});
#line 145
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table707, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4438")]
        public virtual void CITI_4438()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4438", "Citi Home Work Cell 4th is good, change 4th number to Not In Service (OILS)", ((string[])(null)));
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table708 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table708.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 152
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table708, "Given ");
#line hidden
#line 155
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table709 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table709.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table709.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table709.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table709.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table709.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 157
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table709, "When ");
#line hidden
#line 164
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
 testRunner.When("the user changes the phone number 6479994444 to status Not In Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 167
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table710 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table710.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table710.AddRow(new string[] {
                            "MASRPF",
                            "D"});
#line 168
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table710, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4439")]
        public virtual void CITI_4439()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4439", "Citi Home Work Cell 4th is good, change 4th number to Written DNC (OILS)", ((string[])(null)));
#line 173
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table711 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table711.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 175
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table711, "Given ");
#line hidden
#line 178
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 179
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table712 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table712.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table712.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table712.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table712.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table712.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 180
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table712, "When ");
#line hidden
#line 187
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.When("the user changes the phone number 6479994444 to status Written Do Not Call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 189
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table713 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table713.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table713.AddRow(new string[] {
                            "MASRPF",
                            "C"});
#line 191
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table713, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4440")]
        public virtual void CITI_4440()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4440", "Citi Home Work Cell 4th is good, change 4th number to Verbal DNC (OILS)", ((string[])(null)));
#line 196
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table714 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table714.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479992222",
                            "E"});
#line 198
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table714, "Given ");
#line hidden
#line 201
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table715 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table715.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479993333"});
                table715.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
                table715.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPH",
                            "6479994444"});
                table715.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPF",
                            "E"});
                table715.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASRPT",
                            "L"});
#line 203
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table715, "When ");
#line hidden
#line 210
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
 testRunner.When("the user changes the phone number 6479994444 to status Verbal Do Not Call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 212
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 213
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table716 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table716.AddRow(new string[] {
                            "MASRPH",
                            "6479994444"});
                table716.AddRow(new string[] {
                            "MASRPF",
                            "X"});
#line 214
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table716, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CITI_4441")]
        [NUnit.Framework.CategoryAttribute("epic:84633")]
        public virtual void CITI_4441()
        {
            string[] tagsOfScenario = new string[] {
                    "epic:84633"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CITI_4441", "Citi Home Work Cell 4th are same and active, change the number to Wrong Number (O" +
                    "ILS)", new string[] {
                        "epic:84633"});
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table717 = new TechTalk.SpecFlow.Table(new string[] {
                            "HomeNumber",
                            "HomeIndicator",
                            "WorkNumber",
                            "WorkIndicator"});
                table717.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "6479991111",
                            "E"});
#line 222
 testRunner.Given("The user modifies the account record in DL file with credentials:", ((string)(null)), table717, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table718 = new TechTalk.SpecFlow.Table(new string[] {
                            "FourthPhoneNumber",
                            "FourthPhoneIndicator",
                            "FourthPhoneType"});
                table718.AddRow(new string[] {
                            "6479991111",
                            "E",
                            "L"});
#line 225
 testRunner.And("The user modifies the X00 record in DL file with credentials:", ((string)(null)), table718, "And ");
#line hidden
#line 228
 testRunner.When("The user drops the file to the UNC path, and the file is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 229
 testRunner.And("A new account is placed in ARxCollect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table719 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction DateTime",
                            "Transaction Code",
                            "Field Code",
                            "New Value"});
                table719.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPN",
                            "6479991111"});
                table719.AddRow(new string[] {
                            "Today\'s date",
                            "MT",
                            "MASCPI",
                            "E"});
#line 230
 testRunner.When("The user creates a Citi Inbound Maintenance File using account from previous step" +
                        "s:", ((string)(null)), table719, "When ");
#line hidden
#line 234
 testRunner.And("The user drops the file to the UNC path, and the file is processed and the eColle" +
                        "ct Job is done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 235
 testRunner.When("the user changes the phone number 6479991111 to status Wrong Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 236
 testRunner.When("The user generates an outbound maintenance file for OILS_ALL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 237
 testRunner.And("The associated job is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table720 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field Code",
                            "New Value"});
                table720.AddRow(new string[] {
                            "MASHPH",
                            "6479991111"});
                table720.AddRow(new string[] {
                            "MASHPF",
                            "N"});
                table720.AddRow(new string[] {
                            "MASOPH",
                            "6479991111"});
                table720.AddRow(new string[] {
                            "MASOPF",
                            "N"});
                table720.AddRow(new string[] {
                            "MASCPN",
                            "6479991111"});
                table720.AddRow(new string[] {
                            "MASCPI",
                            "N"});
                table720.AddRow(new string[] {
                            "MASRPH",
                            "6479991111"});
                table720.AddRow(new string[] {
                            "MASRPF",
                            "N"});
#line 238
 testRunner.Then("The records are sent in the outbound maintenance file as below:", ((string)(null)), table720, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
